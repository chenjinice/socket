/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: obu_apollo.proto */

#ifndef PROTOBUF_C_obu_5fapollo_2eproto__INCLUDED
#define PROTOBUF_C_obu_5fapollo_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _ObuApollo__CarInfo ObuApollo__CarInfo;
typedef struct _ObuApollo__LaneFlag ObuApollo__LaneFlag;
typedef struct _ObuApollo__LaneInfo ObuApollo__LaneInfo;
typedef struct _ObuApollo__SingleLightInfo ObuApollo__SingleLightInfo;
typedef struct _ObuApollo__LaneStopPoint ObuApollo__LaneStopPoint;
typedef struct _ObuApollo__TrafficLightInfo ObuApollo__TrafficLightInfo;
typedef struct _ObuApollo__RoadSign ObuApollo__RoadSign;
typedef struct _ObuApollo__Obstacle ObuApollo__Obstacle;
typedef struct _ObuApollo__ObuMsg ObuApollo__ObuMsg;


/* --- enums --- */

typedef enum _ObuApollo__SingleLightInfo__Color {
  OBU_APOLLO__SINGLE_LIGHT_INFO__COLOR__UNKNOWN = 0,
  OBU_APOLLO__SINGLE_LIGHT_INFO__COLOR__RED = 1,
  OBU_APOLLO__SINGLE_LIGHT_INFO__COLOR__YELLOW = 2,
  OBU_APOLLO__SINGLE_LIGHT_INFO__COLOR__GREEN = 3,
  OBU_APOLLO__SINGLE_LIGHT_INFO__COLOR__BLACK = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(OBU_APOLLO__SINGLE_LIGHT_INFO__COLOR)
} ObuApollo__SingleLightInfo__Color;
/*
 * 障碍物类型
 */
typedef enum _ObuApollo__Obstacle__ObsType {
  /*
   * 其他
   */
  OBU_APOLLO__OBSTACLE__OBS_TYPE__OTHERS = 0,
  /*
   * 人
   */
  OBU_APOLLO__OBSTACLE__OBS_TYPE__HUMAN = 1,
  /*
   * 车
   */
  OBU_APOLLO__OBSTACLE__OBS_TYPE__VEHICLE = 2,
  /*
   * 摩托车
   */
  OBU_APOLLO__OBSTACLE__OBS_TYPE__MOTORCYCLE = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(OBU_APOLLO__OBSTACLE__OBS_TYPE)
} ObuApollo__Obstacle__ObsType;

/* --- messages --- */

/*
 * 车辆信息
 */
struct  _ObuApollo__CarInfo
{
  ProtobufCMessage base;
  /*
   * 车辆ID
   */
  uint32_t id;
  /*
   * 车长*100
   */
  uint32_t depth;
  /*
   * 车宽*100
   */
  uint32_t width;
  /*
   * 实时位置经度*1e7
   */
  int32_t lng;
  /*
   * 实时位置纬度*1e7
   */
  int32_t lat;
  /*
   * 车的航向角*100
   */
  uint32_t heading;
  /*
   * 车速*100
   */
  uint32_t speed;
  /*
   * 加速度*10
   */
  int32_t acc;
  /*
   * 时间戳（当前的秒值（0～59）×1000+当前的毫秒值（0～999））
   */
  protobuf_c_boolean has_time;
  uint32_t time;
  /*
   * 水平精确度*10（5到999）
   */
  protobuf_c_boolean has_hz_accuracy;
  uint32_t hz_accuracy;
  /*
   * 车的挡位
   */
  protobuf_c_boolean has_gear;
  uint32_t gear;
  /*
   * 制动开关
   */
  protobuf_c_boolean has_brake;
  uint32_t brake;
  /*
   * rtk定位方式
   */
  protobuf_c_boolean has_rtk;
  uint32_t rtk;
  /*
   * 实时位置高度
   */
  protobuf_c_boolean has_alt;
  int32_t alt;
  /*
   *编队ID
   */
  protobuf_c_boolean has_queue_id;
  uint32_t queue_id;
};
#define OBU_APOLLO__CAR_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&obu_apollo__car_info__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


/*
 * 单个车道信息
 */
struct  _ObuApollo__LaneFlag
{
  ProtobufCMessage base;
  /*
   * 车道id
   */
  uint32_t lane_id;
  /*
   * 车道标识
   */
  protobuf_c_boolean has_flag;
  uint32_t flag;
};
#define OBU_APOLLO__LANE_FLAG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&obu_apollo__lane_flag__descriptor) \
    , 0, 0, 0 }


/*
 * 本车车道信息
 */
struct  _ObuApollo__LaneInfo
{
  ProtobufCMessage base;
  protobuf_c_boolean has_count;
  uint32_t count;
  /*
   * 1=在地图内，0=不在地图内
   */
  protobuf_c_boolean has_in_map;
  uint32_t in_map;
  /*
   * 1=在车道内，0=不在车道内
   */
  protobuf_c_boolean has_in_lane;
  uint32_t in_lane;
  /*
   * 当前车道
   */
  protobuf_c_boolean has_current_lane;
  uint32_t current_lane;
  /*
   * 车道标识
   */
  size_t n_lane_flags;
  ObuApollo__LaneFlag **lane_flags;
};
#define OBU_APOLLO__LANE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&obu_apollo__lane_info__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL }


struct  _ObuApollo__SingleLightInfo
{
  ProtobufCMessage base;
  /*
   *real uint8
   */
  protobuf_c_boolean has_receive_flags;
  protobuf_c_boolean receive_flags;
  /*
   *real uint8
   */
  protobuf_c_boolean has_color_status;
  ObuApollo__SingleLightInfo__Color color_status;
  protobuf_c_boolean has_light_remain_times;
  uint32_t light_remain_times;
};
#define OBU_APOLLO__SINGLE_LIGHT_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&obu_apollo__single_light_info__descriptor) \
    , 0, 0, 0, OBU_APOLLO__SINGLE_LIGHT_INFO__COLOR__UNKNOWN, 0, 0 }


struct  _ObuApollo__LaneStopPoint
{
  ProtobufCMessage base;
  protobuf_c_boolean has_latitude;
  int32_t latitude;
  protobuf_c_boolean has_longitude;
  int32_t longitude;
};
#define OBU_APOLLO__LANE_STOP_POINT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&obu_apollo__lane_stop_point__descriptor) \
    , 0, 0, 0, 0 }


struct  _ObuApollo__TrafficLightInfo
{
  ProtobufCMessage base;
  protobuf_c_boolean has_traffic_light_cycle_count;
  uint32_t traffic_light_cycle_count;
  ObuApollo__SingleLightInfo *current_lane_light;
  ObuApollo__SingleLightInfo *left_turn;
  ObuApollo__SingleLightInfo *straight;
  ObuApollo__SingleLightInfo *right_turn;
  ObuApollo__LaneStopPoint *current_lane_stop_point;
};
#define OBU_APOLLO__TRAFFIC_LIGHT_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&obu_apollo__traffic_light_info__descriptor) \
    , 0, 0, NULL, NULL, NULL, NULL, NULL }


/*
 * 单个标牌信息
 */
struct  _ObuApollo__RoadSign
{
  ProtobufCMessage base;
  /*
   * 类型:1 禁止停车 ,2 人行道,3 休息服务区,4 前方学校,5 停车场,
   */
  uint32_t type;
  /*
   *      6 限速7 危险品禁止驶入,8 禁止鸣笛,9 限重,10 公交站
   */
  /*
   * 标牌细节,暂只对限速和限重有用，为限速和限重值
   */
  protobuf_c_boolean has_detail;
  uint32_t detail;
  /*
   * 经度*1e7
   */
  protobuf_c_boolean has_lng;
  int32_t lng;
  /*
   * 纬度*1e7
   */
  protobuf_c_boolean has_lat;
  int32_t lat;
};
#define OBU_APOLLO__ROAD_SIGN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&obu_apollo__road_sign__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0 }


/*
 * 单个障碍物信息
 */
struct  _ObuApollo__Obstacle
{
  ProtobufCMessage base;
  /*
   * 障碍物 ID 
   */
  int32_t id;
  /*
   * 障碍物类型
   */
  ObuApollo__Obstacle__ObsType type;
  /*
   * 实际经度*1e7
   */
  int32_t lng;
  /*
   * 实际纬度*1e7 
   */
  int32_t lat;
  /*
   * 速度*100
   */
  protobuf_c_boolean has_speed;
  uint32_t speed;
  /*
   * 车道id
   */
  protobuf_c_boolean has_lane_id;
  uint32_t lane_id;
  /*
   * 时间戳（秒值）
   */
  protobuf_c_boolean has_sec;
  uint32_t sec;
  /*
   * 时间戳（毫秒值）
   */
  protobuf_c_boolean has_msec;
  uint32_t msec;
};
#define OBU_APOLLO__OBSTACLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&obu_apollo__obstacle__descriptor) \
    , 0, OBU_APOLLO__OBSTACLE__OBS_TYPE__OTHERS, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _ObuApollo__ObuMsg
{
  ProtobufCMessage base;
  /*
   * 每次加1
   */
  uint32_t count;
  /*
   * 本车信息
   */
  ObuApollo__CarInfo *car;
  /*
   * 本车车道信息
   */
  ObuApollo__LaneInfo *lanes;
  /*
   * 红绿灯信息
   */
  ObuApollo__TrafficLightInfo *lights;
  /*
   * 道路标牌信息
   */
  size_t n_signs;
  ObuApollo__RoadSign **signs;
  /*
   * 障碍物信息
   */
  size_t n_obs;
  ObuApollo__Obstacle **obs;
  /*
   * 周边车辆信息
   */
  size_t n_cars_nearby;
  ObuApollo__CarInfo **cars_nearby;
};
#define OBU_APOLLO__OBU_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&obu_apollo__obu_msg__descriptor) \
    , 0, NULL, NULL, NULL, 0,NULL, 0,NULL, 0,NULL }


/* ObuApollo__CarInfo methods */
void   obu_apollo__car_info__init
                     (ObuApollo__CarInfo         *message);
size_t obu_apollo__car_info__get_packed_size
                     (const ObuApollo__CarInfo   *message);
size_t obu_apollo__car_info__pack
                     (const ObuApollo__CarInfo   *message,
                      uint8_t             *out);
size_t obu_apollo__car_info__pack_to_buffer
                     (const ObuApollo__CarInfo   *message,
                      ProtobufCBuffer     *buffer);
ObuApollo__CarInfo *
       obu_apollo__car_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   obu_apollo__car_info__free_unpacked
                     (ObuApollo__CarInfo *message,
                      ProtobufCAllocator *allocator);
/* ObuApollo__LaneFlag methods */
void   obu_apollo__lane_flag__init
                     (ObuApollo__LaneFlag         *message);
size_t obu_apollo__lane_flag__get_packed_size
                     (const ObuApollo__LaneFlag   *message);
size_t obu_apollo__lane_flag__pack
                     (const ObuApollo__LaneFlag   *message,
                      uint8_t             *out);
size_t obu_apollo__lane_flag__pack_to_buffer
                     (const ObuApollo__LaneFlag   *message,
                      ProtobufCBuffer     *buffer);
ObuApollo__LaneFlag *
       obu_apollo__lane_flag__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   obu_apollo__lane_flag__free_unpacked
                     (ObuApollo__LaneFlag *message,
                      ProtobufCAllocator *allocator);
/* ObuApollo__LaneInfo methods */
void   obu_apollo__lane_info__init
                     (ObuApollo__LaneInfo         *message);
size_t obu_apollo__lane_info__get_packed_size
                     (const ObuApollo__LaneInfo   *message);
size_t obu_apollo__lane_info__pack
                     (const ObuApollo__LaneInfo   *message,
                      uint8_t             *out);
size_t obu_apollo__lane_info__pack_to_buffer
                     (const ObuApollo__LaneInfo   *message,
                      ProtobufCBuffer     *buffer);
ObuApollo__LaneInfo *
       obu_apollo__lane_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   obu_apollo__lane_info__free_unpacked
                     (ObuApollo__LaneInfo *message,
                      ProtobufCAllocator *allocator);
/* ObuApollo__SingleLightInfo methods */
void   obu_apollo__single_light_info__init
                     (ObuApollo__SingleLightInfo         *message);
size_t obu_apollo__single_light_info__get_packed_size
                     (const ObuApollo__SingleLightInfo   *message);
size_t obu_apollo__single_light_info__pack
                     (const ObuApollo__SingleLightInfo   *message,
                      uint8_t             *out);
size_t obu_apollo__single_light_info__pack_to_buffer
                     (const ObuApollo__SingleLightInfo   *message,
                      ProtobufCBuffer     *buffer);
ObuApollo__SingleLightInfo *
       obu_apollo__single_light_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   obu_apollo__single_light_info__free_unpacked
                     (ObuApollo__SingleLightInfo *message,
                      ProtobufCAllocator *allocator);
/* ObuApollo__LaneStopPoint methods */
void   obu_apollo__lane_stop_point__init
                     (ObuApollo__LaneStopPoint         *message);
size_t obu_apollo__lane_stop_point__get_packed_size
                     (const ObuApollo__LaneStopPoint   *message);
size_t obu_apollo__lane_stop_point__pack
                     (const ObuApollo__LaneStopPoint   *message,
                      uint8_t             *out);
size_t obu_apollo__lane_stop_point__pack_to_buffer
                     (const ObuApollo__LaneStopPoint   *message,
                      ProtobufCBuffer     *buffer);
ObuApollo__LaneStopPoint *
       obu_apollo__lane_stop_point__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   obu_apollo__lane_stop_point__free_unpacked
                     (ObuApollo__LaneStopPoint *message,
                      ProtobufCAllocator *allocator);
/* ObuApollo__TrafficLightInfo methods */
void   obu_apollo__traffic_light_info__init
                     (ObuApollo__TrafficLightInfo         *message);
size_t obu_apollo__traffic_light_info__get_packed_size
                     (const ObuApollo__TrafficLightInfo   *message);
size_t obu_apollo__traffic_light_info__pack
                     (const ObuApollo__TrafficLightInfo   *message,
                      uint8_t             *out);
size_t obu_apollo__traffic_light_info__pack_to_buffer
                     (const ObuApollo__TrafficLightInfo   *message,
                      ProtobufCBuffer     *buffer);
ObuApollo__TrafficLightInfo *
       obu_apollo__traffic_light_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   obu_apollo__traffic_light_info__free_unpacked
                     (ObuApollo__TrafficLightInfo *message,
                      ProtobufCAllocator *allocator);
/* ObuApollo__RoadSign methods */
void   obu_apollo__road_sign__init
                     (ObuApollo__RoadSign         *message);
size_t obu_apollo__road_sign__get_packed_size
                     (const ObuApollo__RoadSign   *message);
size_t obu_apollo__road_sign__pack
                     (const ObuApollo__RoadSign   *message,
                      uint8_t             *out);
size_t obu_apollo__road_sign__pack_to_buffer
                     (const ObuApollo__RoadSign   *message,
                      ProtobufCBuffer     *buffer);
ObuApollo__RoadSign *
       obu_apollo__road_sign__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   obu_apollo__road_sign__free_unpacked
                     (ObuApollo__RoadSign *message,
                      ProtobufCAllocator *allocator);
/* ObuApollo__Obstacle methods */
void   obu_apollo__obstacle__init
                     (ObuApollo__Obstacle         *message);
size_t obu_apollo__obstacle__get_packed_size
                     (const ObuApollo__Obstacle   *message);
size_t obu_apollo__obstacle__pack
                     (const ObuApollo__Obstacle   *message,
                      uint8_t             *out);
size_t obu_apollo__obstacle__pack_to_buffer
                     (const ObuApollo__Obstacle   *message,
                      ProtobufCBuffer     *buffer);
ObuApollo__Obstacle *
       obu_apollo__obstacle__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   obu_apollo__obstacle__free_unpacked
                     (ObuApollo__Obstacle *message,
                      ProtobufCAllocator *allocator);
/* ObuApollo__ObuMsg methods */
void   obu_apollo__obu_msg__init
                     (ObuApollo__ObuMsg         *message);
size_t obu_apollo__obu_msg__get_packed_size
                     (const ObuApollo__ObuMsg   *message);
size_t obu_apollo__obu_msg__pack
                     (const ObuApollo__ObuMsg   *message,
                      uint8_t             *out);
size_t obu_apollo__obu_msg__pack_to_buffer
                     (const ObuApollo__ObuMsg   *message,
                      ProtobufCBuffer     *buffer);
ObuApollo__ObuMsg *
       obu_apollo__obu_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   obu_apollo__obu_msg__free_unpacked
                     (ObuApollo__ObuMsg *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*ObuApollo__CarInfo_Closure)
                 (const ObuApollo__CarInfo *message,
                  void *closure_data);
typedef void (*ObuApollo__LaneFlag_Closure)
                 (const ObuApollo__LaneFlag *message,
                  void *closure_data);
typedef void (*ObuApollo__LaneInfo_Closure)
                 (const ObuApollo__LaneInfo *message,
                  void *closure_data);
typedef void (*ObuApollo__SingleLightInfo_Closure)
                 (const ObuApollo__SingleLightInfo *message,
                  void *closure_data);
typedef void (*ObuApollo__LaneStopPoint_Closure)
                 (const ObuApollo__LaneStopPoint *message,
                  void *closure_data);
typedef void (*ObuApollo__TrafficLightInfo_Closure)
                 (const ObuApollo__TrafficLightInfo *message,
                  void *closure_data);
typedef void (*ObuApollo__RoadSign_Closure)
                 (const ObuApollo__RoadSign *message,
                  void *closure_data);
typedef void (*ObuApollo__Obstacle_Closure)
                 (const ObuApollo__Obstacle *message,
                  void *closure_data);
typedef void (*ObuApollo__ObuMsg_Closure)
                 (const ObuApollo__ObuMsg *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor obu_apollo__car_info__descriptor;
extern const ProtobufCMessageDescriptor obu_apollo__lane_flag__descriptor;
extern const ProtobufCMessageDescriptor obu_apollo__lane_info__descriptor;
extern const ProtobufCMessageDescriptor obu_apollo__single_light_info__descriptor;
extern const ProtobufCEnumDescriptor    obu_apollo__single_light_info__color__descriptor;
extern const ProtobufCMessageDescriptor obu_apollo__lane_stop_point__descriptor;
extern const ProtobufCMessageDescriptor obu_apollo__traffic_light_info__descriptor;
extern const ProtobufCMessageDescriptor obu_apollo__road_sign__descriptor;
extern const ProtobufCMessageDescriptor obu_apollo__obstacle__descriptor;
extern const ProtobufCEnumDescriptor    obu_apollo__obstacle__obs_type__descriptor;
extern const ProtobufCMessageDescriptor obu_apollo__obu_msg__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_obu_5fapollo_2eproto__INCLUDED */
