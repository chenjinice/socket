// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vision.proto

#ifndef PROTOBUF_INCLUDED_vision_2eproto
#define PROTOBUF_INCLUDED_vision_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vision_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_vision_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_vision_2eproto();
namespace vision {
class AbnormalCar;
class AbnormalCarDefaultTypeInternal;
extern AbnormalCarDefaultTypeInternal _AbnormalCar_default_instance_;
class AvailableArea;
class AvailableAreaDefaultTypeInternal;
extern AvailableAreaDefaultTypeInternal _AvailableArea_default_instance_;
class AvailableAreas;
class AvailableAreasDefaultTypeInternal;
extern AvailableAreasDefaultTypeInternal _AvailableAreas_default_instance_;
class Base;
class BaseDefaultTypeInternal;
extern BaseDefaultTypeInternal _Base_default_instance_;
class Crowd;
class CrowdDefaultTypeInternal;
extern CrowdDefaultTypeInternal _Crowd_default_instance_;
class IllegalCarWarn;
class IllegalCarWarnDefaultTypeInternal;
extern IllegalCarWarnDefaultTypeInternal _IllegalCarWarn_default_instance_;
class Obstacle;
class ObstacleDefaultTypeInternal;
extern ObstacleDefaultTypeInternal _Obstacle_default_instance_;
class Obstacles;
class ObstaclesDefaultTypeInternal;
extern ObstaclesDefaultTypeInternal _Obstacles_default_instance_;
class Pedestrian;
class PedestrianDefaultTypeInternal;
extern PedestrianDefaultTypeInternal _Pedestrian_default_instance_;
class SmokeWarn;
class SmokeWarnDefaultTypeInternal;
extern SmokeWarnDefaultTypeInternal _SmokeWarn_default_instance_;
class Visibility;
class VisibilityDefaultTypeInternal;
extern VisibilityDefaultTypeInternal _Visibility_default_instance_;
}  // namespace vision
namespace google {
namespace protobuf {
template<> ::vision::AbnormalCar* Arena::CreateMaybeMessage<::vision::AbnormalCar>(Arena*);
template<> ::vision::AvailableArea* Arena::CreateMaybeMessage<::vision::AvailableArea>(Arena*);
template<> ::vision::AvailableAreas* Arena::CreateMaybeMessage<::vision::AvailableAreas>(Arena*);
template<> ::vision::Base* Arena::CreateMaybeMessage<::vision::Base>(Arena*);
template<> ::vision::Crowd* Arena::CreateMaybeMessage<::vision::Crowd>(Arena*);
template<> ::vision::IllegalCarWarn* Arena::CreateMaybeMessage<::vision::IllegalCarWarn>(Arena*);
template<> ::vision::Obstacle* Arena::CreateMaybeMessage<::vision::Obstacle>(Arena*);
template<> ::vision::Obstacles* Arena::CreateMaybeMessage<::vision::Obstacles>(Arena*);
template<> ::vision::Pedestrian* Arena::CreateMaybeMessage<::vision::Pedestrian>(Arena*);
template<> ::vision::SmokeWarn* Arena::CreateMaybeMessage<::vision::SmokeWarn>(Arena*);
template<> ::vision::Visibility* Arena::CreateMaybeMessage<::vision::Visibility>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace vision {

enum ID {
  DEFAULT = 0,
  PEDESTRIAN_D = 1,
  ILLEGAL_V1 = 2,
  CAMERA_CAL = 3,
  ROCKFALL_D = 4,
  VISIBILITY = 5,
  AVAILABLE_AREA = 6,
  ABNORMAL_CAR = 7,
  ILLEGAL_V2 = 8,
  TRAFFIC_STATUS = 9,
  BACKWARD_DRIVING = 10,
  ROAD_DANGER = 11,
  FIRE_SMOKE = 12
};
bool ID_IsValid(int value);
constexpr ID ID_MIN = DEFAULT;
constexpr ID ID_MAX = FIRE_SMOKE;
constexpr int ID_ARRAYSIZE = ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ID_descriptor();
inline const ::std::string& ID_Name(ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ID_descriptor(), value);
}
inline bool ID_Parse(
    const ::std::string& name, ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ID>(
    ID_descriptor(), name, value);
}
enum TYPE {
  OTHERS = 0,
  HUMAN = 1,
  VEHICLE = 2,
  MOTORCYCLE = 3
};
bool TYPE_IsValid(int value);
constexpr TYPE TYPE_MIN = OTHERS;
constexpr TYPE TYPE_MAX = MOTORCYCLE;
constexpr int TYPE_ARRAYSIZE = TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* TYPE_descriptor();
inline const ::std::string& TYPE_Name(TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    TYPE_descriptor(), value);
}
inline bool TYPE_Parse(
    const ::std::string& name, TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TYPE>(
    TYPE_descriptor(), name, value);
}
// ===================================================================

class Pedestrian final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vision.Pedestrian) */ {
 public:
  Pedestrian();
  virtual ~Pedestrian();

  Pedestrian(const Pedestrian& from);

  inline Pedestrian& operator=(const Pedestrian& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pedestrian(Pedestrian&& from) noexcept
    : Pedestrian() {
    *this = ::std::move(from);
  }

  inline Pedestrian& operator=(Pedestrian&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Pedestrian& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pedestrian* internal_default_instance() {
    return reinterpret_cast<const Pedestrian*>(
               &_Pedestrian_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Pedestrian* other);
  friend void swap(Pedestrian& a, Pedestrian& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pedestrian* New() const final {
    return CreateMaybeMessage<Pedestrian>(nullptr);
  }

  Pedestrian* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Pedestrian>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Pedestrian& from);
  void MergeFrom(const Pedestrian& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pedestrian* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "vision.Pedestrian";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 object_id = 1;
  bool has_object_id() const;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  ::google::protobuf::int32 object_id() const;
  void set_object_id(::google::protobuf::int32 value);

  // required .vision.TYPE object_type = 2;
  bool has_object_type() const;
  void clear_object_type();
  static const int kObjectTypeFieldNumber = 2;
  ::vision::TYPE object_type() const;
  void set_object_type(::vision::TYPE value);

  // required int32 x = 3;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 3;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // required int32 y = 4;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 4;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // required int32 camera = 5;
  bool has_camera() const;
  void clear_camera();
  static const int kCameraFieldNumber = 5;
  ::google::protobuf::int32 camera() const;
  void set_camera(::google::protobuf::int32 value);

  // optional int32 if_at_lane = 6;
  bool has_if_at_lane() const;
  void clear_if_at_lane();
  static const int kIfAtLaneFieldNumber = 6;
  ::google::protobuf::int32 if_at_lane() const;
  void set_if_at_lane(::google::protobuf::int32 value);

  // optional int32 lane_id = 7;
  bool has_lane_id() const;
  void clear_lane_id();
  static const int kLaneIdFieldNumber = 7;
  ::google::protobuf::int32 lane_id() const;
  void set_lane_id(::google::protobuf::int32 value);

  // optional int32 heading = 8;
  bool has_heading() const;
  void clear_heading();
  static const int kHeadingFieldNumber = 8;
  ::google::protobuf::int32 heading() const;
  void set_heading(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:vision.Pedestrian)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 object_id_;
  int object_type_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 camera_;
  ::google::protobuf::int32 if_at_lane_;
  ::google::protobuf::int32 lane_id_;
  ::google::protobuf::int32 heading_;
  friend struct ::TableStruct_vision_2eproto;
};
// -------------------------------------------------------------------

class Obstacle final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vision.Obstacle) */ {
 public:
  Obstacle();
  virtual ~Obstacle();

  Obstacle(const Obstacle& from);

  inline Obstacle& operator=(const Obstacle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Obstacle(Obstacle&& from) noexcept
    : Obstacle() {
    *this = ::std::move(from);
  }

  inline Obstacle& operator=(Obstacle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Obstacle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Obstacle* internal_default_instance() {
    return reinterpret_cast<const Obstacle*>(
               &_Obstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Obstacle* other);
  friend void swap(Obstacle& a, Obstacle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Obstacle* New() const final {
    return CreateMaybeMessage<Obstacle>(nullptr);
  }

  Obstacle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Obstacle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Obstacle& from);
  void MergeFrom(const Obstacle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Obstacle* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "vision.Obstacle";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 object_id = 1;
  bool has_object_id() const;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  ::google::protobuf::int32 object_id() const;
  void set_object_id(::google::protobuf::int32 value);

  // required int32 x = 2;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 2;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // required int32 y = 3;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 3;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // required int32 camera = 4;
  bool has_camera() const;
  void clear_camera();
  static const int kCameraFieldNumber = 4;
  ::google::protobuf::int32 camera() const;
  void set_camera(::google::protobuf::int32 value);

  // optional int32 if_at_lane = 5;
  bool has_if_at_lane() const;
  void clear_if_at_lane();
  static const int kIfAtLaneFieldNumber = 5;
  ::google::protobuf::int32 if_at_lane() const;
  void set_if_at_lane(::google::protobuf::int32 value);

  // optional int32 lane_id = 6;
  bool has_lane_id() const;
  void clear_lane_id();
  static const int kLaneIdFieldNumber = 6;
  ::google::protobuf::int32 lane_id() const;
  void set_lane_id(::google::protobuf::int32 value);

  // optional int32 heading = 7;
  bool has_heading() const;
  void clear_heading();
  static const int kHeadingFieldNumber = 7;
  ::google::protobuf::int32 heading() const;
  void set_heading(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:vision.Obstacle)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 object_id_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 camera_;
  ::google::protobuf::int32 if_at_lane_;
  ::google::protobuf::int32 lane_id_;
  ::google::protobuf::int32 heading_;
  friend struct ::TableStruct_vision_2eproto;
};
// -------------------------------------------------------------------

class AbnormalCar final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vision.AbnormalCar) */ {
 public:
  AbnormalCar();
  virtual ~AbnormalCar();

  AbnormalCar(const AbnormalCar& from);

  inline AbnormalCar& operator=(const AbnormalCar& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AbnormalCar(AbnormalCar&& from) noexcept
    : AbnormalCar() {
    *this = ::std::move(from);
  }

  inline AbnormalCar& operator=(AbnormalCar&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AbnormalCar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AbnormalCar* internal_default_instance() {
    return reinterpret_cast<const AbnormalCar*>(
               &_AbnormalCar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(AbnormalCar* other);
  friend void swap(AbnormalCar& a, AbnormalCar& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AbnormalCar* New() const final {
    return CreateMaybeMessage<AbnormalCar>(nullptr);
  }

  AbnormalCar* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AbnormalCar>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AbnormalCar& from);
  void MergeFrom(const AbnormalCar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AbnormalCar* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "vision.AbnormalCar";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 object_id = 1;
  bool has_object_id() const;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  ::google::protobuf::int32 object_id() const;
  void set_object_id(::google::protobuf::int32 value);

  // required int32 x = 2;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 2;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // required int32 y = 3;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 3;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // optional int32 lane_id = 4;
  bool has_lane_id() const;
  void clear_lane_id();
  static const int kLaneIdFieldNumber = 4;
  ::google::protobuf::int32 lane_id() const;
  void set_lane_id(::google::protobuf::int32 value);

  // optional int32 camera = 5;
  bool has_camera() const;
  void clear_camera();
  static const int kCameraFieldNumber = 5;
  ::google::protobuf::int32 camera() const;
  void set_camera(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:vision.AbnormalCar)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 object_id_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 lane_id_;
  ::google::protobuf::int32 camera_;
  friend struct ::TableStruct_vision_2eproto;
};
// -------------------------------------------------------------------

class AvailableArea final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vision.AvailableArea) */ {
 public:
  AvailableArea();
  virtual ~AvailableArea();

  AvailableArea(const AvailableArea& from);

  inline AvailableArea& operator=(const AvailableArea& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AvailableArea(AvailableArea&& from) noexcept
    : AvailableArea() {
    *this = ::std::move(from);
  }

  inline AvailableArea& operator=(AvailableArea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AvailableArea& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AvailableArea* internal_default_instance() {
    return reinterpret_cast<const AvailableArea*>(
               &_AvailableArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(AvailableArea* other);
  friend void swap(AvailableArea& a, AvailableArea& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AvailableArea* New() const final {
    return CreateMaybeMessage<AvailableArea>(nullptr);
  }

  AvailableArea* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AvailableArea>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AvailableArea& from);
  void MergeFrom(const AvailableArea& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AvailableArea* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "vision.AvailableArea";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 object_id = 1;
  bool has_object_id() const;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  ::google::protobuf::int32 object_id() const;
  void set_object_id(::google::protobuf::int32 value);

  // required int32 x1 = 2;
  bool has_x1() const;
  void clear_x1();
  static const int kX1FieldNumber = 2;
  ::google::protobuf::int32 x1() const;
  void set_x1(::google::protobuf::int32 value);

  // required int32 y1 = 3;
  bool has_y1() const;
  void clear_y1();
  static const int kY1FieldNumber = 3;
  ::google::protobuf::int32 y1() const;
  void set_y1(::google::protobuf::int32 value);

  // required int32 x2 = 4;
  bool has_x2() const;
  void clear_x2();
  static const int kX2FieldNumber = 4;
  ::google::protobuf::int32 x2() const;
  void set_x2(::google::protobuf::int32 value);

  // required int32 y2 = 5;
  bool has_y2() const;
  void clear_y2();
  static const int kY2FieldNumber = 5;
  ::google::protobuf::int32 y2() const;
  void set_y2(::google::protobuf::int32 value);

  // required int32 camera = 6;
  bool has_camera() const;
  void clear_camera();
  static const int kCameraFieldNumber = 6;
  ::google::protobuf::int32 camera() const;
  void set_camera(::google::protobuf::int32 value);

  // optional int32 lane_id = 7;
  bool has_lane_id() const;
  void clear_lane_id();
  static const int kLaneIdFieldNumber = 7;
  ::google::protobuf::int32 lane_id() const;
  void set_lane_id(::google::protobuf::int32 value);

  // optional int32 heading = 8;
  bool has_heading() const;
  void clear_heading();
  static const int kHeadingFieldNumber = 8;
  ::google::protobuf::int32 heading() const;
  void set_heading(::google::protobuf::int32 value);

  // required int32 x3 = 9;
  bool has_x3() const;
  void clear_x3();
  static const int kX3FieldNumber = 9;
  ::google::protobuf::int32 x3() const;
  void set_x3(::google::protobuf::int32 value);

  // required int32 y3 = 10;
  bool has_y3() const;
  void clear_y3();
  static const int kY3FieldNumber = 10;
  ::google::protobuf::int32 y3() const;
  void set_y3(::google::protobuf::int32 value);

  // required int32 x4 = 11;
  bool has_x4() const;
  void clear_x4();
  static const int kX4FieldNumber = 11;
  ::google::protobuf::int32 x4() const;
  void set_x4(::google::protobuf::int32 value);

  // required int32 y4 = 12;
  bool has_y4() const;
  void clear_y4();
  static const int kY4FieldNumber = 12;
  ::google::protobuf::int32 y4() const;
  void set_y4(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:vision.AvailableArea)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 object_id_;
  ::google::protobuf::int32 x1_;
  ::google::protobuf::int32 y1_;
  ::google::protobuf::int32 x2_;
  ::google::protobuf::int32 y2_;
  ::google::protobuf::int32 camera_;
  ::google::protobuf::int32 lane_id_;
  ::google::protobuf::int32 heading_;
  ::google::protobuf::int32 x3_;
  ::google::protobuf::int32 y3_;
  ::google::protobuf::int32 x4_;
  ::google::protobuf::int32 y4_;
  friend struct ::TableStruct_vision_2eproto;
};
// -------------------------------------------------------------------

class Base final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vision.Base) */ {
 public:
  Base();
  virtual ~Base();

  Base(const Base& from);

  inline Base& operator=(const Base& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Base(Base&& from) noexcept
    : Base() {
    *this = ::std::move(from);
  }

  inline Base& operator=(Base&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Base& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Base* internal_default_instance() {
    return reinterpret_cast<const Base*>(
               &_Base_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Base* other);
  friend void swap(Base& a, Base& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Base* New() const final {
    return CreateMaybeMessage<Base>(nullptr);
  }

  Base* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Base>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Base& from);
  void MergeFrom(const Base& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Base* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "vision.Base";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .vision.ID id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::vision::ID id() const;
  void set_id(::vision::ID value);

  // @@protoc_insertion_point(class_scope:vision.Base)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int id_;
  friend struct ::TableStruct_vision_2eproto;
};
// -------------------------------------------------------------------

class Crowd final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vision.Crowd) */ {
 public:
  Crowd();
  virtual ~Crowd();

  Crowd(const Crowd& from);

  inline Crowd& operator=(const Crowd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Crowd(Crowd&& from) noexcept
    : Crowd() {
    *this = ::std::move(from);
  }

  inline Crowd& operator=(Crowd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Crowd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Crowd* internal_default_instance() {
    return reinterpret_cast<const Crowd*>(
               &_Crowd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Crowd* other);
  friend void swap(Crowd& a, Crowd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Crowd* New() const final {
    return CreateMaybeMessage<Crowd>(nullptr);
  }

  Crowd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Crowd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Crowd& from);
  void MergeFrom(const Crowd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Crowd* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "vision.Crowd";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .vision.Pedestrian pedestrian = 2;
  int pedestrian_size() const;
  void clear_pedestrian();
  static const int kPedestrianFieldNumber = 2;
  ::vision::Pedestrian* mutable_pedestrian(int index);
  ::google::protobuf::RepeatedPtrField< ::vision::Pedestrian >*
      mutable_pedestrian();
  const ::vision::Pedestrian& pedestrian(int index) const;
  ::vision::Pedestrian* add_pedestrian();
  const ::google::protobuf::RepeatedPtrField< ::vision::Pedestrian >&
      pedestrian() const;

  // required .vision.ID id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::vision::ID id() const;
  void set_id(::vision::ID value);

  // @@protoc_insertion_point(class_scope:vision.Crowd)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::vision::Pedestrian > pedestrian_;
  int id_;
  friend struct ::TableStruct_vision_2eproto;
};
// -------------------------------------------------------------------

class Obstacles final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vision.Obstacles) */ {
 public:
  Obstacles();
  virtual ~Obstacles();

  Obstacles(const Obstacles& from);

  inline Obstacles& operator=(const Obstacles& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Obstacles(Obstacles&& from) noexcept
    : Obstacles() {
    *this = ::std::move(from);
  }

  inline Obstacles& operator=(Obstacles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Obstacles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Obstacles* internal_default_instance() {
    return reinterpret_cast<const Obstacles*>(
               &_Obstacles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Obstacles* other);
  friend void swap(Obstacles& a, Obstacles& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Obstacles* New() const final {
    return CreateMaybeMessage<Obstacles>(nullptr);
  }

  Obstacles* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Obstacles>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Obstacles& from);
  void MergeFrom(const Obstacles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Obstacles* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "vision.Obstacles";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .vision.Obstacle array = 2;
  int array_size() const;
  void clear_array();
  static const int kArrayFieldNumber = 2;
  ::vision::Obstacle* mutable_array(int index);
  ::google::protobuf::RepeatedPtrField< ::vision::Obstacle >*
      mutable_array();
  const ::vision::Obstacle& array(int index) const;
  ::vision::Obstacle* add_array();
  const ::google::protobuf::RepeatedPtrField< ::vision::Obstacle >&
      array() const;

  // required .vision.ID id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::vision::ID id() const;
  void set_id(::vision::ID value);

  // @@protoc_insertion_point(class_scope:vision.Obstacles)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::vision::Obstacle > array_;
  int id_;
  friend struct ::TableStruct_vision_2eproto;
};
// -------------------------------------------------------------------

class AvailableAreas final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vision.AvailableAreas) */ {
 public:
  AvailableAreas();
  virtual ~AvailableAreas();

  AvailableAreas(const AvailableAreas& from);

  inline AvailableAreas& operator=(const AvailableAreas& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AvailableAreas(AvailableAreas&& from) noexcept
    : AvailableAreas() {
    *this = ::std::move(from);
  }

  inline AvailableAreas& operator=(AvailableAreas&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AvailableAreas& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AvailableAreas* internal_default_instance() {
    return reinterpret_cast<const AvailableAreas*>(
               &_AvailableAreas_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(AvailableAreas* other);
  friend void swap(AvailableAreas& a, AvailableAreas& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AvailableAreas* New() const final {
    return CreateMaybeMessage<AvailableAreas>(nullptr);
  }

  AvailableAreas* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AvailableAreas>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AvailableAreas& from);
  void MergeFrom(const AvailableAreas& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AvailableAreas* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "vision.AvailableAreas";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .vision.AvailableArea area = 2;
  int area_size() const;
  void clear_area();
  static const int kAreaFieldNumber = 2;
  ::vision::AvailableArea* mutable_area(int index);
  ::google::protobuf::RepeatedPtrField< ::vision::AvailableArea >*
      mutable_area();
  const ::vision::AvailableArea& area(int index) const;
  ::vision::AvailableArea* add_area();
  const ::google::protobuf::RepeatedPtrField< ::vision::AvailableArea >&
      area() const;

  // required .vision.ID id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::vision::ID id() const;
  void set_id(::vision::ID value);

  // @@protoc_insertion_point(class_scope:vision.AvailableAreas)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::vision::AvailableArea > area_;
  int id_;
  friend struct ::TableStruct_vision_2eproto;
};
// -------------------------------------------------------------------

class IllegalCarWarn final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vision.IllegalCarWarn) */ {
 public:
  IllegalCarWarn();
  virtual ~IllegalCarWarn();

  IllegalCarWarn(const IllegalCarWarn& from);

  inline IllegalCarWarn& operator=(const IllegalCarWarn& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IllegalCarWarn(IllegalCarWarn&& from) noexcept
    : IllegalCarWarn() {
    *this = ::std::move(from);
  }

  inline IllegalCarWarn& operator=(IllegalCarWarn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const IllegalCarWarn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IllegalCarWarn* internal_default_instance() {
    return reinterpret_cast<const IllegalCarWarn*>(
               &_IllegalCarWarn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(IllegalCarWarn* other);
  friend void swap(IllegalCarWarn& a, IllegalCarWarn& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IllegalCarWarn* New() const final {
    return CreateMaybeMessage<IllegalCarWarn>(nullptr);
  }

  IllegalCarWarn* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IllegalCarWarn>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IllegalCarWarn& from);
  void MergeFrom(const IllegalCarWarn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IllegalCarWarn* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "vision.IllegalCarWarn";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .vision.AbnormalCar array = 2;
  int array_size() const;
  void clear_array();
  static const int kArrayFieldNumber = 2;
  ::vision::AbnormalCar* mutable_array(int index);
  ::google::protobuf::RepeatedPtrField< ::vision::AbnormalCar >*
      mutable_array();
  const ::vision::AbnormalCar& array(int index) const;
  ::vision::AbnormalCar* add_array();
  const ::google::protobuf::RepeatedPtrField< ::vision::AbnormalCar >&
      array() const;

  // required .vision.ID id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::vision::ID id() const;
  void set_id(::vision::ID value);

  // @@protoc_insertion_point(class_scope:vision.IllegalCarWarn)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::vision::AbnormalCar > array_;
  int id_;
  friend struct ::TableStruct_vision_2eproto;
};
// -------------------------------------------------------------------

class Visibility final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vision.Visibility) */ {
 public:
  Visibility();
  virtual ~Visibility();

  Visibility(const Visibility& from);

  inline Visibility& operator=(const Visibility& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Visibility(Visibility&& from) noexcept
    : Visibility() {
    *this = ::std::move(from);
  }

  inline Visibility& operator=(Visibility&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Visibility& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Visibility* internal_default_instance() {
    return reinterpret_cast<const Visibility*>(
               &_Visibility_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Visibility* other);
  friend void swap(Visibility& a, Visibility& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Visibility* New() const final {
    return CreateMaybeMessage<Visibility>(nullptr);
  }

  Visibility* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Visibility>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Visibility& from);
  void MergeFrom(const Visibility& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Visibility* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "vision.Visibility";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double distance = 2;
  bool has_distance() const;
  void clear_distance();
  static const int kDistanceFieldNumber = 2;
  double distance() const;
  void set_distance(double value);

  // required .vision.ID id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::vision::ID id() const;
  void set_id(::vision::ID value);

  // required int32 level = 3;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 3;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:vision.Visibility)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double distance_;
  int id_;
  ::google::protobuf::int32 level_;
  friend struct ::TableStruct_vision_2eproto;
};
// -------------------------------------------------------------------

class SmokeWarn final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vision.SmokeWarn) */ {
 public:
  SmokeWarn();
  virtual ~SmokeWarn();

  SmokeWarn(const SmokeWarn& from);

  inline SmokeWarn& operator=(const SmokeWarn& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SmokeWarn(SmokeWarn&& from) noexcept
    : SmokeWarn() {
    *this = ::std::move(from);
  }

  inline SmokeWarn& operator=(SmokeWarn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SmokeWarn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SmokeWarn* internal_default_instance() {
    return reinterpret_cast<const SmokeWarn*>(
               &_SmokeWarn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(SmokeWarn* other);
  friend void swap(SmokeWarn& a, SmokeWarn& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SmokeWarn* New() const final {
    return CreateMaybeMessage<SmokeWarn>(nullptr);
  }

  SmokeWarn* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SmokeWarn>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SmokeWarn& from);
  void MergeFrom(const SmokeWarn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SmokeWarn* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "vision.SmokeWarn";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .vision.ID id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::vision::ID id() const;
  void set_id(::vision::ID value);

  // required bool warn = 2;
  bool has_warn() const;
  void clear_warn();
  static const int kWarnFieldNumber = 2;
  bool warn() const;
  void set_warn(bool value);

  // @@protoc_insertion_point(class_scope:vision.SmokeWarn)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int id_;
  bool warn_;
  friend struct ::TableStruct_vision_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Pedestrian

// required int32 object_id = 1;
inline bool Pedestrian::has_object_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pedestrian::clear_object_id() {
  object_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::int32 Pedestrian::object_id() const {
  // @@protoc_insertion_point(field_get:vision.Pedestrian.object_id)
  return object_id_;
}
inline void Pedestrian::set_object_id(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  object_id_ = value;
  // @@protoc_insertion_point(field_set:vision.Pedestrian.object_id)
}

// required .vision.TYPE object_type = 2;
inline bool Pedestrian::has_object_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pedestrian::clear_object_type() {
  object_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::vision::TYPE Pedestrian::object_type() const {
  // @@protoc_insertion_point(field_get:vision.Pedestrian.object_type)
  return static_cast< ::vision::TYPE >(object_type_);
}
inline void Pedestrian::set_object_type(::vision::TYPE value) {
  assert(::vision::TYPE_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  object_type_ = value;
  // @@protoc_insertion_point(field_set:vision.Pedestrian.object_type)
}

// required int32 x = 3;
inline bool Pedestrian::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pedestrian::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int32 Pedestrian::x() const {
  // @@protoc_insertion_point(field_get:vision.Pedestrian.x)
  return x_;
}
inline void Pedestrian::set_x(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  x_ = value;
  // @@protoc_insertion_point(field_set:vision.Pedestrian.x)
}

// required int32 y = 4;
inline bool Pedestrian::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Pedestrian::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::int32 Pedestrian::y() const {
  // @@protoc_insertion_point(field_get:vision.Pedestrian.y)
  return y_;
}
inline void Pedestrian::set_y(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  y_ = value;
  // @@protoc_insertion_point(field_set:vision.Pedestrian.y)
}

// required int32 camera = 5;
inline bool Pedestrian::has_camera() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Pedestrian::clear_camera() {
  camera_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::int32 Pedestrian::camera() const {
  // @@protoc_insertion_point(field_get:vision.Pedestrian.camera)
  return camera_;
}
inline void Pedestrian::set_camera(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  camera_ = value;
  // @@protoc_insertion_point(field_set:vision.Pedestrian.camera)
}

// optional int32 if_at_lane = 6;
inline bool Pedestrian::has_if_at_lane() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Pedestrian::clear_if_at_lane() {
  if_at_lane_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::int32 Pedestrian::if_at_lane() const {
  // @@protoc_insertion_point(field_get:vision.Pedestrian.if_at_lane)
  return if_at_lane_;
}
inline void Pedestrian::set_if_at_lane(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  if_at_lane_ = value;
  // @@protoc_insertion_point(field_set:vision.Pedestrian.if_at_lane)
}

// optional int32 lane_id = 7;
inline bool Pedestrian::has_lane_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Pedestrian::clear_lane_id() {
  lane_id_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::int32 Pedestrian::lane_id() const {
  // @@protoc_insertion_point(field_get:vision.Pedestrian.lane_id)
  return lane_id_;
}
inline void Pedestrian::set_lane_id(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  lane_id_ = value;
  // @@protoc_insertion_point(field_set:vision.Pedestrian.lane_id)
}

// optional int32 heading = 8;
inline bool Pedestrian::has_heading() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Pedestrian::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::int32 Pedestrian::heading() const {
  // @@protoc_insertion_point(field_get:vision.Pedestrian.heading)
  return heading_;
}
inline void Pedestrian::set_heading(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  heading_ = value;
  // @@protoc_insertion_point(field_set:vision.Pedestrian.heading)
}

// -------------------------------------------------------------------

// Obstacle

// required int32 object_id = 1;
inline bool Obstacle::has_object_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Obstacle::clear_object_id() {
  object_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::int32 Obstacle::object_id() const {
  // @@protoc_insertion_point(field_get:vision.Obstacle.object_id)
  return object_id_;
}
inline void Obstacle::set_object_id(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  object_id_ = value;
  // @@protoc_insertion_point(field_set:vision.Obstacle.object_id)
}

// required int32 x = 2;
inline bool Obstacle::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Obstacle::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::int32 Obstacle::x() const {
  // @@protoc_insertion_point(field_get:vision.Obstacle.x)
  return x_;
}
inline void Obstacle::set_x(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
  // @@protoc_insertion_point(field_set:vision.Obstacle.x)
}

// required int32 y = 3;
inline bool Obstacle::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Obstacle::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int32 Obstacle::y() const {
  // @@protoc_insertion_point(field_get:vision.Obstacle.y)
  return y_;
}
inline void Obstacle::set_y(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  y_ = value;
  // @@protoc_insertion_point(field_set:vision.Obstacle.y)
}

// required int32 camera = 4;
inline bool Obstacle::has_camera() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Obstacle::clear_camera() {
  camera_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::int32 Obstacle::camera() const {
  // @@protoc_insertion_point(field_get:vision.Obstacle.camera)
  return camera_;
}
inline void Obstacle::set_camera(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  camera_ = value;
  // @@protoc_insertion_point(field_set:vision.Obstacle.camera)
}

// optional int32 if_at_lane = 5;
inline bool Obstacle::has_if_at_lane() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Obstacle::clear_if_at_lane() {
  if_at_lane_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::int32 Obstacle::if_at_lane() const {
  // @@protoc_insertion_point(field_get:vision.Obstacle.if_at_lane)
  return if_at_lane_;
}
inline void Obstacle::set_if_at_lane(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  if_at_lane_ = value;
  // @@protoc_insertion_point(field_set:vision.Obstacle.if_at_lane)
}

// optional int32 lane_id = 6;
inline bool Obstacle::has_lane_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Obstacle::clear_lane_id() {
  lane_id_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::int32 Obstacle::lane_id() const {
  // @@protoc_insertion_point(field_get:vision.Obstacle.lane_id)
  return lane_id_;
}
inline void Obstacle::set_lane_id(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  lane_id_ = value;
  // @@protoc_insertion_point(field_set:vision.Obstacle.lane_id)
}

// optional int32 heading = 7;
inline bool Obstacle::has_heading() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Obstacle::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::int32 Obstacle::heading() const {
  // @@protoc_insertion_point(field_get:vision.Obstacle.heading)
  return heading_;
}
inline void Obstacle::set_heading(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  heading_ = value;
  // @@protoc_insertion_point(field_set:vision.Obstacle.heading)
}

// -------------------------------------------------------------------

// AbnormalCar

// required int32 object_id = 1;
inline bool AbnormalCar::has_object_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AbnormalCar::clear_object_id() {
  object_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::int32 AbnormalCar::object_id() const {
  // @@protoc_insertion_point(field_get:vision.AbnormalCar.object_id)
  return object_id_;
}
inline void AbnormalCar::set_object_id(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  object_id_ = value;
  // @@protoc_insertion_point(field_set:vision.AbnormalCar.object_id)
}

// required int32 x = 2;
inline bool AbnormalCar::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AbnormalCar::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::int32 AbnormalCar::x() const {
  // @@protoc_insertion_point(field_get:vision.AbnormalCar.x)
  return x_;
}
inline void AbnormalCar::set_x(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
  // @@protoc_insertion_point(field_set:vision.AbnormalCar.x)
}

// required int32 y = 3;
inline bool AbnormalCar::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AbnormalCar::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int32 AbnormalCar::y() const {
  // @@protoc_insertion_point(field_get:vision.AbnormalCar.y)
  return y_;
}
inline void AbnormalCar::set_y(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  y_ = value;
  // @@protoc_insertion_point(field_set:vision.AbnormalCar.y)
}

// optional int32 lane_id = 4;
inline bool AbnormalCar::has_lane_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AbnormalCar::clear_lane_id() {
  lane_id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::int32 AbnormalCar::lane_id() const {
  // @@protoc_insertion_point(field_get:vision.AbnormalCar.lane_id)
  return lane_id_;
}
inline void AbnormalCar::set_lane_id(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  lane_id_ = value;
  // @@protoc_insertion_point(field_set:vision.AbnormalCar.lane_id)
}

// optional int32 camera = 5;
inline bool AbnormalCar::has_camera() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AbnormalCar::clear_camera() {
  camera_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::int32 AbnormalCar::camera() const {
  // @@protoc_insertion_point(field_get:vision.AbnormalCar.camera)
  return camera_;
}
inline void AbnormalCar::set_camera(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  camera_ = value;
  // @@protoc_insertion_point(field_set:vision.AbnormalCar.camera)
}

// -------------------------------------------------------------------

// AvailableArea

// required int32 object_id = 1;
inline bool AvailableArea::has_object_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AvailableArea::clear_object_id() {
  object_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::int32 AvailableArea::object_id() const {
  // @@protoc_insertion_point(field_get:vision.AvailableArea.object_id)
  return object_id_;
}
inline void AvailableArea::set_object_id(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  object_id_ = value;
  // @@protoc_insertion_point(field_set:vision.AvailableArea.object_id)
}

// required int32 x1 = 2;
inline bool AvailableArea::has_x1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AvailableArea::clear_x1() {
  x1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::int32 AvailableArea::x1() const {
  // @@protoc_insertion_point(field_get:vision.AvailableArea.x1)
  return x1_;
}
inline void AvailableArea::set_x1(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  x1_ = value;
  // @@protoc_insertion_point(field_set:vision.AvailableArea.x1)
}

// required int32 y1 = 3;
inline bool AvailableArea::has_y1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AvailableArea::clear_y1() {
  y1_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int32 AvailableArea::y1() const {
  // @@protoc_insertion_point(field_get:vision.AvailableArea.y1)
  return y1_;
}
inline void AvailableArea::set_y1(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  y1_ = value;
  // @@protoc_insertion_point(field_set:vision.AvailableArea.y1)
}

// required int32 x2 = 4;
inline bool AvailableArea::has_x2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AvailableArea::clear_x2() {
  x2_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::int32 AvailableArea::x2() const {
  // @@protoc_insertion_point(field_get:vision.AvailableArea.x2)
  return x2_;
}
inline void AvailableArea::set_x2(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  x2_ = value;
  // @@protoc_insertion_point(field_set:vision.AvailableArea.x2)
}

// required int32 y2 = 5;
inline bool AvailableArea::has_y2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AvailableArea::clear_y2() {
  y2_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::int32 AvailableArea::y2() const {
  // @@protoc_insertion_point(field_get:vision.AvailableArea.y2)
  return y2_;
}
inline void AvailableArea::set_y2(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  y2_ = value;
  // @@protoc_insertion_point(field_set:vision.AvailableArea.y2)
}

// required int32 camera = 6;
inline bool AvailableArea::has_camera() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AvailableArea::clear_camera() {
  camera_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::int32 AvailableArea::camera() const {
  // @@protoc_insertion_point(field_get:vision.AvailableArea.camera)
  return camera_;
}
inline void AvailableArea::set_camera(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  camera_ = value;
  // @@protoc_insertion_point(field_set:vision.AvailableArea.camera)
}

// optional int32 lane_id = 7;
inline bool AvailableArea::has_lane_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AvailableArea::clear_lane_id() {
  lane_id_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::int32 AvailableArea::lane_id() const {
  // @@protoc_insertion_point(field_get:vision.AvailableArea.lane_id)
  return lane_id_;
}
inline void AvailableArea::set_lane_id(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  lane_id_ = value;
  // @@protoc_insertion_point(field_set:vision.AvailableArea.lane_id)
}

// optional int32 heading = 8;
inline bool AvailableArea::has_heading() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AvailableArea::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::int32 AvailableArea::heading() const {
  // @@protoc_insertion_point(field_get:vision.AvailableArea.heading)
  return heading_;
}
inline void AvailableArea::set_heading(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  heading_ = value;
  // @@protoc_insertion_point(field_set:vision.AvailableArea.heading)
}

// required int32 x3 = 9;
inline bool AvailableArea::has_x3() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AvailableArea::clear_x3() {
  x3_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::int32 AvailableArea::x3() const {
  // @@protoc_insertion_point(field_get:vision.AvailableArea.x3)
  return x3_;
}
inline void AvailableArea::set_x3(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  x3_ = value;
  // @@protoc_insertion_point(field_set:vision.AvailableArea.x3)
}

// required int32 y3 = 10;
inline bool AvailableArea::has_y3() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AvailableArea::clear_y3() {
  y3_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::int32 AvailableArea::y3() const {
  // @@protoc_insertion_point(field_get:vision.AvailableArea.y3)
  return y3_;
}
inline void AvailableArea::set_y3(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  y3_ = value;
  // @@protoc_insertion_point(field_set:vision.AvailableArea.y3)
}

// required int32 x4 = 11;
inline bool AvailableArea::has_x4() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AvailableArea::clear_x4() {
  x4_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::google::protobuf::int32 AvailableArea::x4() const {
  // @@protoc_insertion_point(field_get:vision.AvailableArea.x4)
  return x4_;
}
inline void AvailableArea::set_x4(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  x4_ = value;
  // @@protoc_insertion_point(field_set:vision.AvailableArea.x4)
}

// required int32 y4 = 12;
inline bool AvailableArea::has_y4() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AvailableArea::clear_y4() {
  y4_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::google::protobuf::int32 AvailableArea::y4() const {
  // @@protoc_insertion_point(field_get:vision.AvailableArea.y4)
  return y4_;
}
inline void AvailableArea::set_y4(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  y4_ = value;
  // @@protoc_insertion_point(field_set:vision.AvailableArea.y4)
}

// -------------------------------------------------------------------

// Base

// required .vision.ID id = 1;
inline bool Base::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Base::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::vision::ID Base::id() const {
  // @@protoc_insertion_point(field_get:vision.Base.id)
  return static_cast< ::vision::ID >(id_);
}
inline void Base::set_id(::vision::ID value) {
  assert(::vision::ID_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:vision.Base.id)
}

// -------------------------------------------------------------------

// Crowd

// required .vision.ID id = 1;
inline bool Crowd::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Crowd::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::vision::ID Crowd::id() const {
  // @@protoc_insertion_point(field_get:vision.Crowd.id)
  return static_cast< ::vision::ID >(id_);
}
inline void Crowd::set_id(::vision::ID value) {
  assert(::vision::ID_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:vision.Crowd.id)
}

// repeated .vision.Pedestrian pedestrian = 2;
inline int Crowd::pedestrian_size() const {
  return pedestrian_.size();
}
inline void Crowd::clear_pedestrian() {
  pedestrian_.Clear();
}
inline ::vision::Pedestrian* Crowd::mutable_pedestrian(int index) {
  // @@protoc_insertion_point(field_mutable:vision.Crowd.pedestrian)
  return pedestrian_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::vision::Pedestrian >*
Crowd::mutable_pedestrian() {
  // @@protoc_insertion_point(field_mutable_list:vision.Crowd.pedestrian)
  return &pedestrian_;
}
inline const ::vision::Pedestrian& Crowd::pedestrian(int index) const {
  // @@protoc_insertion_point(field_get:vision.Crowd.pedestrian)
  return pedestrian_.Get(index);
}
inline ::vision::Pedestrian* Crowd::add_pedestrian() {
  // @@protoc_insertion_point(field_add:vision.Crowd.pedestrian)
  return pedestrian_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vision::Pedestrian >&
Crowd::pedestrian() const {
  // @@protoc_insertion_point(field_list:vision.Crowd.pedestrian)
  return pedestrian_;
}

// -------------------------------------------------------------------

// Obstacles

// required .vision.ID id = 1;
inline bool Obstacles::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Obstacles::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::vision::ID Obstacles::id() const {
  // @@protoc_insertion_point(field_get:vision.Obstacles.id)
  return static_cast< ::vision::ID >(id_);
}
inline void Obstacles::set_id(::vision::ID value) {
  assert(::vision::ID_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:vision.Obstacles.id)
}

// repeated .vision.Obstacle array = 2;
inline int Obstacles::array_size() const {
  return array_.size();
}
inline void Obstacles::clear_array() {
  array_.Clear();
}
inline ::vision::Obstacle* Obstacles::mutable_array(int index) {
  // @@protoc_insertion_point(field_mutable:vision.Obstacles.array)
  return array_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::vision::Obstacle >*
Obstacles::mutable_array() {
  // @@protoc_insertion_point(field_mutable_list:vision.Obstacles.array)
  return &array_;
}
inline const ::vision::Obstacle& Obstacles::array(int index) const {
  // @@protoc_insertion_point(field_get:vision.Obstacles.array)
  return array_.Get(index);
}
inline ::vision::Obstacle* Obstacles::add_array() {
  // @@protoc_insertion_point(field_add:vision.Obstacles.array)
  return array_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vision::Obstacle >&
Obstacles::array() const {
  // @@protoc_insertion_point(field_list:vision.Obstacles.array)
  return array_;
}

// -------------------------------------------------------------------

// AvailableAreas

// required .vision.ID id = 1;
inline bool AvailableAreas::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AvailableAreas::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::vision::ID AvailableAreas::id() const {
  // @@protoc_insertion_point(field_get:vision.AvailableAreas.id)
  return static_cast< ::vision::ID >(id_);
}
inline void AvailableAreas::set_id(::vision::ID value) {
  assert(::vision::ID_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:vision.AvailableAreas.id)
}

// repeated .vision.AvailableArea area = 2;
inline int AvailableAreas::area_size() const {
  return area_.size();
}
inline void AvailableAreas::clear_area() {
  area_.Clear();
}
inline ::vision::AvailableArea* AvailableAreas::mutable_area(int index) {
  // @@protoc_insertion_point(field_mutable:vision.AvailableAreas.area)
  return area_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::vision::AvailableArea >*
AvailableAreas::mutable_area() {
  // @@protoc_insertion_point(field_mutable_list:vision.AvailableAreas.area)
  return &area_;
}
inline const ::vision::AvailableArea& AvailableAreas::area(int index) const {
  // @@protoc_insertion_point(field_get:vision.AvailableAreas.area)
  return area_.Get(index);
}
inline ::vision::AvailableArea* AvailableAreas::add_area() {
  // @@protoc_insertion_point(field_add:vision.AvailableAreas.area)
  return area_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vision::AvailableArea >&
AvailableAreas::area() const {
  // @@protoc_insertion_point(field_list:vision.AvailableAreas.area)
  return area_;
}

// -------------------------------------------------------------------

// IllegalCarWarn

// required .vision.ID id = 1;
inline bool IllegalCarWarn::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IllegalCarWarn::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::vision::ID IllegalCarWarn::id() const {
  // @@protoc_insertion_point(field_get:vision.IllegalCarWarn.id)
  return static_cast< ::vision::ID >(id_);
}
inline void IllegalCarWarn::set_id(::vision::ID value) {
  assert(::vision::ID_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:vision.IllegalCarWarn.id)
}

// repeated .vision.AbnormalCar array = 2;
inline int IllegalCarWarn::array_size() const {
  return array_.size();
}
inline void IllegalCarWarn::clear_array() {
  array_.Clear();
}
inline ::vision::AbnormalCar* IllegalCarWarn::mutable_array(int index) {
  // @@protoc_insertion_point(field_mutable:vision.IllegalCarWarn.array)
  return array_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::vision::AbnormalCar >*
IllegalCarWarn::mutable_array() {
  // @@protoc_insertion_point(field_mutable_list:vision.IllegalCarWarn.array)
  return &array_;
}
inline const ::vision::AbnormalCar& IllegalCarWarn::array(int index) const {
  // @@protoc_insertion_point(field_get:vision.IllegalCarWarn.array)
  return array_.Get(index);
}
inline ::vision::AbnormalCar* IllegalCarWarn::add_array() {
  // @@protoc_insertion_point(field_add:vision.IllegalCarWarn.array)
  return array_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vision::AbnormalCar >&
IllegalCarWarn::array() const {
  // @@protoc_insertion_point(field_list:vision.IllegalCarWarn.array)
  return array_;
}

// -------------------------------------------------------------------

// Visibility

// required .vision.ID id = 1;
inline bool Visibility::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Visibility::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::vision::ID Visibility::id() const {
  // @@protoc_insertion_point(field_get:vision.Visibility.id)
  return static_cast< ::vision::ID >(id_);
}
inline void Visibility::set_id(::vision::ID value) {
  assert(::vision::ID_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
  // @@protoc_insertion_point(field_set:vision.Visibility.id)
}

// required double distance = 2;
inline bool Visibility::has_distance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Visibility::clear_distance() {
  distance_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Visibility::distance() const {
  // @@protoc_insertion_point(field_get:vision.Visibility.distance)
  return distance_;
}
inline void Visibility::set_distance(double value) {
  _has_bits_[0] |= 0x00000001u;
  distance_ = value;
  // @@protoc_insertion_point(field_set:vision.Visibility.distance)
}

// required int32 level = 3;
inline bool Visibility::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Visibility::clear_level() {
  level_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int32 Visibility::level() const {
  // @@protoc_insertion_point(field_get:vision.Visibility.level)
  return level_;
}
inline void Visibility::set_level(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  level_ = value;
  // @@protoc_insertion_point(field_set:vision.Visibility.level)
}

// -------------------------------------------------------------------

// SmokeWarn

// required .vision.ID id = 1;
inline bool SmokeWarn::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SmokeWarn::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::vision::ID SmokeWarn::id() const {
  // @@protoc_insertion_point(field_get:vision.SmokeWarn.id)
  return static_cast< ::vision::ID >(id_);
}
inline void SmokeWarn::set_id(::vision::ID value) {
  assert(::vision::ID_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:vision.SmokeWarn.id)
}

// required bool warn = 2;
inline bool SmokeWarn::has_warn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SmokeWarn::clear_warn() {
  warn_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool SmokeWarn::warn() const {
  // @@protoc_insertion_point(field_get:vision.SmokeWarn.warn)
  return warn_;
}
inline void SmokeWarn::set_warn(bool value) {
  _has_bits_[0] |= 0x00000002u;
  warn_ = value;
  // @@protoc_insertion_point(field_set:vision.SmokeWarn.warn)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace vision

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::vision::ID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vision::ID>() {
  return ::vision::ID_descriptor();
}
template <> struct is_proto_enum< ::vision::TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vision::TYPE>() {
  return ::vision::TYPE_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_vision_2eproto
