// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vision.proto

#ifndef PROTOBUF_INCLUDED_vision_2eproto
#define PROTOBUF_INCLUDED_vision_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vision_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_vision_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[23]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_vision_2eproto();
namespace vision {
class AbnormalCar;
class AbnormalCarDefaultTypeInternal;
extern AbnormalCarDefaultTypeInternal _AbnormalCar_default_instance_;
class AvailableArea;
class AvailableAreaDefaultTypeInternal;
extern AvailableAreaDefaultTypeInternal _AvailableArea_default_instance_;
class AvailableAreas;
class AvailableAreasDefaultTypeInternal;
extern AvailableAreasDefaultTypeInternal _AvailableAreas_default_instance_;
class Base;
class BaseDefaultTypeInternal;
extern BaseDefaultTypeInternal _Base_default_instance_;
class Crowd;
class CrowdDefaultTypeInternal;
extern CrowdDefaultTypeInternal _Crowd_default_instance_;
class Detectobject;
class DetectobjectDefaultTypeInternal;
extern DetectobjectDefaultTypeInternal _Detectobject_default_instance_;
class Detectobjects;
class DetectobjectsDefaultTypeInternal;
extern DetectobjectsDefaultTypeInternal _Detectobjects_default_instance_;
class FlowInfo;
class FlowInfoDefaultTypeInternal;
extern FlowInfoDefaultTypeInternal _FlowInfo_default_instance_;
class IceWarn;
class IceWarnDefaultTypeInternal;
extern IceWarnDefaultTypeInternal _IceWarn_default_instance_;
class IllegalCarWarn;
class IllegalCarWarnDefaultTypeInternal;
extern IllegalCarWarnDefaultTypeInternal _IllegalCarWarn_default_instance_;
class JamInfo;
class JamInfoDefaultTypeInternal;
extern JamInfoDefaultTypeInternal _JamInfo_default_instance_;
class LaneWare;
class LaneWareDefaultTypeInternal;
extern LaneWareDefaultTypeInternal _LaneWare_default_instance_;
class Obstacle;
class ObstacleDefaultTypeInternal;
extern ObstacleDefaultTypeInternal _Obstacle_default_instance_;
class Obstacles;
class ObstaclesDefaultTypeInternal;
extern ObstaclesDefaultTypeInternal _Obstacles_default_instance_;
class Pedestrian;
class PedestrianDefaultTypeInternal;
extern PedestrianDefaultTypeInternal _Pedestrian_default_instance_;
class SmokeWarn;
class SmokeWarnDefaultTypeInternal;
extern SmokeWarnDefaultTypeInternal _SmokeWarn_default_instance_;
class SpecialCar;
class SpecialCarDefaultTypeInternal;
extern SpecialCarDefaultTypeInternal _SpecialCar_default_instance_;
class SpecialCarMsg;
class SpecialCarMsgDefaultTypeInternal;
extern SpecialCarMsgDefaultTypeInternal _SpecialCarMsg_default_instance_;
class Timestamp;
class TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
class TrafficFlow;
class TrafficFlowDefaultTypeInternal;
extern TrafficFlowDefaultTypeInternal _TrafficFlow_default_instance_;
class TrafficJam;
class TrafficJamDefaultTypeInternal;
extern TrafficJamDefaultTypeInternal _TrafficJam_default_instance_;
class Visibility;
class VisibilityDefaultTypeInternal;
extern VisibilityDefaultTypeInternal _Visibility_default_instance_;
class data_time;
class data_timeDefaultTypeInternal;
extern data_timeDefaultTypeInternal _data_time_default_instance_;
}  // namespace vision
namespace google {
namespace protobuf {
template<> ::vision::AbnormalCar* Arena::CreateMaybeMessage<::vision::AbnormalCar>(Arena*);
template<> ::vision::AvailableArea* Arena::CreateMaybeMessage<::vision::AvailableArea>(Arena*);
template<> ::vision::AvailableAreas* Arena::CreateMaybeMessage<::vision::AvailableAreas>(Arena*);
template<> ::vision::Base* Arena::CreateMaybeMessage<::vision::Base>(Arena*);
template<> ::vision::Crowd* Arena::CreateMaybeMessage<::vision::Crowd>(Arena*);
template<> ::vision::Detectobject* Arena::CreateMaybeMessage<::vision::Detectobject>(Arena*);
template<> ::vision::Detectobjects* Arena::CreateMaybeMessage<::vision::Detectobjects>(Arena*);
template<> ::vision::FlowInfo* Arena::CreateMaybeMessage<::vision::FlowInfo>(Arena*);
template<> ::vision::IceWarn* Arena::CreateMaybeMessage<::vision::IceWarn>(Arena*);
template<> ::vision::IllegalCarWarn* Arena::CreateMaybeMessage<::vision::IllegalCarWarn>(Arena*);
template<> ::vision::JamInfo* Arena::CreateMaybeMessage<::vision::JamInfo>(Arena*);
template<> ::vision::LaneWare* Arena::CreateMaybeMessage<::vision::LaneWare>(Arena*);
template<> ::vision::Obstacle* Arena::CreateMaybeMessage<::vision::Obstacle>(Arena*);
template<> ::vision::Obstacles* Arena::CreateMaybeMessage<::vision::Obstacles>(Arena*);
template<> ::vision::Pedestrian* Arena::CreateMaybeMessage<::vision::Pedestrian>(Arena*);
template<> ::vision::SmokeWarn* Arena::CreateMaybeMessage<::vision::SmokeWarn>(Arena*);
template<> ::vision::SpecialCar* Arena::CreateMaybeMessage<::vision::SpecialCar>(Arena*);
template<> ::vision::SpecialCarMsg* Arena::CreateMaybeMessage<::vision::SpecialCarMsg>(Arena*);
template<> ::vision::Timestamp* Arena::CreateMaybeMessage<::vision::Timestamp>(Arena*);
template<> ::vision::TrafficFlow* Arena::CreateMaybeMessage<::vision::TrafficFlow>(Arena*);
template<> ::vision::TrafficJam* Arena::CreateMaybeMessage<::vision::TrafficJam>(Arena*);
template<> ::vision::Visibility* Arena::CreateMaybeMessage<::vision::Visibility>(Arena*);
template<> ::vision::data_time* Arena::CreateMaybeMessage<::vision::data_time>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace vision {

enum SpecialCar_SPECIALTYPE {
  SpecialCar_SPECIALTYPE_NORMAL = 0,
  SpecialCar_SPECIALTYPE_AMBULANCE = 1,
  SpecialCar_SPECIALTYPE_DANGERCAR = 2,
  SpecialCar_SPECIALTYPE_FIREENGINE = 3,
  SpecialCar_SPECIALTYPE_POLICECAR = 4
};
bool SpecialCar_SPECIALTYPE_IsValid(int value);
constexpr SpecialCar_SPECIALTYPE SpecialCar_SPECIALTYPE_SPECIALTYPE_MIN = SpecialCar_SPECIALTYPE_NORMAL;
constexpr SpecialCar_SPECIALTYPE SpecialCar_SPECIALTYPE_SPECIALTYPE_MAX = SpecialCar_SPECIALTYPE_POLICECAR;
constexpr int SpecialCar_SPECIALTYPE_SPECIALTYPE_ARRAYSIZE = SpecialCar_SPECIALTYPE_SPECIALTYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* SpecialCar_SPECIALTYPE_descriptor();
inline const ::std::string& SpecialCar_SPECIALTYPE_Name(SpecialCar_SPECIALTYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    SpecialCar_SPECIALTYPE_descriptor(), value);
}
inline bool SpecialCar_SPECIALTYPE_Parse(
    const ::std::string& name, SpecialCar_SPECIALTYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SpecialCar_SPECIALTYPE>(
    SpecialCar_SPECIALTYPE_descriptor(), name, value);
}
enum FlowInfo_TrafficSig {
  FlowInfo_TrafficSig_UNKNOWN = 0,
  FlowInfo_TrafficSig_Y2G = 1,
  FlowInfo_TrafficSig_OVER = 2
};
bool FlowInfo_TrafficSig_IsValid(int value);
constexpr FlowInfo_TrafficSig FlowInfo_TrafficSig_TrafficSig_MIN = FlowInfo_TrafficSig_UNKNOWN;
constexpr FlowInfo_TrafficSig FlowInfo_TrafficSig_TrafficSig_MAX = FlowInfo_TrafficSig_OVER;
constexpr int FlowInfo_TrafficSig_TrafficSig_ARRAYSIZE = FlowInfo_TrafficSig_TrafficSig_MAX + 1;

const ::google::protobuf::EnumDescriptor* FlowInfo_TrafficSig_descriptor();
inline const ::std::string& FlowInfo_TrafficSig_Name(FlowInfo_TrafficSig value) {
  return ::google::protobuf::internal::NameOfEnum(
    FlowInfo_TrafficSig_descriptor(), value);
}
inline bool FlowInfo_TrafficSig_Parse(
    const ::std::string& name, FlowInfo_TrafficSig* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FlowInfo_TrafficSig>(
    FlowInfo_TrafficSig_descriptor(), name, value);
}
enum LaneWare_WARETYPE {
  LaneWare_WARETYPE_DEFAULT = 0,
  LaneWare_WARETYPE_FULLLINE = 1,
  LaneWare_WARETYPE_DOTTEDLINE = 2,
  LaneWare_WARETYPE_DOUBLEYELLOWLINE = 3
};
bool LaneWare_WARETYPE_IsValid(int value);
constexpr LaneWare_WARETYPE LaneWare_WARETYPE_WARETYPE_MIN = LaneWare_WARETYPE_DEFAULT;
constexpr LaneWare_WARETYPE LaneWare_WARETYPE_WARETYPE_MAX = LaneWare_WARETYPE_DOUBLEYELLOWLINE;
constexpr int LaneWare_WARETYPE_WARETYPE_ARRAYSIZE = LaneWare_WARETYPE_WARETYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* LaneWare_WARETYPE_descriptor();
inline const ::std::string& LaneWare_WARETYPE_Name(LaneWare_WARETYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    LaneWare_WARETYPE_descriptor(), value);
}
inline bool LaneWare_WARETYPE_Parse(
    const ::std::string& name, LaneWare_WARETYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LaneWare_WARETYPE>(
    LaneWare_WARETYPE_descriptor(), name, value);
}
enum ID {
  DEFAULT = 0,
  PEDESTRIAN_D = 1,
  ILLEGAL_V1 = 2,
  VISIBILITY = 3,
  AVAILABLE_AREA = 4,
  ABNORMAL_CAR = 5,
  ILLEGAL_V2 = 6,
  TRAFFIC_STATUS = 7,
  BACKWARD_DRIVING = 8,
  ROAD_DANGER = 9,
  FIRE_SMOKE = 10,
  DETECTOBJECTS = 11,
  TRAFFIC_JAM = 12,
  TRAFFIC_FLOW = 13,
  SPECIALCAR = 14,
  ACCIDENT = 15,
  ICEWARN = 16,
  LANE_WARE = 17
};
bool ID_IsValid(int value);
constexpr ID ID_MIN = DEFAULT;
constexpr ID ID_MAX = LANE_WARE;
constexpr int ID_ARRAYSIZE = ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ID_descriptor();
inline const ::std::string& ID_Name(ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ID_descriptor(), value);
}
inline bool ID_Parse(
    const ::std::string& name, ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ID>(
    ID_descriptor(), name, value);
}
enum TYPE {
  OTHERS = 0,
  HUMAN = 1,
  VEHICLE = 2,
  MOTORCYCLE = 3,
  ANIMAL = 4
};
bool TYPE_IsValid(int value);
constexpr TYPE TYPE_MIN = OTHERS;
constexpr TYPE TYPE_MAX = ANIMAL;
constexpr int TYPE_ARRAYSIZE = TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* TYPE_descriptor();
inline const ::std::string& TYPE_Name(TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    TYPE_descriptor(), value);
}
inline bool TYPE_Parse(
    const ::std::string& name, TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TYPE>(
    TYPE_descriptor(), name, value);
}
enum ABNORMALTYPE {
  DEFAULT_A = 0,
  STOP_CAR1 = 1,
  STOP_CAR2 = 2,
  CONTINUOUS_DIVERSION = 3,
  LINE_PRESSING = 4
};
bool ABNORMALTYPE_IsValid(int value);
constexpr ABNORMALTYPE ABNORMALTYPE_MIN = DEFAULT_A;
constexpr ABNORMALTYPE ABNORMALTYPE_MAX = LINE_PRESSING;
constexpr int ABNORMALTYPE_ARRAYSIZE = ABNORMALTYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* ABNORMALTYPE_descriptor();
inline const ::std::string& ABNORMALTYPE_Name(ABNORMALTYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    ABNORMALTYPE_descriptor(), value);
}
inline bool ABNORMALTYPE_Parse(
    const ::std::string& name, ABNORMALTYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ABNORMALTYPE>(
    ABNORMALTYPE_descriptor(), name, value);
}
// ===================================================================

class data_time final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vision.data_time) */ {
 public:
  data_time();
  virtual ~data_time();

  data_time(const data_time& from);

  inline data_time& operator=(const data_time& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  data_time(data_time&& from) noexcept
    : data_time() {
    *this = ::std::move(from);
  }

  inline data_time& operator=(data_time&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const data_time& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const data_time* internal_default_instance() {
    return reinterpret_cast<const data_time*>(
               &_data_time_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(data_time* other);
  friend void swap(data_time& a, data_time& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline data_time* New() const final {
    return CreateMaybeMessage<data_time>(nullptr);
  }

  data_time* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<data_time>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const data_time& from);
  void MergeFrom(const data_time& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(data_time* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "vision.data_time";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 sec = 1;
  bool has_sec() const;
  void clear_sec();
  static const int kSecFieldNumber = 1;
  ::google::protobuf::uint64 sec() const;
  void set_sec(::google::protobuf::uint64 value);

  // required uint32 usec = 2;
  bool has_usec() const;
  void clear_usec();
  static const int kUsecFieldNumber = 2;
  ::google::protobuf::uint32 usec() const;
  void set_usec(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:vision.data_time)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 sec_;
  ::google::protobuf::uint32 usec_;
  friend struct ::TableStruct_vision_2eproto;
};
// -------------------------------------------------------------------

class Pedestrian final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vision.Pedestrian) */ {
 public:
  Pedestrian();
  virtual ~Pedestrian();

  Pedestrian(const Pedestrian& from);

  inline Pedestrian& operator=(const Pedestrian& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pedestrian(Pedestrian&& from) noexcept
    : Pedestrian() {
    *this = ::std::move(from);
  }

  inline Pedestrian& operator=(Pedestrian&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Pedestrian& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pedestrian* internal_default_instance() {
    return reinterpret_cast<const Pedestrian*>(
               &_Pedestrian_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Pedestrian* other);
  friend void swap(Pedestrian& a, Pedestrian& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pedestrian* New() const final {
    return CreateMaybeMessage<Pedestrian>(nullptr);
  }

  Pedestrian* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Pedestrian>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Pedestrian& from);
  void MergeFrom(const Pedestrian& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pedestrian* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "vision.Pedestrian";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 object_id = 1;
  bool has_object_id() const;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  ::google::protobuf::int32 object_id() const;
  void set_object_id(::google::protobuf::int32 value);

  // required .vision.TYPE object_type = 2;
  bool has_object_type() const;
  void clear_object_type();
  static const int kObjectTypeFieldNumber = 2;
  ::vision::TYPE object_type() const;
  void set_object_type(::vision::TYPE value);

  // required int32 lng = 3;
  bool has_lng() const;
  void clear_lng();
  static const int kLngFieldNumber = 3;
  ::google::protobuf::int32 lng() const;
  void set_lng(::google::protobuf::int32 value);

  // required int32 lat = 4;
  bool has_lat() const;
  void clear_lat();
  static const int kLatFieldNumber = 4;
  ::google::protobuf::int32 lat() const;
  void set_lat(::google::protobuf::int32 value);

  // required int32 camera = 5;
  bool has_camera() const;
  void clear_camera();
  static const int kCameraFieldNumber = 5;
  ::google::protobuf::int32 camera() const;
  void set_camera(::google::protobuf::int32 value);

  // optional int32 if_at_lane = 6;
  bool has_if_at_lane() const;
  void clear_if_at_lane();
  static const int kIfAtLaneFieldNumber = 6;
  ::google::protobuf::int32 if_at_lane() const;
  void set_if_at_lane(::google::protobuf::int32 value);

  // optional int32 lane_id = 7;
  bool has_lane_id() const;
  void clear_lane_id();
  static const int kLaneIdFieldNumber = 7;
  ::google::protobuf::int32 lane_id() const;
  void set_lane_id(::google::protobuf::int32 value);

  // optional int32 heading = 8;
  bool has_heading() const;
  void clear_heading();
  static const int kHeadingFieldNumber = 8;
  ::google::protobuf::int32 heading() const;
  void set_heading(::google::protobuf::int32 value);

  // optional int32 approach_judge = 9;
  bool has_approach_judge() const;
  void clear_approach_judge();
  static const int kApproachJudgeFieldNumber = 9;
  ::google::protobuf::int32 approach_judge() const;
  void set_approach_judge(::google::protobuf::int32 value);

  // optional int32 speed = 10;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 10;
  ::google::protobuf::int32 speed() const;
  void set_speed(::google::protobuf::int32 value);

  // optional int32 people_heading = 11;
  bool has_people_heading() const;
  void clear_people_heading();
  static const int kPeopleHeadingFieldNumber = 11;
  ::google::protobuf::int32 people_heading() const;
  void set_people_heading(::google::protobuf::int32 value);

  // optional int32 lane_type = 12;
  bool has_lane_type() const;
  void clear_lane_type();
  static const int kLaneTypeFieldNumber = 12;
  ::google::protobuf::int32 lane_type() const;
  void set_lane_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:vision.Pedestrian)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 object_id_;
  int object_type_;
  ::google::protobuf::int32 lng_;
  ::google::protobuf::int32 lat_;
  ::google::protobuf::int32 camera_;
  ::google::protobuf::int32 if_at_lane_;
  ::google::protobuf::int32 lane_id_;
  ::google::protobuf::int32 heading_;
  ::google::protobuf::int32 approach_judge_;
  ::google::protobuf::int32 speed_;
  ::google::protobuf::int32 people_heading_;
  ::google::protobuf::int32 lane_type_;
  friend struct ::TableStruct_vision_2eproto;
};
// -------------------------------------------------------------------

class Obstacle final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vision.Obstacle) */ {
 public:
  Obstacle();
  virtual ~Obstacle();

  Obstacle(const Obstacle& from);

  inline Obstacle& operator=(const Obstacle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Obstacle(Obstacle&& from) noexcept
    : Obstacle() {
    *this = ::std::move(from);
  }

  inline Obstacle& operator=(Obstacle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Obstacle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Obstacle* internal_default_instance() {
    return reinterpret_cast<const Obstacle*>(
               &_Obstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Obstacle* other);
  friend void swap(Obstacle& a, Obstacle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Obstacle* New() const final {
    return CreateMaybeMessage<Obstacle>(nullptr);
  }

  Obstacle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Obstacle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Obstacle& from);
  void MergeFrom(const Obstacle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Obstacle* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "vision.Obstacle";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 object_id = 1;
  bool has_object_id() const;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  ::google::protobuf::int32 object_id() const;
  void set_object_id(::google::protobuf::int32 value);

  // required int32 lng = 2;
  bool has_lng() const;
  void clear_lng();
  static const int kLngFieldNumber = 2;
  ::google::protobuf::int32 lng() const;
  void set_lng(::google::protobuf::int32 value);

  // required int32 lat = 3;
  bool has_lat() const;
  void clear_lat();
  static const int kLatFieldNumber = 3;
  ::google::protobuf::int32 lat() const;
  void set_lat(::google::protobuf::int32 value);

  // required int32 camera = 4;
  bool has_camera() const;
  void clear_camera();
  static const int kCameraFieldNumber = 4;
  ::google::protobuf::int32 camera() const;
  void set_camera(::google::protobuf::int32 value);

  // optional int32 if_at_lane = 5;
  bool has_if_at_lane() const;
  void clear_if_at_lane();
  static const int kIfAtLaneFieldNumber = 5;
  ::google::protobuf::int32 if_at_lane() const;
  void set_if_at_lane(::google::protobuf::int32 value);

  // optional int32 lane_id = 6;
  bool has_lane_id() const;
  void clear_lane_id();
  static const int kLaneIdFieldNumber = 6;
  ::google::protobuf::int32 lane_id() const;
  void set_lane_id(::google::protobuf::int32 value);

  // optional int32 heading = 7;
  bool has_heading() const;
  void clear_heading();
  static const int kHeadingFieldNumber = 7;
  ::google::protobuf::int32 heading() const;
  void set_heading(::google::protobuf::int32 value);

  // optional int32 length = 8;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 8;
  ::google::protobuf::int32 length() const;
  void set_length(::google::protobuf::int32 value);

  // optional int32 width = 9;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 9;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 height = 10;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 10;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:vision.Obstacle)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 object_id_;
  ::google::protobuf::int32 lng_;
  ::google::protobuf::int32 lat_;
  ::google::protobuf::int32 camera_;
  ::google::protobuf::int32 if_at_lane_;
  ::google::protobuf::int32 lane_id_;
  ::google::protobuf::int32 heading_;
  ::google::protobuf::int32 length_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  friend struct ::TableStruct_vision_2eproto;
};
// -------------------------------------------------------------------

class AbnormalCar final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vision.AbnormalCar) */ {
 public:
  AbnormalCar();
  virtual ~AbnormalCar();

  AbnormalCar(const AbnormalCar& from);

  inline AbnormalCar& operator=(const AbnormalCar& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AbnormalCar(AbnormalCar&& from) noexcept
    : AbnormalCar() {
    *this = ::std::move(from);
  }

  inline AbnormalCar& operator=(AbnormalCar&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AbnormalCar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AbnormalCar* internal_default_instance() {
    return reinterpret_cast<const AbnormalCar*>(
               &_AbnormalCar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(AbnormalCar* other);
  friend void swap(AbnormalCar& a, AbnormalCar& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AbnormalCar* New() const final {
    return CreateMaybeMessage<AbnormalCar>(nullptr);
  }

  AbnormalCar* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AbnormalCar>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AbnormalCar& from);
  void MergeFrom(const AbnormalCar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AbnormalCar* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "vision.AbnormalCar";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 object_id = 1;
  bool has_object_id() const;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  ::google::protobuf::int32 object_id() const;
  void set_object_id(::google::protobuf::int32 value);

  // required int32 lng = 2;
  bool has_lng() const;
  void clear_lng();
  static const int kLngFieldNumber = 2;
  ::google::protobuf::int32 lng() const;
  void set_lng(::google::protobuf::int32 value);

  // required int32 lat = 3;
  bool has_lat() const;
  void clear_lat();
  static const int kLatFieldNumber = 3;
  ::google::protobuf::int32 lat() const;
  void set_lat(::google::protobuf::int32 value);

  // optional int32 lane_id = 4;
  bool has_lane_id() const;
  void clear_lane_id();
  static const int kLaneIdFieldNumber = 4;
  ::google::protobuf::int32 lane_id() const;
  void set_lane_id(::google::protobuf::int32 value);

  // optional int32 camera = 5;
  bool has_camera() const;
  void clear_camera();
  static const int kCameraFieldNumber = 5;
  ::google::protobuf::int32 camera() const;
  void set_camera(::google::protobuf::int32 value);

  // optional .vision.ABNORMALTYPE abnormal_type = 6;
  bool has_abnormal_type() const;
  void clear_abnormal_type();
  static const int kAbnormalTypeFieldNumber = 6;
  ::vision::ABNORMALTYPE abnormal_type() const;
  void set_abnormal_type(::vision::ABNORMALTYPE value);

  // @@protoc_insertion_point(class_scope:vision.AbnormalCar)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 object_id_;
  ::google::protobuf::int32 lng_;
  ::google::protobuf::int32 lat_;
  ::google::protobuf::int32 lane_id_;
  ::google::protobuf::int32 camera_;
  int abnormal_type_;
  friend struct ::TableStruct_vision_2eproto;
};
// -------------------------------------------------------------------

class SpecialCar final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vision.SpecialCar) */ {
 public:
  SpecialCar();
  virtual ~SpecialCar();

  SpecialCar(const SpecialCar& from);

  inline SpecialCar& operator=(const SpecialCar& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpecialCar(SpecialCar&& from) noexcept
    : SpecialCar() {
    *this = ::std::move(from);
  }

  inline SpecialCar& operator=(SpecialCar&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SpecialCar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpecialCar* internal_default_instance() {
    return reinterpret_cast<const SpecialCar*>(
               &_SpecialCar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SpecialCar* other);
  friend void swap(SpecialCar& a, SpecialCar& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpecialCar* New() const final {
    return CreateMaybeMessage<SpecialCar>(nullptr);
  }

  SpecialCar* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SpecialCar>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SpecialCar& from);
  void MergeFrom(const SpecialCar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpecialCar* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "vision.SpecialCar";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SpecialCar_SPECIALTYPE SPECIALTYPE;
  static constexpr SPECIALTYPE NORMAL =
    SpecialCar_SPECIALTYPE_NORMAL;
  static constexpr SPECIALTYPE AMBULANCE =
    SpecialCar_SPECIALTYPE_AMBULANCE;
  static constexpr SPECIALTYPE DANGERCAR =
    SpecialCar_SPECIALTYPE_DANGERCAR;
  static constexpr SPECIALTYPE FIREENGINE =
    SpecialCar_SPECIALTYPE_FIREENGINE;
  static constexpr SPECIALTYPE POLICECAR =
    SpecialCar_SPECIALTYPE_POLICECAR;
  static inline bool SPECIALTYPE_IsValid(int value) {
    return SpecialCar_SPECIALTYPE_IsValid(value);
  }
  static constexpr SPECIALTYPE SPECIALTYPE_MIN =
    SpecialCar_SPECIALTYPE_SPECIALTYPE_MIN;
  static constexpr SPECIALTYPE SPECIALTYPE_MAX =
    SpecialCar_SPECIALTYPE_SPECIALTYPE_MAX;
  static constexpr int SPECIALTYPE_ARRAYSIZE =
    SpecialCar_SPECIALTYPE_SPECIALTYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SPECIALTYPE_descriptor() {
    return SpecialCar_SPECIALTYPE_descriptor();
  }
  static inline const ::std::string& SPECIALTYPE_Name(SPECIALTYPE value) {
    return SpecialCar_SPECIALTYPE_Name(value);
  }
  static inline bool SPECIALTYPE_Parse(const ::std::string& name,
      SPECIALTYPE* value) {
    return SpecialCar_SPECIALTYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 object_id = 1;
  bool has_object_id() const;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  ::google::protobuf::int32 object_id() const;
  void set_object_id(::google::protobuf::int32 value);

  // required .vision.SpecialCar.SPECIALTYPE special_type = 2;
  bool has_special_type() const;
  void clear_special_type();
  static const int kSpecialTypeFieldNumber = 2;
  ::vision::SpecialCar_SPECIALTYPE special_type() const;
  void set_special_type(::vision::SpecialCar_SPECIALTYPE value);

  // required int32 lng = 3;
  bool has_lng() const;
  void clear_lng();
  static const int kLngFieldNumber = 3;
  ::google::protobuf::int32 lng() const;
  void set_lng(::google::protobuf::int32 value);

  // required int32 lat = 4;
  bool has_lat() const;
  void clear_lat();
  static const int kLatFieldNumber = 4;
  ::google::protobuf::int32 lat() const;
  void set_lat(::google::protobuf::int32 value);

  // required int32 camera = 5;
  bool has_camera() const;
  void clear_camera();
  static const int kCameraFieldNumber = 5;
  ::google::protobuf::int32 camera() const;
  void set_camera(::google::protobuf::int32 value);

  // optional int32 lane_id = 6;
  bool has_lane_id() const;
  void clear_lane_id();
  static const int kLaneIdFieldNumber = 6;
  ::google::protobuf::int32 lane_id() const;
  void set_lane_id(::google::protobuf::int32 value);

  // optional int32 heading = 7;
  bool has_heading() const;
  void clear_heading();
  static const int kHeadingFieldNumber = 7;
  ::google::protobuf::int32 heading() const;
  void set_heading(::google::protobuf::int32 value);

  // optional int32 lane_info = 8;
  bool has_lane_info() const;
  void clear_lane_info();
  static const int kLaneInfoFieldNumber = 8;
  ::google::protobuf::int32 lane_info() const;
  void set_lane_info(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:vision.SpecialCar)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 object_id_;
  int special_type_;
  ::google::protobuf::int32 lng_;
  ::google::protobuf::int32 lat_;
  ::google::protobuf::int32 camera_;
  ::google::protobuf::int32 lane_id_;
  ::google::protobuf::int32 heading_;
  ::google::protobuf::int32 lane_info_;
  friend struct ::TableStruct_vision_2eproto;
};
// -------------------------------------------------------------------

class AvailableArea final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vision.AvailableArea) */ {
 public:
  AvailableArea();
  virtual ~AvailableArea();

  AvailableArea(const AvailableArea& from);

  inline AvailableArea& operator=(const AvailableArea& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AvailableArea(AvailableArea&& from) noexcept
    : AvailableArea() {
    *this = ::std::move(from);
  }

  inline AvailableArea& operator=(AvailableArea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AvailableArea& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AvailableArea* internal_default_instance() {
    return reinterpret_cast<const AvailableArea*>(
               &_AvailableArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(AvailableArea* other);
  friend void swap(AvailableArea& a, AvailableArea& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AvailableArea* New() const final {
    return CreateMaybeMessage<AvailableArea>(nullptr);
  }

  AvailableArea* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AvailableArea>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AvailableArea& from);
  void MergeFrom(const AvailableArea& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AvailableArea* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "vision.AvailableArea";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 object_id = 1;
  bool has_object_id() const;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  ::google::protobuf::int32 object_id() const;
  void set_object_id(::google::protobuf::int32 value);

  // required int32 lng1 = 2;
  bool has_lng1() const;
  void clear_lng1();
  static const int kLng1FieldNumber = 2;
  ::google::protobuf::int32 lng1() const;
  void set_lng1(::google::protobuf::int32 value);

  // required int32 lat1 = 3;
  bool has_lat1() const;
  void clear_lat1();
  static const int kLat1FieldNumber = 3;
  ::google::protobuf::int32 lat1() const;
  void set_lat1(::google::protobuf::int32 value);

  // required int32 lng2 = 4;
  bool has_lng2() const;
  void clear_lng2();
  static const int kLng2FieldNumber = 4;
  ::google::protobuf::int32 lng2() const;
  void set_lng2(::google::protobuf::int32 value);

  // required int32 lat2 = 5;
  bool has_lat2() const;
  void clear_lat2();
  static const int kLat2FieldNumber = 5;
  ::google::protobuf::int32 lat2() const;
  void set_lat2(::google::protobuf::int32 value);

  // required int32 lng3 = 6;
  bool has_lng3() const;
  void clear_lng3();
  static const int kLng3FieldNumber = 6;
  ::google::protobuf::int32 lng3() const;
  void set_lng3(::google::protobuf::int32 value);

  // required int32 lat3 = 7;
  bool has_lat3() const;
  void clear_lat3();
  static const int kLat3FieldNumber = 7;
  ::google::protobuf::int32 lat3() const;
  void set_lat3(::google::protobuf::int32 value);

  // required int32 lng4 = 8;
  bool has_lng4() const;
  void clear_lng4();
  static const int kLng4FieldNumber = 8;
  ::google::protobuf::int32 lng4() const;
  void set_lng4(::google::protobuf::int32 value);

  // required int32 lat4 = 9;
  bool has_lat4() const;
  void clear_lat4();
  static const int kLat4FieldNumber = 9;
  ::google::protobuf::int32 lat4() const;
  void set_lat4(::google::protobuf::int32 value);

  // required int32 camera = 10;
  bool has_camera() const;
  void clear_camera();
  static const int kCameraFieldNumber = 10;
  ::google::protobuf::int32 camera() const;
  void set_camera(::google::protobuf::int32 value);

  // optional int32 lane_id = 11;
  bool has_lane_id() const;
  void clear_lane_id();
  static const int kLaneIdFieldNumber = 11;
  ::google::protobuf::int32 lane_id() const;
  void set_lane_id(::google::protobuf::int32 value);

  // optional int32 heading = 12;
  bool has_heading() const;
  void clear_heading();
  static const int kHeadingFieldNumber = 12;
  ::google::protobuf::int32 heading() const;
  void set_heading(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:vision.AvailableArea)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 object_id_;
  ::google::protobuf::int32 lng1_;
  ::google::protobuf::int32 lat1_;
  ::google::protobuf::int32 lng2_;
  ::google::protobuf::int32 lat2_;
  ::google::protobuf::int32 lng3_;
  ::google::protobuf::int32 lat3_;
  ::google::protobuf::int32 lng4_;
  ::google::protobuf::int32 lat4_;
  ::google::protobuf::int32 camera_;
  ::google::protobuf::int32 lane_id_;
  ::google::protobuf::int32 heading_;
  friend struct ::TableStruct_vision_2eproto;
};
// -------------------------------------------------------------------

class JamInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vision.JamInfo) */ {
 public:
  JamInfo();
  virtual ~JamInfo();

  JamInfo(const JamInfo& from);

  inline JamInfo& operator=(const JamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JamInfo(JamInfo&& from) noexcept
    : JamInfo() {
    *this = ::std::move(from);
  }

  inline JamInfo& operator=(JamInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const JamInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JamInfo* internal_default_instance() {
    return reinterpret_cast<const JamInfo*>(
               &_JamInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(JamInfo* other);
  friend void swap(JamInfo& a, JamInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JamInfo* New() const final {
    return CreateMaybeMessage<JamInfo>(nullptr);
  }

  JamInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<JamInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const JamInfo& from);
  void MergeFrom(const JamInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JamInfo* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "vision.JamInfo";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 vehicle_flow = 4;
  int vehicle_flow_size() const;
  void clear_vehicle_flow();
  static const int kVehicleFlowFieldNumber = 4;
  ::google::protobuf::int32 vehicle_flow(int index) const;
  void set_vehicle_flow(int index, ::google::protobuf::int32 value);
  void add_vehicle_flow(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      vehicle_flow() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_vehicle_flow();

  // required double vehicle_avg_speed = 2;
  bool has_vehicle_avg_speed() const;
  void clear_vehicle_avg_speed();
  static const int kVehicleAvgSpeedFieldNumber = 2;
  double vehicle_avg_speed() const;
  void set_vehicle_avg_speed(double value);

  // required double road_yaw = 3;
  bool has_road_yaw() const;
  void clear_road_yaw();
  static const int kRoadYawFieldNumber = 3;
  double road_yaw() const;
  void set_road_yaw(double value);

  // required uint32 vehicle_num = 1;
  bool has_vehicle_num() const;
  void clear_vehicle_num();
  static const int kVehicleNumFieldNumber = 1;
  ::google::protobuf::uint32 vehicle_num() const;
  void set_vehicle_num(::google::protobuf::uint32 value);

  // optional int32 lane_id = 5;
  bool has_lane_id() const;
  void clear_lane_id();
  static const int kLaneIdFieldNumber = 5;
  ::google::protobuf::int32 lane_id() const;
  void set_lane_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:vision.JamInfo)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > vehicle_flow_;
  double vehicle_avg_speed_;
  double road_yaw_;
  ::google::protobuf::uint32 vehicle_num_;
  ::google::protobuf::int32 lane_id_;
  friend struct ::TableStruct_vision_2eproto;
};
// -------------------------------------------------------------------

class FlowInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vision.FlowInfo) */ {
 public:
  FlowInfo();
  virtual ~FlowInfo();

  FlowInfo(const FlowInfo& from);

  inline FlowInfo& operator=(const FlowInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FlowInfo(FlowInfo&& from) noexcept
    : FlowInfo() {
    *this = ::std::move(from);
  }

  inline FlowInfo& operator=(FlowInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FlowInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlowInfo* internal_default_instance() {
    return reinterpret_cast<const FlowInfo*>(
               &_FlowInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(FlowInfo* other);
  friend void swap(FlowInfo& a, FlowInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FlowInfo* New() const final {
    return CreateMaybeMessage<FlowInfo>(nullptr);
  }

  FlowInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FlowInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FlowInfo& from);
  void MergeFrom(const FlowInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlowInfo* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "vision.FlowInfo";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FlowInfo_TrafficSig TrafficSig;
  static constexpr TrafficSig UNKNOWN =
    FlowInfo_TrafficSig_UNKNOWN;
  static constexpr TrafficSig Y2G =
    FlowInfo_TrafficSig_Y2G;
  static constexpr TrafficSig OVER =
    FlowInfo_TrafficSig_OVER;
  static inline bool TrafficSig_IsValid(int value) {
    return FlowInfo_TrafficSig_IsValid(value);
  }
  static constexpr TrafficSig TrafficSig_MIN =
    FlowInfo_TrafficSig_TrafficSig_MIN;
  static constexpr TrafficSig TrafficSig_MAX =
    FlowInfo_TrafficSig_TrafficSig_MAX;
  static constexpr int TrafficSig_ARRAYSIZE =
    FlowInfo_TrafficSig_TrafficSig_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TrafficSig_descriptor() {
    return FlowInfo_TrafficSig_descriptor();
  }
  static inline const ::std::string& TrafficSig_Name(TrafficSig value) {
    return FlowInfo_TrafficSig_Name(value);
  }
  static inline bool TrafficSig_Parse(const ::std::string& name,
      TrafficSig* value) {
    return FlowInfo_TrafficSig_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint32 vehicle_num = 2;
  int vehicle_num_size() const;
  void clear_vehicle_num();
  static const int kVehicleNumFieldNumber = 2;
  ::google::protobuf::uint32 vehicle_num(int index) const;
  void set_vehicle_num(int index, ::google::protobuf::uint32 value);
  void add_vehicle_num(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      vehicle_num() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_vehicle_num();

  // repeated uint32 pass_num = 3;
  int pass_num_size() const;
  void clear_pass_num();
  static const int kPassNumFieldNumber = 3;
  ::google::protobuf::uint32 pass_num(int index) const;
  void set_pass_num(int index, ::google::protobuf::uint32 value);
  void add_pass_num(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pass_num() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pass_num();

  // optional int32 camera = 1;
  bool has_camera() const;
  void clear_camera();
  static const int kCameraFieldNumber = 1;
  ::google::protobuf::int32 camera() const;
  void set_camera(::google::protobuf::int32 value);

  // optional .vision.FlowInfo.TrafficSig signal = 4;
  bool has_signal() const;
  void clear_signal();
  static const int kSignalFieldNumber = 4;
  ::vision::FlowInfo_TrafficSig signal() const;
  void set_signal(::vision::FlowInfo_TrafficSig value);

  // @@protoc_insertion_point(class_scope:vision.FlowInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > vehicle_num_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pass_num_;
  ::google::protobuf::int32 camera_;
  int signal_;
  friend struct ::TableStruct_vision_2eproto;
};
// -------------------------------------------------------------------

class Base final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vision.Base) */ {
 public:
  Base();
  virtual ~Base();

  Base(const Base& from);

  inline Base& operator=(const Base& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Base(Base&& from) noexcept
    : Base() {
    *this = ::std::move(from);
  }

  inline Base& operator=(Base&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Base& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Base* internal_default_instance() {
    return reinterpret_cast<const Base*>(
               &_Base_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Base* other);
  friend void swap(Base& a, Base& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Base* New() const final {
    return CreateMaybeMessage<Base>(nullptr);
  }

  Base* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Base>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Base& from);
  void MergeFrom(const Base& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Base* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "vision.Base";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .vision.ID id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::vision::ID id() const;
  void set_id(::vision::ID value);

  // @@protoc_insertion_point(class_scope:vision.Base)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int id_;
  friend struct ::TableStruct_vision_2eproto;
};
// -------------------------------------------------------------------

class Crowd final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vision.Crowd) */ {
 public:
  Crowd();
  virtual ~Crowd();

  Crowd(const Crowd& from);

  inline Crowd& operator=(const Crowd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Crowd(Crowd&& from) noexcept
    : Crowd() {
    *this = ::std::move(from);
  }

  inline Crowd& operator=(Crowd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Crowd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Crowd* internal_default_instance() {
    return reinterpret_cast<const Crowd*>(
               &_Crowd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Crowd* other);
  friend void swap(Crowd& a, Crowd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Crowd* New() const final {
    return CreateMaybeMessage<Crowd>(nullptr);
  }

  Crowd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Crowd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Crowd& from);
  void MergeFrom(const Crowd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Crowd* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "vision.Crowd";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .vision.Pedestrian pedestrian = 2;
  int pedestrian_size() const;
  void clear_pedestrian();
  static const int kPedestrianFieldNumber = 2;
  ::vision::Pedestrian* mutable_pedestrian(int index);
  ::google::protobuf::RepeatedPtrField< ::vision::Pedestrian >*
      mutable_pedestrian();
  const ::vision::Pedestrian& pedestrian(int index) const;
  ::vision::Pedestrian* add_pedestrian();
  const ::google::protobuf::RepeatedPtrField< ::vision::Pedestrian >&
      pedestrian() const;

  // optional .vision.data_time time = 3;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  const ::vision::data_time& time() const;
  ::vision::data_time* release_time();
  ::vision::data_time* mutable_time();
  void set_allocated_time(::vision::data_time* time);

  // required .vision.ID id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::vision::ID id() const;
  void set_id(::vision::ID value);

  // @@protoc_insertion_point(class_scope:vision.Crowd)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::vision::Pedestrian > pedestrian_;
  ::vision::data_time* time_;
  int id_;
  friend struct ::TableStruct_vision_2eproto;
};
// -------------------------------------------------------------------

class Obstacles final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vision.Obstacles) */ {
 public:
  Obstacles();
  virtual ~Obstacles();

  Obstacles(const Obstacles& from);

  inline Obstacles& operator=(const Obstacles& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Obstacles(Obstacles&& from) noexcept
    : Obstacles() {
    *this = ::std::move(from);
  }

  inline Obstacles& operator=(Obstacles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Obstacles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Obstacles* internal_default_instance() {
    return reinterpret_cast<const Obstacles*>(
               &_Obstacles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Obstacles* other);
  friend void swap(Obstacles& a, Obstacles& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Obstacles* New() const final {
    return CreateMaybeMessage<Obstacles>(nullptr);
  }

  Obstacles* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Obstacles>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Obstacles& from);
  void MergeFrom(const Obstacles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Obstacles* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "vision.Obstacles";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .vision.Obstacle array = 2;
  int array_size() const;
  void clear_array();
  static const int kArrayFieldNumber = 2;
  ::vision::Obstacle* mutable_array(int index);
  ::google::protobuf::RepeatedPtrField< ::vision::Obstacle >*
      mutable_array();
  const ::vision::Obstacle& array(int index) const;
  ::vision::Obstacle* add_array();
  const ::google::protobuf::RepeatedPtrField< ::vision::Obstacle >&
      array() const;

  // optional .vision.data_time time = 3;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  const ::vision::data_time& time() const;
  ::vision::data_time* release_time();
  ::vision::data_time* mutable_time();
  void set_allocated_time(::vision::data_time* time);

  // required .vision.ID id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::vision::ID id() const;
  void set_id(::vision::ID value);

  // @@protoc_insertion_point(class_scope:vision.Obstacles)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::vision::Obstacle > array_;
  ::vision::data_time* time_;
  int id_;
  friend struct ::TableStruct_vision_2eproto;
};
// -------------------------------------------------------------------

class AvailableAreas final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vision.AvailableAreas) */ {
 public:
  AvailableAreas();
  virtual ~AvailableAreas();

  AvailableAreas(const AvailableAreas& from);

  inline AvailableAreas& operator=(const AvailableAreas& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AvailableAreas(AvailableAreas&& from) noexcept
    : AvailableAreas() {
    *this = ::std::move(from);
  }

  inline AvailableAreas& operator=(AvailableAreas&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AvailableAreas& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AvailableAreas* internal_default_instance() {
    return reinterpret_cast<const AvailableAreas*>(
               &_AvailableAreas_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(AvailableAreas* other);
  friend void swap(AvailableAreas& a, AvailableAreas& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AvailableAreas* New() const final {
    return CreateMaybeMessage<AvailableAreas>(nullptr);
  }

  AvailableAreas* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AvailableAreas>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AvailableAreas& from);
  void MergeFrom(const AvailableAreas& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AvailableAreas* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "vision.AvailableAreas";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .vision.AvailableArea area = 2;
  int area_size() const;
  void clear_area();
  static const int kAreaFieldNumber = 2;
  ::vision::AvailableArea* mutable_area(int index);
  ::google::protobuf::RepeatedPtrField< ::vision::AvailableArea >*
      mutable_area();
  const ::vision::AvailableArea& area(int index) const;
  ::vision::AvailableArea* add_area();
  const ::google::protobuf::RepeatedPtrField< ::vision::AvailableArea >&
      area() const;

  // optional .vision.data_time time = 3;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  const ::vision::data_time& time() const;
  ::vision::data_time* release_time();
  ::vision::data_time* mutable_time();
  void set_allocated_time(::vision::data_time* time);

  // required .vision.ID id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::vision::ID id() const;
  void set_id(::vision::ID value);

  // @@protoc_insertion_point(class_scope:vision.AvailableAreas)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::vision::AvailableArea > area_;
  ::vision::data_time* time_;
  int id_;
  friend struct ::TableStruct_vision_2eproto;
};
// -------------------------------------------------------------------

class IllegalCarWarn final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vision.IllegalCarWarn) */ {
 public:
  IllegalCarWarn();
  virtual ~IllegalCarWarn();

  IllegalCarWarn(const IllegalCarWarn& from);

  inline IllegalCarWarn& operator=(const IllegalCarWarn& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IllegalCarWarn(IllegalCarWarn&& from) noexcept
    : IllegalCarWarn() {
    *this = ::std::move(from);
  }

  inline IllegalCarWarn& operator=(IllegalCarWarn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const IllegalCarWarn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IllegalCarWarn* internal_default_instance() {
    return reinterpret_cast<const IllegalCarWarn*>(
               &_IllegalCarWarn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(IllegalCarWarn* other);
  friend void swap(IllegalCarWarn& a, IllegalCarWarn& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IllegalCarWarn* New() const final {
    return CreateMaybeMessage<IllegalCarWarn>(nullptr);
  }

  IllegalCarWarn* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IllegalCarWarn>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IllegalCarWarn& from);
  void MergeFrom(const IllegalCarWarn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IllegalCarWarn* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "vision.IllegalCarWarn";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .vision.AbnormalCar array = 2;
  int array_size() const;
  void clear_array();
  static const int kArrayFieldNumber = 2;
  ::vision::AbnormalCar* mutable_array(int index);
  ::google::protobuf::RepeatedPtrField< ::vision::AbnormalCar >*
      mutable_array();
  const ::vision::AbnormalCar& array(int index) const;
  ::vision::AbnormalCar* add_array();
  const ::google::protobuf::RepeatedPtrField< ::vision::AbnormalCar >&
      array() const;

  // optional .vision.data_time time = 3;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  const ::vision::data_time& time() const;
  ::vision::data_time* release_time();
  ::vision::data_time* mutable_time();
  void set_allocated_time(::vision::data_time* time);

  // required .vision.ID id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::vision::ID id() const;
  void set_id(::vision::ID value);

  // @@protoc_insertion_point(class_scope:vision.IllegalCarWarn)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::vision::AbnormalCar > array_;
  ::vision::data_time* time_;
  int id_;
  friend struct ::TableStruct_vision_2eproto;
};
// -------------------------------------------------------------------

class Visibility final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vision.Visibility) */ {
 public:
  Visibility();
  virtual ~Visibility();

  Visibility(const Visibility& from);

  inline Visibility& operator=(const Visibility& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Visibility(Visibility&& from) noexcept
    : Visibility() {
    *this = ::std::move(from);
  }

  inline Visibility& operator=(Visibility&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Visibility& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Visibility* internal_default_instance() {
    return reinterpret_cast<const Visibility*>(
               &_Visibility_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(Visibility* other);
  friend void swap(Visibility& a, Visibility& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Visibility* New() const final {
    return CreateMaybeMessage<Visibility>(nullptr);
  }

  Visibility* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Visibility>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Visibility& from);
  void MergeFrom(const Visibility& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Visibility* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "vision.Visibility";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double distance = 2;
  bool has_distance() const;
  void clear_distance();
  static const int kDistanceFieldNumber = 2;
  double distance() const;
  void set_distance(double value);

  // required .vision.ID id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::vision::ID id() const;
  void set_id(::vision::ID value);

  // required int32 level = 3;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 3;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:vision.Visibility)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double distance_;
  int id_;
  ::google::protobuf::int32 level_;
  friend struct ::TableStruct_vision_2eproto;
};
// -------------------------------------------------------------------

class SmokeWarn final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vision.SmokeWarn) */ {
 public:
  SmokeWarn();
  virtual ~SmokeWarn();

  SmokeWarn(const SmokeWarn& from);

  inline SmokeWarn& operator=(const SmokeWarn& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SmokeWarn(SmokeWarn&& from) noexcept
    : SmokeWarn() {
    *this = ::std::move(from);
  }

  inline SmokeWarn& operator=(SmokeWarn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SmokeWarn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SmokeWarn* internal_default_instance() {
    return reinterpret_cast<const SmokeWarn*>(
               &_SmokeWarn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(SmokeWarn* other);
  friend void swap(SmokeWarn& a, SmokeWarn& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SmokeWarn* New() const final {
    return CreateMaybeMessage<SmokeWarn>(nullptr);
  }

  SmokeWarn* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SmokeWarn>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SmokeWarn& from);
  void MergeFrom(const SmokeWarn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SmokeWarn* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "vision.SmokeWarn";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .vision.ID id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::vision::ID id() const;
  void set_id(::vision::ID value);

  // required bool warn = 2;
  bool has_warn() const;
  void clear_warn();
  static const int kWarnFieldNumber = 2;
  bool warn() const;
  void set_warn(bool value);

  // @@protoc_insertion_point(class_scope:vision.SmokeWarn)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int id_;
  bool warn_;
  friend struct ::TableStruct_vision_2eproto;
};
// -------------------------------------------------------------------

class TrafficJam final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vision.TrafficJam) */ {
 public:
  TrafficJam();
  virtual ~TrafficJam();

  TrafficJam(const TrafficJam& from);

  inline TrafficJam& operator=(const TrafficJam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrafficJam(TrafficJam&& from) noexcept
    : TrafficJam() {
    *this = ::std::move(from);
  }

  inline TrafficJam& operator=(TrafficJam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TrafficJam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficJam* internal_default_instance() {
    return reinterpret_cast<const TrafficJam*>(
               &_TrafficJam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(TrafficJam* other);
  friend void swap(TrafficJam& a, TrafficJam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficJam* New() const final {
    return CreateMaybeMessage<TrafficJam>(nullptr);
  }

  TrafficJam* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrafficJam>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrafficJam& from);
  void MergeFrom(const TrafficJam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficJam* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "vision.TrafficJam";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .vision.JamInfo jam = 2;
  int jam_size() const;
  void clear_jam();
  static const int kJamFieldNumber = 2;
  ::vision::JamInfo* mutable_jam(int index);
  ::google::protobuf::RepeatedPtrField< ::vision::JamInfo >*
      mutable_jam();
  const ::vision::JamInfo& jam(int index) const;
  ::vision::JamInfo* add_jam();
  const ::google::protobuf::RepeatedPtrField< ::vision::JamInfo >&
      jam() const;

  // optional .vision.data_time time = 3;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  const ::vision::data_time& time() const;
  ::vision::data_time* release_time();
  ::vision::data_time* mutable_time();
  void set_allocated_time(::vision::data_time* time);

  // required .vision.ID id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::vision::ID id() const;
  void set_id(::vision::ID value);

  // @@protoc_insertion_point(class_scope:vision.TrafficJam)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::vision::JamInfo > jam_;
  ::vision::data_time* time_;
  int id_;
  friend struct ::TableStruct_vision_2eproto;
};
// -------------------------------------------------------------------

class TrafficFlow final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vision.TrafficFlow) */ {
 public:
  TrafficFlow();
  virtual ~TrafficFlow();

  TrafficFlow(const TrafficFlow& from);

  inline TrafficFlow& operator=(const TrafficFlow& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrafficFlow(TrafficFlow&& from) noexcept
    : TrafficFlow() {
    *this = ::std::move(from);
  }

  inline TrafficFlow& operator=(TrafficFlow&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TrafficFlow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficFlow* internal_default_instance() {
    return reinterpret_cast<const TrafficFlow*>(
               &_TrafficFlow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(TrafficFlow* other);
  friend void swap(TrafficFlow& a, TrafficFlow& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficFlow* New() const final {
    return CreateMaybeMessage<TrafficFlow>(nullptr);
  }

  TrafficFlow* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrafficFlow>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrafficFlow& from);
  void MergeFrom(const TrafficFlow& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficFlow* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "vision.TrafficFlow";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .vision.FlowInfo flow = 2;
  int flow_size() const;
  void clear_flow();
  static const int kFlowFieldNumber = 2;
  ::vision::FlowInfo* mutable_flow(int index);
  ::google::protobuf::RepeatedPtrField< ::vision::FlowInfo >*
      mutable_flow();
  const ::vision::FlowInfo& flow(int index) const;
  ::vision::FlowInfo* add_flow();
  const ::google::protobuf::RepeatedPtrField< ::vision::FlowInfo >&
      flow() const;

  // optional .vision.data_time time_begin = 3;
  bool has_time_begin() const;
  void clear_time_begin();
  static const int kTimeBeginFieldNumber = 3;
  const ::vision::data_time& time_begin() const;
  ::vision::data_time* release_time_begin();
  ::vision::data_time* mutable_time_begin();
  void set_allocated_time_begin(::vision::data_time* time_begin);

  // optional .vision.data_time time_end = 4;
  bool has_time_end() const;
  void clear_time_end();
  static const int kTimeEndFieldNumber = 4;
  const ::vision::data_time& time_end() const;
  ::vision::data_time* release_time_end();
  ::vision::data_time* mutable_time_end();
  void set_allocated_time_end(::vision::data_time* time_end);

  // required .vision.ID id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::vision::ID id() const;
  void set_id(::vision::ID value);

  // @@protoc_insertion_point(class_scope:vision.TrafficFlow)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::vision::FlowInfo > flow_;
  ::vision::data_time* time_begin_;
  ::vision::data_time* time_end_;
  int id_;
  friend struct ::TableStruct_vision_2eproto;
};
// -------------------------------------------------------------------

class IceWarn final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vision.IceWarn) */ {
 public:
  IceWarn();
  virtual ~IceWarn();

  IceWarn(const IceWarn& from);

  inline IceWarn& operator=(const IceWarn& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IceWarn(IceWarn&& from) noexcept
    : IceWarn() {
    *this = ::std::move(from);
  }

  inline IceWarn& operator=(IceWarn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const IceWarn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IceWarn* internal_default_instance() {
    return reinterpret_cast<const IceWarn*>(
               &_IceWarn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(IceWarn* other);
  friend void swap(IceWarn& a, IceWarn& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IceWarn* New() const final {
    return CreateMaybeMessage<IceWarn>(nullptr);
  }

  IceWarn* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IceWarn>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IceWarn& from);
  void MergeFrom(const IceWarn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IceWarn* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "vision.IceWarn";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .vision.ID id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::vision::ID id() const;
  void set_id(::vision::ID value);

  // required bool warn = 2;
  bool has_warn() const;
  void clear_warn();
  static const int kWarnFieldNumber = 2;
  bool warn() const;
  void set_warn(bool value);

  // @@protoc_insertion_point(class_scope:vision.IceWarn)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int id_;
  bool warn_;
  friend struct ::TableStruct_vision_2eproto;
};
// -------------------------------------------------------------------

class LaneWare final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vision.LaneWare) */ {
 public:
  LaneWare();
  virtual ~LaneWare();

  LaneWare(const LaneWare& from);

  inline LaneWare& operator=(const LaneWare& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaneWare(LaneWare&& from) noexcept
    : LaneWare() {
    *this = ::std::move(from);
  }

  inline LaneWare& operator=(LaneWare&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LaneWare& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneWare* internal_default_instance() {
    return reinterpret_cast<const LaneWare*>(
               &_LaneWare_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(LaneWare* other);
  friend void swap(LaneWare& a, LaneWare& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaneWare* New() const final {
    return CreateMaybeMessage<LaneWare>(nullptr);
  }

  LaneWare* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaneWare>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaneWare& from);
  void MergeFrom(const LaneWare& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneWare* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "vision.LaneWare";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LaneWare_WARETYPE WARETYPE;
  static constexpr WARETYPE DEFAULT =
    LaneWare_WARETYPE_DEFAULT;
  static constexpr WARETYPE FULLLINE =
    LaneWare_WARETYPE_FULLLINE;
  static constexpr WARETYPE DOTTEDLINE =
    LaneWare_WARETYPE_DOTTEDLINE;
  static constexpr WARETYPE DOUBLEYELLOWLINE =
    LaneWare_WARETYPE_DOUBLEYELLOWLINE;
  static inline bool WARETYPE_IsValid(int value) {
    return LaneWare_WARETYPE_IsValid(value);
  }
  static constexpr WARETYPE WARETYPE_MIN =
    LaneWare_WARETYPE_WARETYPE_MIN;
  static constexpr WARETYPE WARETYPE_MAX =
    LaneWare_WARETYPE_WARETYPE_MAX;
  static constexpr int WARETYPE_ARRAYSIZE =
    LaneWare_WARETYPE_WARETYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  WARETYPE_descriptor() {
    return LaneWare_WARETYPE_descriptor();
  }
  static inline const ::std::string& WARETYPE_Name(WARETYPE value) {
    return LaneWare_WARETYPE_Name(value);
  }
  static inline bool WARETYPE_Parse(const ::std::string& name,
      WARETYPE* value) {
    return LaneWare_WARETYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .vision.ID id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::vision::ID id() const;
  void set_id(::vision::ID value);

  // required .vision.LaneWare.WARETYPE ware_type = 2;
  bool has_ware_type() const;
  void clear_ware_type();
  static const int kWareTypeFieldNumber = 2;
  ::vision::LaneWare_WARETYPE ware_type() const;
  void set_ware_type(::vision::LaneWare_WARETYPE value);

  // required int32 lng1 = 3;
  bool has_lng1() const;
  void clear_lng1();
  static const int kLng1FieldNumber = 3;
  ::google::protobuf::int32 lng1() const;
  void set_lng1(::google::protobuf::int32 value);

  // required int32 lat1 = 4;
  bool has_lat1() const;
  void clear_lat1();
  static const int kLat1FieldNumber = 4;
  ::google::protobuf::int32 lat1() const;
  void set_lat1(::google::protobuf::int32 value);

  // required int32 lng2 = 5;
  bool has_lng2() const;
  void clear_lng2();
  static const int kLng2FieldNumber = 5;
  ::google::protobuf::int32 lng2() const;
  void set_lng2(::google::protobuf::int32 value);

  // required int32 lat2 = 6;
  bool has_lat2() const;
  void clear_lat2();
  static const int kLat2FieldNumber = 6;
  ::google::protobuf::int32 lat2() const;
  void set_lat2(::google::protobuf::int32 value);

  // optional int32 heading = 7;
  bool has_heading() const;
  void clear_heading();
  static const int kHeadingFieldNumber = 7;
  ::google::protobuf::int32 heading() const;
  void set_heading(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:vision.LaneWare)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int id_;
  int ware_type_;
  ::google::protobuf::int32 lng1_;
  ::google::protobuf::int32 lat1_;
  ::google::protobuf::int32 lng2_;
  ::google::protobuf::int32 lat2_;
  ::google::protobuf::int32 heading_;
  friend struct ::TableStruct_vision_2eproto;
};
// -------------------------------------------------------------------

class SpecialCarMsg final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vision.SpecialCarMsg) */ {
 public:
  SpecialCarMsg();
  virtual ~SpecialCarMsg();

  SpecialCarMsg(const SpecialCarMsg& from);

  inline SpecialCarMsg& operator=(const SpecialCarMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpecialCarMsg(SpecialCarMsg&& from) noexcept
    : SpecialCarMsg() {
    *this = ::std::move(from);
  }

  inline SpecialCarMsg& operator=(SpecialCarMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SpecialCarMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpecialCarMsg* internal_default_instance() {
    return reinterpret_cast<const SpecialCarMsg*>(
               &_SpecialCarMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(SpecialCarMsg* other);
  friend void swap(SpecialCarMsg& a, SpecialCarMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpecialCarMsg* New() const final {
    return CreateMaybeMessage<SpecialCarMsg>(nullptr);
  }

  SpecialCarMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SpecialCarMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SpecialCarMsg& from);
  void MergeFrom(const SpecialCarMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpecialCarMsg* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "vision.SpecialCarMsg";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .vision.SpecialCar array = 2;
  int array_size() const;
  void clear_array();
  static const int kArrayFieldNumber = 2;
  ::vision::SpecialCar* mutable_array(int index);
  ::google::protobuf::RepeatedPtrField< ::vision::SpecialCar >*
      mutable_array();
  const ::vision::SpecialCar& array(int index) const;
  ::vision::SpecialCar* add_array();
  const ::google::protobuf::RepeatedPtrField< ::vision::SpecialCar >&
      array() const;

  // optional .vision.data_time time = 3;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  const ::vision::data_time& time() const;
  ::vision::data_time* release_time();
  ::vision::data_time* mutable_time();
  void set_allocated_time(::vision::data_time* time);

  // required .vision.ID id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::vision::ID id() const;
  void set_id(::vision::ID value);

  // @@protoc_insertion_point(class_scope:vision.SpecialCarMsg)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::vision::SpecialCar > array_;
  ::vision::data_time* time_;
  int id_;
  friend struct ::TableStruct_vision_2eproto;
};
// -------------------------------------------------------------------

class Timestamp final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vision.Timestamp) */ {
 public:
  Timestamp();
  virtual ~Timestamp();

  Timestamp(const Timestamp& from);

  inline Timestamp& operator=(const Timestamp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Timestamp(Timestamp&& from) noexcept
    : Timestamp() {
    *this = ::std::move(from);
  }

  inline Timestamp& operator=(Timestamp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Timestamp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Timestamp* internal_default_instance() {
    return reinterpret_cast<const Timestamp*>(
               &_Timestamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(Timestamp* other);
  friend void swap(Timestamp& a, Timestamp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Timestamp* New() const final {
    return CreateMaybeMessage<Timestamp>(nullptr);
  }

  Timestamp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Timestamp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Timestamp& from);
  void MergeFrom(const Timestamp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Timestamp* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "vision.Timestamp";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 seconds = 1;
  bool has_seconds() const;
  void clear_seconds();
  static const int kSecondsFieldNumber = 1;
  ::google::protobuf::int64 seconds() const;
  void set_seconds(::google::protobuf::int64 value);

  // required int32 nanos = 2;
  bool has_nanos() const;
  void clear_nanos();
  static const int kNanosFieldNumber = 2;
  ::google::protobuf::int32 nanos() const;
  void set_nanos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:vision.Timestamp)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int64 seconds_;
  ::google::protobuf::int32 nanos_;
  friend struct ::TableStruct_vision_2eproto;
};
// -------------------------------------------------------------------

class Detectobject final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vision.Detectobject) */ {
 public:
  Detectobject();
  virtual ~Detectobject();

  Detectobject(const Detectobject& from);

  inline Detectobject& operator=(const Detectobject& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Detectobject(Detectobject&& from) noexcept
    : Detectobject() {
    *this = ::std::move(from);
  }

  inline Detectobject& operator=(Detectobject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Detectobject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Detectobject* internal_default_instance() {
    return reinterpret_cast<const Detectobject*>(
               &_Detectobject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(Detectobject* other);
  friend void swap(Detectobject& a, Detectobject& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Detectobject* New() const final {
    return CreateMaybeMessage<Detectobject>(nullptr);
  }

  Detectobject* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Detectobject>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Detectobject& from);
  void MergeFrom(const Detectobject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Detectobject* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "vision.Detectobject";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 object_id = 1;
  bool has_object_id() const;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  ::google::protobuf::int32 object_id() const;
  void set_object_id(::google::protobuf::int32 value);

  // required .vision.TYPE object_type = 2;
  bool has_object_type() const;
  void clear_object_type();
  static const int kObjectTypeFieldNumber = 2;
  ::vision::TYPE object_type() const;
  void set_object_type(::vision::TYPE value);

  // required int32 longitudinalX = 3;
  bool has_longitudinalx() const;
  void clear_longitudinalx();
  static const int kLongitudinalXFieldNumber = 3;
  ::google::protobuf::int32 longitudinalx() const;
  void set_longitudinalx(::google::protobuf::int32 value);

  // required int32 lateralY = 4;
  bool has_lateraly() const;
  void clear_lateraly();
  static const int kLateralYFieldNumber = 4;
  ::google::protobuf::int32 lateraly() const;
  void set_lateraly(::google::protobuf::int32 value);

  // required int32 velocity = 5;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 5;
  ::google::protobuf::int32 velocity() const;
  void set_velocity(::google::protobuf::int32 value);

  // required int32 camera = 6;
  bool has_camera() const;
  void clear_camera();
  static const int kCameraFieldNumber = 6;
  ::google::protobuf::int32 camera() const;
  void set_camera(::google::protobuf::int32 value);

  // optional int32 if_at_lane = 7;
  bool has_if_at_lane() const;
  void clear_if_at_lane();
  static const int kIfAtLaneFieldNumber = 7;
  ::google::protobuf::int32 if_at_lane() const;
  void set_if_at_lane(::google::protobuf::int32 value);

  // optional int32 lane_id = 8;
  bool has_lane_id() const;
  void clear_lane_id();
  static const int kLaneIdFieldNumber = 8;
  ::google::protobuf::int32 lane_id() const;
  void set_lane_id(::google::protobuf::int32 value);

  // optional int32 heading = 9;
  bool has_heading() const;
  void clear_heading();
  static const int kHeadingFieldNumber = 9;
  ::google::protobuf::int32 heading() const;
  void set_heading(::google::protobuf::int32 value);

  // optional int32 lane_info = 10;
  bool has_lane_info() const;
  void clear_lane_info();
  static const int kLaneInfoFieldNumber = 10;
  ::google::protobuf::int32 lane_info() const;
  void set_lane_info(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:vision.Detectobject)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 object_id_;
  int object_type_;
  ::google::protobuf::int32 longitudinalx_;
  ::google::protobuf::int32 lateraly_;
  ::google::protobuf::int32 velocity_;
  ::google::protobuf::int32 camera_;
  ::google::protobuf::int32 if_at_lane_;
  ::google::protobuf::int32 lane_id_;
  ::google::protobuf::int32 heading_;
  ::google::protobuf::int32 lane_info_;
  friend struct ::TableStruct_vision_2eproto;
};
// -------------------------------------------------------------------

class Detectobjects final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vision.Detectobjects) */ {
 public:
  Detectobjects();
  virtual ~Detectobjects();

  Detectobjects(const Detectobjects& from);

  inline Detectobjects& operator=(const Detectobjects& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Detectobjects(Detectobjects&& from) noexcept
    : Detectobjects() {
    *this = ::std::move(from);
  }

  inline Detectobjects& operator=(Detectobjects&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Detectobjects& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Detectobjects* internal_default_instance() {
    return reinterpret_cast<const Detectobjects*>(
               &_Detectobjects_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(Detectobjects* other);
  friend void swap(Detectobjects& a, Detectobjects& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Detectobjects* New() const final {
    return CreateMaybeMessage<Detectobjects>(nullptr);
  }

  Detectobjects* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Detectobjects>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Detectobjects& from);
  void MergeFrom(const Detectobjects& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Detectobjects* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "vision.Detectobjects";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .vision.Detectobject object = 2;
  int object_size() const;
  void clear_object();
  static const int kObjectFieldNumber = 2;
  ::vision::Detectobject* mutable_object(int index);
  ::google::protobuf::RepeatedPtrField< ::vision::Detectobject >*
      mutable_object();
  const ::vision::Detectobject& object(int index) const;
  ::vision::Detectobject* add_object();
  const ::google::protobuf::RepeatedPtrField< ::vision::Detectobject >&
      object() const;

  // optional .vision.Timestamp time = 3;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  const ::vision::Timestamp& time() const;
  ::vision::Timestamp* release_time();
  ::vision::Timestamp* mutable_time();
  void set_allocated_time(::vision::Timestamp* time);

  // required .vision.ID id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::vision::ID id() const;
  void set_id(::vision::ID value);

  // @@protoc_insertion_point(class_scope:vision.Detectobjects)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::vision::Detectobject > object_;
  ::vision::Timestamp* time_;
  int id_;
  friend struct ::TableStruct_vision_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// data_time

// required uint64 sec = 1;
inline bool data_time::has_sec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void data_time::clear_sec() {
  sec_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 data_time::sec() const {
  // @@protoc_insertion_point(field_get:vision.data_time.sec)
  return sec_;
}
inline void data_time::set_sec(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  sec_ = value;
  // @@protoc_insertion_point(field_set:vision.data_time.sec)
}

// required uint32 usec = 2;
inline bool data_time::has_usec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void data_time::clear_usec() {
  usec_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 data_time::usec() const {
  // @@protoc_insertion_point(field_get:vision.data_time.usec)
  return usec_;
}
inline void data_time::set_usec(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  usec_ = value;
  // @@protoc_insertion_point(field_set:vision.data_time.usec)
}

// -------------------------------------------------------------------

// Pedestrian

// required int32 object_id = 1;
inline bool Pedestrian::has_object_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pedestrian::clear_object_id() {
  object_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::int32 Pedestrian::object_id() const {
  // @@protoc_insertion_point(field_get:vision.Pedestrian.object_id)
  return object_id_;
}
inline void Pedestrian::set_object_id(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  object_id_ = value;
  // @@protoc_insertion_point(field_set:vision.Pedestrian.object_id)
}

// required .vision.TYPE object_type = 2;
inline bool Pedestrian::has_object_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pedestrian::clear_object_type() {
  object_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::vision::TYPE Pedestrian::object_type() const {
  // @@protoc_insertion_point(field_get:vision.Pedestrian.object_type)
  return static_cast< ::vision::TYPE >(object_type_);
}
inline void Pedestrian::set_object_type(::vision::TYPE value) {
  assert(::vision::TYPE_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  object_type_ = value;
  // @@protoc_insertion_point(field_set:vision.Pedestrian.object_type)
}

// required int32 lng = 3;
inline bool Pedestrian::has_lng() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pedestrian::clear_lng() {
  lng_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int32 Pedestrian::lng() const {
  // @@protoc_insertion_point(field_get:vision.Pedestrian.lng)
  return lng_;
}
inline void Pedestrian::set_lng(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  lng_ = value;
  // @@protoc_insertion_point(field_set:vision.Pedestrian.lng)
}

// required int32 lat = 4;
inline bool Pedestrian::has_lat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Pedestrian::clear_lat() {
  lat_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::int32 Pedestrian::lat() const {
  // @@protoc_insertion_point(field_get:vision.Pedestrian.lat)
  return lat_;
}
inline void Pedestrian::set_lat(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  lat_ = value;
  // @@protoc_insertion_point(field_set:vision.Pedestrian.lat)
}

// required int32 camera = 5;
inline bool Pedestrian::has_camera() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Pedestrian::clear_camera() {
  camera_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::int32 Pedestrian::camera() const {
  // @@protoc_insertion_point(field_get:vision.Pedestrian.camera)
  return camera_;
}
inline void Pedestrian::set_camera(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  camera_ = value;
  // @@protoc_insertion_point(field_set:vision.Pedestrian.camera)
}

// optional int32 if_at_lane = 6;
inline bool Pedestrian::has_if_at_lane() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Pedestrian::clear_if_at_lane() {
  if_at_lane_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::int32 Pedestrian::if_at_lane() const {
  // @@protoc_insertion_point(field_get:vision.Pedestrian.if_at_lane)
  return if_at_lane_;
}
inline void Pedestrian::set_if_at_lane(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  if_at_lane_ = value;
  // @@protoc_insertion_point(field_set:vision.Pedestrian.if_at_lane)
}

// optional int32 lane_id = 7;
inline bool Pedestrian::has_lane_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Pedestrian::clear_lane_id() {
  lane_id_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::int32 Pedestrian::lane_id() const {
  // @@protoc_insertion_point(field_get:vision.Pedestrian.lane_id)
  return lane_id_;
}
inline void Pedestrian::set_lane_id(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  lane_id_ = value;
  // @@protoc_insertion_point(field_set:vision.Pedestrian.lane_id)
}

// optional int32 heading = 8;
inline bool Pedestrian::has_heading() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Pedestrian::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::int32 Pedestrian::heading() const {
  // @@protoc_insertion_point(field_get:vision.Pedestrian.heading)
  return heading_;
}
inline void Pedestrian::set_heading(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  heading_ = value;
  // @@protoc_insertion_point(field_set:vision.Pedestrian.heading)
}

// optional int32 approach_judge = 9;
inline bool Pedestrian::has_approach_judge() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Pedestrian::clear_approach_judge() {
  approach_judge_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::int32 Pedestrian::approach_judge() const {
  // @@protoc_insertion_point(field_get:vision.Pedestrian.approach_judge)
  return approach_judge_;
}
inline void Pedestrian::set_approach_judge(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  approach_judge_ = value;
  // @@protoc_insertion_point(field_set:vision.Pedestrian.approach_judge)
}

// optional int32 speed = 10;
inline bool Pedestrian::has_speed() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Pedestrian::clear_speed() {
  speed_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::int32 Pedestrian::speed() const {
  // @@protoc_insertion_point(field_get:vision.Pedestrian.speed)
  return speed_;
}
inline void Pedestrian::set_speed(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  speed_ = value;
  // @@protoc_insertion_point(field_set:vision.Pedestrian.speed)
}

// optional int32 people_heading = 11;
inline bool Pedestrian::has_people_heading() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Pedestrian::clear_people_heading() {
  people_heading_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::google::protobuf::int32 Pedestrian::people_heading() const {
  // @@protoc_insertion_point(field_get:vision.Pedestrian.people_heading)
  return people_heading_;
}
inline void Pedestrian::set_people_heading(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  people_heading_ = value;
  // @@protoc_insertion_point(field_set:vision.Pedestrian.people_heading)
}

// optional int32 lane_type = 12;
inline bool Pedestrian::has_lane_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Pedestrian::clear_lane_type() {
  lane_type_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::google::protobuf::int32 Pedestrian::lane_type() const {
  // @@protoc_insertion_point(field_get:vision.Pedestrian.lane_type)
  return lane_type_;
}
inline void Pedestrian::set_lane_type(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  lane_type_ = value;
  // @@protoc_insertion_point(field_set:vision.Pedestrian.lane_type)
}

// -------------------------------------------------------------------

// Obstacle

// required int32 object_id = 1;
inline bool Obstacle::has_object_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Obstacle::clear_object_id() {
  object_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::int32 Obstacle::object_id() const {
  // @@protoc_insertion_point(field_get:vision.Obstacle.object_id)
  return object_id_;
}
inline void Obstacle::set_object_id(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  object_id_ = value;
  // @@protoc_insertion_point(field_set:vision.Obstacle.object_id)
}

// required int32 lng = 2;
inline bool Obstacle::has_lng() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Obstacle::clear_lng() {
  lng_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::int32 Obstacle::lng() const {
  // @@protoc_insertion_point(field_get:vision.Obstacle.lng)
  return lng_;
}
inline void Obstacle::set_lng(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  lng_ = value;
  // @@protoc_insertion_point(field_set:vision.Obstacle.lng)
}

// required int32 lat = 3;
inline bool Obstacle::has_lat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Obstacle::clear_lat() {
  lat_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int32 Obstacle::lat() const {
  // @@protoc_insertion_point(field_get:vision.Obstacle.lat)
  return lat_;
}
inline void Obstacle::set_lat(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  lat_ = value;
  // @@protoc_insertion_point(field_set:vision.Obstacle.lat)
}

// required int32 camera = 4;
inline bool Obstacle::has_camera() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Obstacle::clear_camera() {
  camera_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::int32 Obstacle::camera() const {
  // @@protoc_insertion_point(field_get:vision.Obstacle.camera)
  return camera_;
}
inline void Obstacle::set_camera(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  camera_ = value;
  // @@protoc_insertion_point(field_set:vision.Obstacle.camera)
}

// optional int32 if_at_lane = 5;
inline bool Obstacle::has_if_at_lane() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Obstacle::clear_if_at_lane() {
  if_at_lane_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::int32 Obstacle::if_at_lane() const {
  // @@protoc_insertion_point(field_get:vision.Obstacle.if_at_lane)
  return if_at_lane_;
}
inline void Obstacle::set_if_at_lane(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  if_at_lane_ = value;
  // @@protoc_insertion_point(field_set:vision.Obstacle.if_at_lane)
}

// optional int32 lane_id = 6;
inline bool Obstacle::has_lane_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Obstacle::clear_lane_id() {
  lane_id_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::int32 Obstacle::lane_id() const {
  // @@protoc_insertion_point(field_get:vision.Obstacle.lane_id)
  return lane_id_;
}
inline void Obstacle::set_lane_id(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  lane_id_ = value;
  // @@protoc_insertion_point(field_set:vision.Obstacle.lane_id)
}

// optional int32 heading = 7;
inline bool Obstacle::has_heading() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Obstacle::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::int32 Obstacle::heading() const {
  // @@protoc_insertion_point(field_get:vision.Obstacle.heading)
  return heading_;
}
inline void Obstacle::set_heading(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  heading_ = value;
  // @@protoc_insertion_point(field_set:vision.Obstacle.heading)
}

// optional int32 length = 8;
inline bool Obstacle::has_length() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Obstacle::clear_length() {
  length_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::int32 Obstacle::length() const {
  // @@protoc_insertion_point(field_get:vision.Obstacle.length)
  return length_;
}
inline void Obstacle::set_length(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  length_ = value;
  // @@protoc_insertion_point(field_set:vision.Obstacle.length)
}

// optional int32 width = 9;
inline bool Obstacle::has_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Obstacle::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::int32 Obstacle::width() const {
  // @@protoc_insertion_point(field_get:vision.Obstacle.width)
  return width_;
}
inline void Obstacle::set_width(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  width_ = value;
  // @@protoc_insertion_point(field_set:vision.Obstacle.width)
}

// optional int32 height = 10;
inline bool Obstacle::has_height() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Obstacle::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::int32 Obstacle::height() const {
  // @@protoc_insertion_point(field_get:vision.Obstacle.height)
  return height_;
}
inline void Obstacle::set_height(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  height_ = value;
  // @@protoc_insertion_point(field_set:vision.Obstacle.height)
}

// -------------------------------------------------------------------

// AbnormalCar

// required int32 object_id = 1;
inline bool AbnormalCar::has_object_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AbnormalCar::clear_object_id() {
  object_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::int32 AbnormalCar::object_id() const {
  // @@protoc_insertion_point(field_get:vision.AbnormalCar.object_id)
  return object_id_;
}
inline void AbnormalCar::set_object_id(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  object_id_ = value;
  // @@protoc_insertion_point(field_set:vision.AbnormalCar.object_id)
}

// required int32 lng = 2;
inline bool AbnormalCar::has_lng() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AbnormalCar::clear_lng() {
  lng_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::int32 AbnormalCar::lng() const {
  // @@protoc_insertion_point(field_get:vision.AbnormalCar.lng)
  return lng_;
}
inline void AbnormalCar::set_lng(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  lng_ = value;
  // @@protoc_insertion_point(field_set:vision.AbnormalCar.lng)
}

// required int32 lat = 3;
inline bool AbnormalCar::has_lat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AbnormalCar::clear_lat() {
  lat_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int32 AbnormalCar::lat() const {
  // @@protoc_insertion_point(field_get:vision.AbnormalCar.lat)
  return lat_;
}
inline void AbnormalCar::set_lat(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  lat_ = value;
  // @@protoc_insertion_point(field_set:vision.AbnormalCar.lat)
}

// optional int32 lane_id = 4;
inline bool AbnormalCar::has_lane_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AbnormalCar::clear_lane_id() {
  lane_id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::int32 AbnormalCar::lane_id() const {
  // @@protoc_insertion_point(field_get:vision.AbnormalCar.lane_id)
  return lane_id_;
}
inline void AbnormalCar::set_lane_id(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  lane_id_ = value;
  // @@protoc_insertion_point(field_set:vision.AbnormalCar.lane_id)
}

// optional int32 camera = 5;
inline bool AbnormalCar::has_camera() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AbnormalCar::clear_camera() {
  camera_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::int32 AbnormalCar::camera() const {
  // @@protoc_insertion_point(field_get:vision.AbnormalCar.camera)
  return camera_;
}
inline void AbnormalCar::set_camera(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  camera_ = value;
  // @@protoc_insertion_point(field_set:vision.AbnormalCar.camera)
}

// optional .vision.ABNORMALTYPE abnormal_type = 6;
inline bool AbnormalCar::has_abnormal_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AbnormalCar::clear_abnormal_type() {
  abnormal_type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::vision::ABNORMALTYPE AbnormalCar::abnormal_type() const {
  // @@protoc_insertion_point(field_get:vision.AbnormalCar.abnormal_type)
  return static_cast< ::vision::ABNORMALTYPE >(abnormal_type_);
}
inline void AbnormalCar::set_abnormal_type(::vision::ABNORMALTYPE value) {
  assert(::vision::ABNORMALTYPE_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  abnormal_type_ = value;
  // @@protoc_insertion_point(field_set:vision.AbnormalCar.abnormal_type)
}

// -------------------------------------------------------------------

// SpecialCar

// required int32 object_id = 1;
inline bool SpecialCar::has_object_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpecialCar::clear_object_id() {
  object_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::int32 SpecialCar::object_id() const {
  // @@protoc_insertion_point(field_get:vision.SpecialCar.object_id)
  return object_id_;
}
inline void SpecialCar::set_object_id(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  object_id_ = value;
  // @@protoc_insertion_point(field_set:vision.SpecialCar.object_id)
}

// required .vision.SpecialCar.SPECIALTYPE special_type = 2;
inline bool SpecialCar::has_special_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpecialCar::clear_special_type() {
  special_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::vision::SpecialCar_SPECIALTYPE SpecialCar::special_type() const {
  // @@protoc_insertion_point(field_get:vision.SpecialCar.special_type)
  return static_cast< ::vision::SpecialCar_SPECIALTYPE >(special_type_);
}
inline void SpecialCar::set_special_type(::vision::SpecialCar_SPECIALTYPE value) {
  assert(::vision::SpecialCar_SPECIALTYPE_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  special_type_ = value;
  // @@protoc_insertion_point(field_set:vision.SpecialCar.special_type)
}

// required int32 lng = 3;
inline bool SpecialCar::has_lng() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpecialCar::clear_lng() {
  lng_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int32 SpecialCar::lng() const {
  // @@protoc_insertion_point(field_get:vision.SpecialCar.lng)
  return lng_;
}
inline void SpecialCar::set_lng(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  lng_ = value;
  // @@protoc_insertion_point(field_set:vision.SpecialCar.lng)
}

// required int32 lat = 4;
inline bool SpecialCar::has_lat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpecialCar::clear_lat() {
  lat_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::int32 SpecialCar::lat() const {
  // @@protoc_insertion_point(field_get:vision.SpecialCar.lat)
  return lat_;
}
inline void SpecialCar::set_lat(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  lat_ = value;
  // @@protoc_insertion_point(field_set:vision.SpecialCar.lat)
}

// required int32 camera = 5;
inline bool SpecialCar::has_camera() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SpecialCar::clear_camera() {
  camera_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::int32 SpecialCar::camera() const {
  // @@protoc_insertion_point(field_get:vision.SpecialCar.camera)
  return camera_;
}
inline void SpecialCar::set_camera(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  camera_ = value;
  // @@protoc_insertion_point(field_set:vision.SpecialCar.camera)
}

// optional int32 lane_id = 6;
inline bool SpecialCar::has_lane_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SpecialCar::clear_lane_id() {
  lane_id_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::int32 SpecialCar::lane_id() const {
  // @@protoc_insertion_point(field_get:vision.SpecialCar.lane_id)
  return lane_id_;
}
inline void SpecialCar::set_lane_id(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  lane_id_ = value;
  // @@protoc_insertion_point(field_set:vision.SpecialCar.lane_id)
}

// optional int32 heading = 7;
inline bool SpecialCar::has_heading() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SpecialCar::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::int32 SpecialCar::heading() const {
  // @@protoc_insertion_point(field_get:vision.SpecialCar.heading)
  return heading_;
}
inline void SpecialCar::set_heading(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  heading_ = value;
  // @@protoc_insertion_point(field_set:vision.SpecialCar.heading)
}

// optional int32 lane_info = 8;
inline bool SpecialCar::has_lane_info() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SpecialCar::clear_lane_info() {
  lane_info_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::int32 SpecialCar::lane_info() const {
  // @@protoc_insertion_point(field_get:vision.SpecialCar.lane_info)
  return lane_info_;
}
inline void SpecialCar::set_lane_info(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  lane_info_ = value;
  // @@protoc_insertion_point(field_set:vision.SpecialCar.lane_info)
}

// -------------------------------------------------------------------

// AvailableArea

// required int32 object_id = 1;
inline bool AvailableArea::has_object_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AvailableArea::clear_object_id() {
  object_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::int32 AvailableArea::object_id() const {
  // @@protoc_insertion_point(field_get:vision.AvailableArea.object_id)
  return object_id_;
}
inline void AvailableArea::set_object_id(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  object_id_ = value;
  // @@protoc_insertion_point(field_set:vision.AvailableArea.object_id)
}

// required int32 lng1 = 2;
inline bool AvailableArea::has_lng1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AvailableArea::clear_lng1() {
  lng1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::int32 AvailableArea::lng1() const {
  // @@protoc_insertion_point(field_get:vision.AvailableArea.lng1)
  return lng1_;
}
inline void AvailableArea::set_lng1(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  lng1_ = value;
  // @@protoc_insertion_point(field_set:vision.AvailableArea.lng1)
}

// required int32 lat1 = 3;
inline bool AvailableArea::has_lat1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AvailableArea::clear_lat1() {
  lat1_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int32 AvailableArea::lat1() const {
  // @@protoc_insertion_point(field_get:vision.AvailableArea.lat1)
  return lat1_;
}
inline void AvailableArea::set_lat1(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  lat1_ = value;
  // @@protoc_insertion_point(field_set:vision.AvailableArea.lat1)
}

// required int32 lng2 = 4;
inline bool AvailableArea::has_lng2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AvailableArea::clear_lng2() {
  lng2_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::int32 AvailableArea::lng2() const {
  // @@protoc_insertion_point(field_get:vision.AvailableArea.lng2)
  return lng2_;
}
inline void AvailableArea::set_lng2(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  lng2_ = value;
  // @@protoc_insertion_point(field_set:vision.AvailableArea.lng2)
}

// required int32 lat2 = 5;
inline bool AvailableArea::has_lat2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AvailableArea::clear_lat2() {
  lat2_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::int32 AvailableArea::lat2() const {
  // @@protoc_insertion_point(field_get:vision.AvailableArea.lat2)
  return lat2_;
}
inline void AvailableArea::set_lat2(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  lat2_ = value;
  // @@protoc_insertion_point(field_set:vision.AvailableArea.lat2)
}

// required int32 lng3 = 6;
inline bool AvailableArea::has_lng3() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AvailableArea::clear_lng3() {
  lng3_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::int32 AvailableArea::lng3() const {
  // @@protoc_insertion_point(field_get:vision.AvailableArea.lng3)
  return lng3_;
}
inline void AvailableArea::set_lng3(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  lng3_ = value;
  // @@protoc_insertion_point(field_set:vision.AvailableArea.lng3)
}

// required int32 lat3 = 7;
inline bool AvailableArea::has_lat3() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AvailableArea::clear_lat3() {
  lat3_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::int32 AvailableArea::lat3() const {
  // @@protoc_insertion_point(field_get:vision.AvailableArea.lat3)
  return lat3_;
}
inline void AvailableArea::set_lat3(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  lat3_ = value;
  // @@protoc_insertion_point(field_set:vision.AvailableArea.lat3)
}

// required int32 lng4 = 8;
inline bool AvailableArea::has_lng4() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AvailableArea::clear_lng4() {
  lng4_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::int32 AvailableArea::lng4() const {
  // @@protoc_insertion_point(field_get:vision.AvailableArea.lng4)
  return lng4_;
}
inline void AvailableArea::set_lng4(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  lng4_ = value;
  // @@protoc_insertion_point(field_set:vision.AvailableArea.lng4)
}

// required int32 lat4 = 9;
inline bool AvailableArea::has_lat4() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AvailableArea::clear_lat4() {
  lat4_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::int32 AvailableArea::lat4() const {
  // @@protoc_insertion_point(field_get:vision.AvailableArea.lat4)
  return lat4_;
}
inline void AvailableArea::set_lat4(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  lat4_ = value;
  // @@protoc_insertion_point(field_set:vision.AvailableArea.lat4)
}

// required int32 camera = 10;
inline bool AvailableArea::has_camera() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AvailableArea::clear_camera() {
  camera_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::int32 AvailableArea::camera() const {
  // @@protoc_insertion_point(field_get:vision.AvailableArea.camera)
  return camera_;
}
inline void AvailableArea::set_camera(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  camera_ = value;
  // @@protoc_insertion_point(field_set:vision.AvailableArea.camera)
}

// optional int32 lane_id = 11;
inline bool AvailableArea::has_lane_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AvailableArea::clear_lane_id() {
  lane_id_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::google::protobuf::int32 AvailableArea::lane_id() const {
  // @@protoc_insertion_point(field_get:vision.AvailableArea.lane_id)
  return lane_id_;
}
inline void AvailableArea::set_lane_id(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  lane_id_ = value;
  // @@protoc_insertion_point(field_set:vision.AvailableArea.lane_id)
}

// optional int32 heading = 12;
inline bool AvailableArea::has_heading() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AvailableArea::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::google::protobuf::int32 AvailableArea::heading() const {
  // @@protoc_insertion_point(field_get:vision.AvailableArea.heading)
  return heading_;
}
inline void AvailableArea::set_heading(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  heading_ = value;
  // @@protoc_insertion_point(field_set:vision.AvailableArea.heading)
}

// -------------------------------------------------------------------

// JamInfo

// required uint32 vehicle_num = 1;
inline bool JamInfo::has_vehicle_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JamInfo::clear_vehicle_num() {
  vehicle_num_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 JamInfo::vehicle_num() const {
  // @@protoc_insertion_point(field_get:vision.JamInfo.vehicle_num)
  return vehicle_num_;
}
inline void JamInfo::set_vehicle_num(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  vehicle_num_ = value;
  // @@protoc_insertion_point(field_set:vision.JamInfo.vehicle_num)
}

// required double vehicle_avg_speed = 2;
inline bool JamInfo::has_vehicle_avg_speed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JamInfo::clear_vehicle_avg_speed() {
  vehicle_avg_speed_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double JamInfo::vehicle_avg_speed() const {
  // @@protoc_insertion_point(field_get:vision.JamInfo.vehicle_avg_speed)
  return vehicle_avg_speed_;
}
inline void JamInfo::set_vehicle_avg_speed(double value) {
  _has_bits_[0] |= 0x00000001u;
  vehicle_avg_speed_ = value;
  // @@protoc_insertion_point(field_set:vision.JamInfo.vehicle_avg_speed)
}

// required double road_yaw = 3;
inline bool JamInfo::has_road_yaw() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JamInfo::clear_road_yaw() {
  road_yaw_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double JamInfo::road_yaw() const {
  // @@protoc_insertion_point(field_get:vision.JamInfo.road_yaw)
  return road_yaw_;
}
inline void JamInfo::set_road_yaw(double value) {
  _has_bits_[0] |= 0x00000002u;
  road_yaw_ = value;
  // @@protoc_insertion_point(field_set:vision.JamInfo.road_yaw)
}

// repeated int32 vehicle_flow = 4;
inline int JamInfo::vehicle_flow_size() const {
  return vehicle_flow_.size();
}
inline void JamInfo::clear_vehicle_flow() {
  vehicle_flow_.Clear();
}
inline ::google::protobuf::int32 JamInfo::vehicle_flow(int index) const {
  // @@protoc_insertion_point(field_get:vision.JamInfo.vehicle_flow)
  return vehicle_flow_.Get(index);
}
inline void JamInfo::set_vehicle_flow(int index, ::google::protobuf::int32 value) {
  vehicle_flow_.Set(index, value);
  // @@protoc_insertion_point(field_set:vision.JamInfo.vehicle_flow)
}
inline void JamInfo::add_vehicle_flow(::google::protobuf::int32 value) {
  vehicle_flow_.Add(value);
  // @@protoc_insertion_point(field_add:vision.JamInfo.vehicle_flow)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
JamInfo::vehicle_flow() const {
  // @@protoc_insertion_point(field_list:vision.JamInfo.vehicle_flow)
  return vehicle_flow_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
JamInfo::mutable_vehicle_flow() {
  // @@protoc_insertion_point(field_mutable_list:vision.JamInfo.vehicle_flow)
  return &vehicle_flow_;
}

// optional int32 lane_id = 5;
inline bool JamInfo::has_lane_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JamInfo::clear_lane_id() {
  lane_id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::int32 JamInfo::lane_id() const {
  // @@protoc_insertion_point(field_get:vision.JamInfo.lane_id)
  return lane_id_;
}
inline void JamInfo::set_lane_id(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  lane_id_ = value;
  // @@protoc_insertion_point(field_set:vision.JamInfo.lane_id)
}

// -------------------------------------------------------------------

// FlowInfo

// optional int32 camera = 1;
inline bool FlowInfo::has_camera() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlowInfo::clear_camera() {
  camera_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::int32 FlowInfo::camera() const {
  // @@protoc_insertion_point(field_get:vision.FlowInfo.camera)
  return camera_;
}
inline void FlowInfo::set_camera(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  camera_ = value;
  // @@protoc_insertion_point(field_set:vision.FlowInfo.camera)
}

// repeated uint32 vehicle_num = 2;
inline int FlowInfo::vehicle_num_size() const {
  return vehicle_num_.size();
}
inline void FlowInfo::clear_vehicle_num() {
  vehicle_num_.Clear();
}
inline ::google::protobuf::uint32 FlowInfo::vehicle_num(int index) const {
  // @@protoc_insertion_point(field_get:vision.FlowInfo.vehicle_num)
  return vehicle_num_.Get(index);
}
inline void FlowInfo::set_vehicle_num(int index, ::google::protobuf::uint32 value) {
  vehicle_num_.Set(index, value);
  // @@protoc_insertion_point(field_set:vision.FlowInfo.vehicle_num)
}
inline void FlowInfo::add_vehicle_num(::google::protobuf::uint32 value) {
  vehicle_num_.Add(value);
  // @@protoc_insertion_point(field_add:vision.FlowInfo.vehicle_num)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FlowInfo::vehicle_num() const {
  // @@protoc_insertion_point(field_list:vision.FlowInfo.vehicle_num)
  return vehicle_num_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FlowInfo::mutable_vehicle_num() {
  // @@protoc_insertion_point(field_mutable_list:vision.FlowInfo.vehicle_num)
  return &vehicle_num_;
}

// repeated uint32 pass_num = 3;
inline int FlowInfo::pass_num_size() const {
  return pass_num_.size();
}
inline void FlowInfo::clear_pass_num() {
  pass_num_.Clear();
}
inline ::google::protobuf::uint32 FlowInfo::pass_num(int index) const {
  // @@protoc_insertion_point(field_get:vision.FlowInfo.pass_num)
  return pass_num_.Get(index);
}
inline void FlowInfo::set_pass_num(int index, ::google::protobuf::uint32 value) {
  pass_num_.Set(index, value);
  // @@protoc_insertion_point(field_set:vision.FlowInfo.pass_num)
}
inline void FlowInfo::add_pass_num(::google::protobuf::uint32 value) {
  pass_num_.Add(value);
  // @@protoc_insertion_point(field_add:vision.FlowInfo.pass_num)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FlowInfo::pass_num() const {
  // @@protoc_insertion_point(field_list:vision.FlowInfo.pass_num)
  return pass_num_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FlowInfo::mutable_pass_num() {
  // @@protoc_insertion_point(field_mutable_list:vision.FlowInfo.pass_num)
  return &pass_num_;
}

// optional .vision.FlowInfo.TrafficSig signal = 4;
inline bool FlowInfo::has_signal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FlowInfo::clear_signal() {
  signal_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::vision::FlowInfo_TrafficSig FlowInfo::signal() const {
  // @@protoc_insertion_point(field_get:vision.FlowInfo.signal)
  return static_cast< ::vision::FlowInfo_TrafficSig >(signal_);
}
inline void FlowInfo::set_signal(::vision::FlowInfo_TrafficSig value) {
  assert(::vision::FlowInfo_TrafficSig_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  signal_ = value;
  // @@protoc_insertion_point(field_set:vision.FlowInfo.signal)
}

// -------------------------------------------------------------------

// Base

// required .vision.ID id = 1;
inline bool Base::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Base::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::vision::ID Base::id() const {
  // @@protoc_insertion_point(field_get:vision.Base.id)
  return static_cast< ::vision::ID >(id_);
}
inline void Base::set_id(::vision::ID value) {
  assert(::vision::ID_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:vision.Base.id)
}

// -------------------------------------------------------------------

// Crowd

// required .vision.ID id = 1;
inline bool Crowd::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Crowd::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::vision::ID Crowd::id() const {
  // @@protoc_insertion_point(field_get:vision.Crowd.id)
  return static_cast< ::vision::ID >(id_);
}
inline void Crowd::set_id(::vision::ID value) {
  assert(::vision::ID_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
  // @@protoc_insertion_point(field_set:vision.Crowd.id)
}

// repeated .vision.Pedestrian pedestrian = 2;
inline int Crowd::pedestrian_size() const {
  return pedestrian_.size();
}
inline void Crowd::clear_pedestrian() {
  pedestrian_.Clear();
}
inline ::vision::Pedestrian* Crowd::mutable_pedestrian(int index) {
  // @@protoc_insertion_point(field_mutable:vision.Crowd.pedestrian)
  return pedestrian_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::vision::Pedestrian >*
Crowd::mutable_pedestrian() {
  // @@protoc_insertion_point(field_mutable_list:vision.Crowd.pedestrian)
  return &pedestrian_;
}
inline const ::vision::Pedestrian& Crowd::pedestrian(int index) const {
  // @@protoc_insertion_point(field_get:vision.Crowd.pedestrian)
  return pedestrian_.Get(index);
}
inline ::vision::Pedestrian* Crowd::add_pedestrian() {
  // @@protoc_insertion_point(field_add:vision.Crowd.pedestrian)
  return pedestrian_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vision::Pedestrian >&
Crowd::pedestrian() const {
  // @@protoc_insertion_point(field_list:vision.Crowd.pedestrian)
  return pedestrian_;
}

// optional .vision.data_time time = 3;
inline bool Crowd::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Crowd::clear_time() {
  if (time_ != nullptr) time_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::vision::data_time& Crowd::time() const {
  const ::vision::data_time* p = time_;
  // @@protoc_insertion_point(field_get:vision.Crowd.time)
  return p != nullptr ? *p : *reinterpret_cast<const ::vision::data_time*>(
      &::vision::_data_time_default_instance_);
}
inline ::vision::data_time* Crowd::release_time() {
  // @@protoc_insertion_point(field_release:vision.Crowd.time)
  _has_bits_[0] &= ~0x00000001u;
  ::vision::data_time* temp = time_;
  time_ = nullptr;
  return temp;
}
inline ::vision::data_time* Crowd::mutable_time() {
  _has_bits_[0] |= 0x00000001u;
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<::vision::data_time>(GetArenaNoVirtual());
    time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:vision.Crowd.time)
  return time_;
}
inline void Crowd::set_allocated_time(::vision::data_time* time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete time_;
  }
  if (time) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:vision.Crowd.time)
}

// -------------------------------------------------------------------

// Obstacles

// required .vision.ID id = 1;
inline bool Obstacles::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Obstacles::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::vision::ID Obstacles::id() const {
  // @@protoc_insertion_point(field_get:vision.Obstacles.id)
  return static_cast< ::vision::ID >(id_);
}
inline void Obstacles::set_id(::vision::ID value) {
  assert(::vision::ID_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
  // @@protoc_insertion_point(field_set:vision.Obstacles.id)
}

// repeated .vision.Obstacle array = 2;
inline int Obstacles::array_size() const {
  return array_.size();
}
inline void Obstacles::clear_array() {
  array_.Clear();
}
inline ::vision::Obstacle* Obstacles::mutable_array(int index) {
  // @@protoc_insertion_point(field_mutable:vision.Obstacles.array)
  return array_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::vision::Obstacle >*
Obstacles::mutable_array() {
  // @@protoc_insertion_point(field_mutable_list:vision.Obstacles.array)
  return &array_;
}
inline const ::vision::Obstacle& Obstacles::array(int index) const {
  // @@protoc_insertion_point(field_get:vision.Obstacles.array)
  return array_.Get(index);
}
inline ::vision::Obstacle* Obstacles::add_array() {
  // @@protoc_insertion_point(field_add:vision.Obstacles.array)
  return array_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vision::Obstacle >&
Obstacles::array() const {
  // @@protoc_insertion_point(field_list:vision.Obstacles.array)
  return array_;
}

// optional .vision.data_time time = 3;
inline bool Obstacles::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Obstacles::clear_time() {
  if (time_ != nullptr) time_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::vision::data_time& Obstacles::time() const {
  const ::vision::data_time* p = time_;
  // @@protoc_insertion_point(field_get:vision.Obstacles.time)
  return p != nullptr ? *p : *reinterpret_cast<const ::vision::data_time*>(
      &::vision::_data_time_default_instance_);
}
inline ::vision::data_time* Obstacles::release_time() {
  // @@protoc_insertion_point(field_release:vision.Obstacles.time)
  _has_bits_[0] &= ~0x00000001u;
  ::vision::data_time* temp = time_;
  time_ = nullptr;
  return temp;
}
inline ::vision::data_time* Obstacles::mutable_time() {
  _has_bits_[0] |= 0x00000001u;
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<::vision::data_time>(GetArenaNoVirtual());
    time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:vision.Obstacles.time)
  return time_;
}
inline void Obstacles::set_allocated_time(::vision::data_time* time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete time_;
  }
  if (time) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:vision.Obstacles.time)
}

// -------------------------------------------------------------------

// AvailableAreas

// required .vision.ID id = 1;
inline bool AvailableAreas::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AvailableAreas::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::vision::ID AvailableAreas::id() const {
  // @@protoc_insertion_point(field_get:vision.AvailableAreas.id)
  return static_cast< ::vision::ID >(id_);
}
inline void AvailableAreas::set_id(::vision::ID value) {
  assert(::vision::ID_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
  // @@protoc_insertion_point(field_set:vision.AvailableAreas.id)
}

// repeated .vision.AvailableArea area = 2;
inline int AvailableAreas::area_size() const {
  return area_.size();
}
inline void AvailableAreas::clear_area() {
  area_.Clear();
}
inline ::vision::AvailableArea* AvailableAreas::mutable_area(int index) {
  // @@protoc_insertion_point(field_mutable:vision.AvailableAreas.area)
  return area_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::vision::AvailableArea >*
AvailableAreas::mutable_area() {
  // @@protoc_insertion_point(field_mutable_list:vision.AvailableAreas.area)
  return &area_;
}
inline const ::vision::AvailableArea& AvailableAreas::area(int index) const {
  // @@protoc_insertion_point(field_get:vision.AvailableAreas.area)
  return area_.Get(index);
}
inline ::vision::AvailableArea* AvailableAreas::add_area() {
  // @@protoc_insertion_point(field_add:vision.AvailableAreas.area)
  return area_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vision::AvailableArea >&
AvailableAreas::area() const {
  // @@protoc_insertion_point(field_list:vision.AvailableAreas.area)
  return area_;
}

// optional .vision.data_time time = 3;
inline bool AvailableAreas::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AvailableAreas::clear_time() {
  if (time_ != nullptr) time_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::vision::data_time& AvailableAreas::time() const {
  const ::vision::data_time* p = time_;
  // @@protoc_insertion_point(field_get:vision.AvailableAreas.time)
  return p != nullptr ? *p : *reinterpret_cast<const ::vision::data_time*>(
      &::vision::_data_time_default_instance_);
}
inline ::vision::data_time* AvailableAreas::release_time() {
  // @@protoc_insertion_point(field_release:vision.AvailableAreas.time)
  _has_bits_[0] &= ~0x00000001u;
  ::vision::data_time* temp = time_;
  time_ = nullptr;
  return temp;
}
inline ::vision::data_time* AvailableAreas::mutable_time() {
  _has_bits_[0] |= 0x00000001u;
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<::vision::data_time>(GetArenaNoVirtual());
    time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:vision.AvailableAreas.time)
  return time_;
}
inline void AvailableAreas::set_allocated_time(::vision::data_time* time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete time_;
  }
  if (time) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:vision.AvailableAreas.time)
}

// -------------------------------------------------------------------

// IllegalCarWarn

// required .vision.ID id = 1;
inline bool IllegalCarWarn::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IllegalCarWarn::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::vision::ID IllegalCarWarn::id() const {
  // @@protoc_insertion_point(field_get:vision.IllegalCarWarn.id)
  return static_cast< ::vision::ID >(id_);
}
inline void IllegalCarWarn::set_id(::vision::ID value) {
  assert(::vision::ID_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
  // @@protoc_insertion_point(field_set:vision.IllegalCarWarn.id)
}

// repeated .vision.AbnormalCar array = 2;
inline int IllegalCarWarn::array_size() const {
  return array_.size();
}
inline void IllegalCarWarn::clear_array() {
  array_.Clear();
}
inline ::vision::AbnormalCar* IllegalCarWarn::mutable_array(int index) {
  // @@protoc_insertion_point(field_mutable:vision.IllegalCarWarn.array)
  return array_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::vision::AbnormalCar >*
IllegalCarWarn::mutable_array() {
  // @@protoc_insertion_point(field_mutable_list:vision.IllegalCarWarn.array)
  return &array_;
}
inline const ::vision::AbnormalCar& IllegalCarWarn::array(int index) const {
  // @@protoc_insertion_point(field_get:vision.IllegalCarWarn.array)
  return array_.Get(index);
}
inline ::vision::AbnormalCar* IllegalCarWarn::add_array() {
  // @@protoc_insertion_point(field_add:vision.IllegalCarWarn.array)
  return array_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vision::AbnormalCar >&
IllegalCarWarn::array() const {
  // @@protoc_insertion_point(field_list:vision.IllegalCarWarn.array)
  return array_;
}

// optional .vision.data_time time = 3;
inline bool IllegalCarWarn::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IllegalCarWarn::clear_time() {
  if (time_ != nullptr) time_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::vision::data_time& IllegalCarWarn::time() const {
  const ::vision::data_time* p = time_;
  // @@protoc_insertion_point(field_get:vision.IllegalCarWarn.time)
  return p != nullptr ? *p : *reinterpret_cast<const ::vision::data_time*>(
      &::vision::_data_time_default_instance_);
}
inline ::vision::data_time* IllegalCarWarn::release_time() {
  // @@protoc_insertion_point(field_release:vision.IllegalCarWarn.time)
  _has_bits_[0] &= ~0x00000001u;
  ::vision::data_time* temp = time_;
  time_ = nullptr;
  return temp;
}
inline ::vision::data_time* IllegalCarWarn::mutable_time() {
  _has_bits_[0] |= 0x00000001u;
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<::vision::data_time>(GetArenaNoVirtual());
    time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:vision.IllegalCarWarn.time)
  return time_;
}
inline void IllegalCarWarn::set_allocated_time(::vision::data_time* time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete time_;
  }
  if (time) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:vision.IllegalCarWarn.time)
}

// -------------------------------------------------------------------

// Visibility

// required .vision.ID id = 1;
inline bool Visibility::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Visibility::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::vision::ID Visibility::id() const {
  // @@protoc_insertion_point(field_get:vision.Visibility.id)
  return static_cast< ::vision::ID >(id_);
}
inline void Visibility::set_id(::vision::ID value) {
  assert(::vision::ID_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
  // @@protoc_insertion_point(field_set:vision.Visibility.id)
}

// required double distance = 2;
inline bool Visibility::has_distance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Visibility::clear_distance() {
  distance_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Visibility::distance() const {
  // @@protoc_insertion_point(field_get:vision.Visibility.distance)
  return distance_;
}
inline void Visibility::set_distance(double value) {
  _has_bits_[0] |= 0x00000001u;
  distance_ = value;
  // @@protoc_insertion_point(field_set:vision.Visibility.distance)
}

// required int32 level = 3;
inline bool Visibility::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Visibility::clear_level() {
  level_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int32 Visibility::level() const {
  // @@protoc_insertion_point(field_get:vision.Visibility.level)
  return level_;
}
inline void Visibility::set_level(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  level_ = value;
  // @@protoc_insertion_point(field_set:vision.Visibility.level)
}

// -------------------------------------------------------------------

// SmokeWarn

// required .vision.ID id = 1;
inline bool SmokeWarn::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SmokeWarn::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::vision::ID SmokeWarn::id() const {
  // @@protoc_insertion_point(field_get:vision.SmokeWarn.id)
  return static_cast< ::vision::ID >(id_);
}
inline void SmokeWarn::set_id(::vision::ID value) {
  assert(::vision::ID_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:vision.SmokeWarn.id)
}

// required bool warn = 2;
inline bool SmokeWarn::has_warn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SmokeWarn::clear_warn() {
  warn_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool SmokeWarn::warn() const {
  // @@protoc_insertion_point(field_get:vision.SmokeWarn.warn)
  return warn_;
}
inline void SmokeWarn::set_warn(bool value) {
  _has_bits_[0] |= 0x00000002u;
  warn_ = value;
  // @@protoc_insertion_point(field_set:vision.SmokeWarn.warn)
}

// -------------------------------------------------------------------

// TrafficJam

// required .vision.ID id = 1;
inline bool TrafficJam::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrafficJam::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::vision::ID TrafficJam::id() const {
  // @@protoc_insertion_point(field_get:vision.TrafficJam.id)
  return static_cast< ::vision::ID >(id_);
}
inline void TrafficJam::set_id(::vision::ID value) {
  assert(::vision::ID_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
  // @@protoc_insertion_point(field_set:vision.TrafficJam.id)
}

// repeated .vision.JamInfo jam = 2;
inline int TrafficJam::jam_size() const {
  return jam_.size();
}
inline void TrafficJam::clear_jam() {
  jam_.Clear();
}
inline ::vision::JamInfo* TrafficJam::mutable_jam(int index) {
  // @@protoc_insertion_point(field_mutable:vision.TrafficJam.jam)
  return jam_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::vision::JamInfo >*
TrafficJam::mutable_jam() {
  // @@protoc_insertion_point(field_mutable_list:vision.TrafficJam.jam)
  return &jam_;
}
inline const ::vision::JamInfo& TrafficJam::jam(int index) const {
  // @@protoc_insertion_point(field_get:vision.TrafficJam.jam)
  return jam_.Get(index);
}
inline ::vision::JamInfo* TrafficJam::add_jam() {
  // @@protoc_insertion_point(field_add:vision.TrafficJam.jam)
  return jam_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vision::JamInfo >&
TrafficJam::jam() const {
  // @@protoc_insertion_point(field_list:vision.TrafficJam.jam)
  return jam_;
}

// optional .vision.data_time time = 3;
inline bool TrafficJam::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrafficJam::clear_time() {
  if (time_ != nullptr) time_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::vision::data_time& TrafficJam::time() const {
  const ::vision::data_time* p = time_;
  // @@protoc_insertion_point(field_get:vision.TrafficJam.time)
  return p != nullptr ? *p : *reinterpret_cast<const ::vision::data_time*>(
      &::vision::_data_time_default_instance_);
}
inline ::vision::data_time* TrafficJam::release_time() {
  // @@protoc_insertion_point(field_release:vision.TrafficJam.time)
  _has_bits_[0] &= ~0x00000001u;
  ::vision::data_time* temp = time_;
  time_ = nullptr;
  return temp;
}
inline ::vision::data_time* TrafficJam::mutable_time() {
  _has_bits_[0] |= 0x00000001u;
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<::vision::data_time>(GetArenaNoVirtual());
    time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:vision.TrafficJam.time)
  return time_;
}
inline void TrafficJam::set_allocated_time(::vision::data_time* time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete time_;
  }
  if (time) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:vision.TrafficJam.time)
}

// -------------------------------------------------------------------

// TrafficFlow

// required .vision.ID id = 1;
inline bool TrafficFlow::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrafficFlow::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::vision::ID TrafficFlow::id() const {
  // @@protoc_insertion_point(field_get:vision.TrafficFlow.id)
  return static_cast< ::vision::ID >(id_);
}
inline void TrafficFlow::set_id(::vision::ID value) {
  assert(::vision::ID_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
  // @@protoc_insertion_point(field_set:vision.TrafficFlow.id)
}

// repeated .vision.FlowInfo flow = 2;
inline int TrafficFlow::flow_size() const {
  return flow_.size();
}
inline void TrafficFlow::clear_flow() {
  flow_.Clear();
}
inline ::vision::FlowInfo* TrafficFlow::mutable_flow(int index) {
  // @@protoc_insertion_point(field_mutable:vision.TrafficFlow.flow)
  return flow_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::vision::FlowInfo >*
TrafficFlow::mutable_flow() {
  // @@protoc_insertion_point(field_mutable_list:vision.TrafficFlow.flow)
  return &flow_;
}
inline const ::vision::FlowInfo& TrafficFlow::flow(int index) const {
  // @@protoc_insertion_point(field_get:vision.TrafficFlow.flow)
  return flow_.Get(index);
}
inline ::vision::FlowInfo* TrafficFlow::add_flow() {
  // @@protoc_insertion_point(field_add:vision.TrafficFlow.flow)
  return flow_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vision::FlowInfo >&
TrafficFlow::flow() const {
  // @@protoc_insertion_point(field_list:vision.TrafficFlow.flow)
  return flow_;
}

// optional .vision.data_time time_begin = 3;
inline bool TrafficFlow::has_time_begin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrafficFlow::clear_time_begin() {
  if (time_begin_ != nullptr) time_begin_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::vision::data_time& TrafficFlow::time_begin() const {
  const ::vision::data_time* p = time_begin_;
  // @@protoc_insertion_point(field_get:vision.TrafficFlow.time_begin)
  return p != nullptr ? *p : *reinterpret_cast<const ::vision::data_time*>(
      &::vision::_data_time_default_instance_);
}
inline ::vision::data_time* TrafficFlow::release_time_begin() {
  // @@protoc_insertion_point(field_release:vision.TrafficFlow.time_begin)
  _has_bits_[0] &= ~0x00000001u;
  ::vision::data_time* temp = time_begin_;
  time_begin_ = nullptr;
  return temp;
}
inline ::vision::data_time* TrafficFlow::mutable_time_begin() {
  _has_bits_[0] |= 0x00000001u;
  if (time_begin_ == nullptr) {
    auto* p = CreateMaybeMessage<::vision::data_time>(GetArenaNoVirtual());
    time_begin_ = p;
  }
  // @@protoc_insertion_point(field_mutable:vision.TrafficFlow.time_begin)
  return time_begin_;
}
inline void TrafficFlow::set_allocated_time_begin(::vision::data_time* time_begin) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete time_begin_;
  }
  if (time_begin) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      time_begin = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time_begin, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  time_begin_ = time_begin;
  // @@protoc_insertion_point(field_set_allocated:vision.TrafficFlow.time_begin)
}

// optional .vision.data_time time_end = 4;
inline bool TrafficFlow::has_time_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrafficFlow::clear_time_end() {
  if (time_end_ != nullptr) time_end_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::vision::data_time& TrafficFlow::time_end() const {
  const ::vision::data_time* p = time_end_;
  // @@protoc_insertion_point(field_get:vision.TrafficFlow.time_end)
  return p != nullptr ? *p : *reinterpret_cast<const ::vision::data_time*>(
      &::vision::_data_time_default_instance_);
}
inline ::vision::data_time* TrafficFlow::release_time_end() {
  // @@protoc_insertion_point(field_release:vision.TrafficFlow.time_end)
  _has_bits_[0] &= ~0x00000002u;
  ::vision::data_time* temp = time_end_;
  time_end_ = nullptr;
  return temp;
}
inline ::vision::data_time* TrafficFlow::mutable_time_end() {
  _has_bits_[0] |= 0x00000002u;
  if (time_end_ == nullptr) {
    auto* p = CreateMaybeMessage<::vision::data_time>(GetArenaNoVirtual());
    time_end_ = p;
  }
  // @@protoc_insertion_point(field_mutable:vision.TrafficFlow.time_end)
  return time_end_;
}
inline void TrafficFlow::set_allocated_time_end(::vision::data_time* time_end) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete time_end_;
  }
  if (time_end) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      time_end = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time_end, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  time_end_ = time_end;
  // @@protoc_insertion_point(field_set_allocated:vision.TrafficFlow.time_end)
}

// -------------------------------------------------------------------

// IceWarn

// required .vision.ID id = 1;
inline bool IceWarn::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IceWarn::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::vision::ID IceWarn::id() const {
  // @@protoc_insertion_point(field_get:vision.IceWarn.id)
  return static_cast< ::vision::ID >(id_);
}
inline void IceWarn::set_id(::vision::ID value) {
  assert(::vision::ID_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:vision.IceWarn.id)
}

// required bool warn = 2;
inline bool IceWarn::has_warn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IceWarn::clear_warn() {
  warn_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool IceWarn::warn() const {
  // @@protoc_insertion_point(field_get:vision.IceWarn.warn)
  return warn_;
}
inline void IceWarn::set_warn(bool value) {
  _has_bits_[0] |= 0x00000002u;
  warn_ = value;
  // @@protoc_insertion_point(field_set:vision.IceWarn.warn)
}

// -------------------------------------------------------------------

// LaneWare

// required .vision.ID id = 1;
inline bool LaneWare::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaneWare::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::vision::ID LaneWare::id() const {
  // @@protoc_insertion_point(field_get:vision.LaneWare.id)
  return static_cast< ::vision::ID >(id_);
}
inline void LaneWare::set_id(::vision::ID value) {
  assert(::vision::ID_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:vision.LaneWare.id)
}

// required .vision.LaneWare.WARETYPE ware_type = 2;
inline bool LaneWare::has_ware_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LaneWare::clear_ware_type() {
  ware_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::vision::LaneWare_WARETYPE LaneWare::ware_type() const {
  // @@protoc_insertion_point(field_get:vision.LaneWare.ware_type)
  return static_cast< ::vision::LaneWare_WARETYPE >(ware_type_);
}
inline void LaneWare::set_ware_type(::vision::LaneWare_WARETYPE value) {
  assert(::vision::LaneWare_WARETYPE_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  ware_type_ = value;
  // @@protoc_insertion_point(field_set:vision.LaneWare.ware_type)
}

// required int32 lng1 = 3;
inline bool LaneWare::has_lng1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LaneWare::clear_lng1() {
  lng1_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int32 LaneWare::lng1() const {
  // @@protoc_insertion_point(field_get:vision.LaneWare.lng1)
  return lng1_;
}
inline void LaneWare::set_lng1(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  lng1_ = value;
  // @@protoc_insertion_point(field_set:vision.LaneWare.lng1)
}

// required int32 lat1 = 4;
inline bool LaneWare::has_lat1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LaneWare::clear_lat1() {
  lat1_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::int32 LaneWare::lat1() const {
  // @@protoc_insertion_point(field_get:vision.LaneWare.lat1)
  return lat1_;
}
inline void LaneWare::set_lat1(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  lat1_ = value;
  // @@protoc_insertion_point(field_set:vision.LaneWare.lat1)
}

// required int32 lng2 = 5;
inline bool LaneWare::has_lng2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LaneWare::clear_lng2() {
  lng2_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::int32 LaneWare::lng2() const {
  // @@protoc_insertion_point(field_get:vision.LaneWare.lng2)
  return lng2_;
}
inline void LaneWare::set_lng2(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  lng2_ = value;
  // @@protoc_insertion_point(field_set:vision.LaneWare.lng2)
}

// required int32 lat2 = 6;
inline bool LaneWare::has_lat2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LaneWare::clear_lat2() {
  lat2_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::int32 LaneWare::lat2() const {
  // @@protoc_insertion_point(field_get:vision.LaneWare.lat2)
  return lat2_;
}
inline void LaneWare::set_lat2(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  lat2_ = value;
  // @@protoc_insertion_point(field_set:vision.LaneWare.lat2)
}

// optional int32 heading = 7;
inline bool LaneWare::has_heading() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LaneWare::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::int32 LaneWare::heading() const {
  // @@protoc_insertion_point(field_get:vision.LaneWare.heading)
  return heading_;
}
inline void LaneWare::set_heading(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  heading_ = value;
  // @@protoc_insertion_point(field_set:vision.LaneWare.heading)
}

// -------------------------------------------------------------------

// SpecialCarMsg

// required .vision.ID id = 1;
inline bool SpecialCarMsg::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpecialCarMsg::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::vision::ID SpecialCarMsg::id() const {
  // @@protoc_insertion_point(field_get:vision.SpecialCarMsg.id)
  return static_cast< ::vision::ID >(id_);
}
inline void SpecialCarMsg::set_id(::vision::ID value) {
  assert(::vision::ID_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
  // @@protoc_insertion_point(field_set:vision.SpecialCarMsg.id)
}

// repeated .vision.SpecialCar array = 2;
inline int SpecialCarMsg::array_size() const {
  return array_.size();
}
inline void SpecialCarMsg::clear_array() {
  array_.Clear();
}
inline ::vision::SpecialCar* SpecialCarMsg::mutable_array(int index) {
  // @@protoc_insertion_point(field_mutable:vision.SpecialCarMsg.array)
  return array_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::vision::SpecialCar >*
SpecialCarMsg::mutable_array() {
  // @@protoc_insertion_point(field_mutable_list:vision.SpecialCarMsg.array)
  return &array_;
}
inline const ::vision::SpecialCar& SpecialCarMsg::array(int index) const {
  // @@protoc_insertion_point(field_get:vision.SpecialCarMsg.array)
  return array_.Get(index);
}
inline ::vision::SpecialCar* SpecialCarMsg::add_array() {
  // @@protoc_insertion_point(field_add:vision.SpecialCarMsg.array)
  return array_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vision::SpecialCar >&
SpecialCarMsg::array() const {
  // @@protoc_insertion_point(field_list:vision.SpecialCarMsg.array)
  return array_;
}

// optional .vision.data_time time = 3;
inline bool SpecialCarMsg::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpecialCarMsg::clear_time() {
  if (time_ != nullptr) time_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::vision::data_time& SpecialCarMsg::time() const {
  const ::vision::data_time* p = time_;
  // @@protoc_insertion_point(field_get:vision.SpecialCarMsg.time)
  return p != nullptr ? *p : *reinterpret_cast<const ::vision::data_time*>(
      &::vision::_data_time_default_instance_);
}
inline ::vision::data_time* SpecialCarMsg::release_time() {
  // @@protoc_insertion_point(field_release:vision.SpecialCarMsg.time)
  _has_bits_[0] &= ~0x00000001u;
  ::vision::data_time* temp = time_;
  time_ = nullptr;
  return temp;
}
inline ::vision::data_time* SpecialCarMsg::mutable_time() {
  _has_bits_[0] |= 0x00000001u;
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<::vision::data_time>(GetArenaNoVirtual());
    time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:vision.SpecialCarMsg.time)
  return time_;
}
inline void SpecialCarMsg::set_allocated_time(::vision::data_time* time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete time_;
  }
  if (time) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:vision.SpecialCarMsg.time)
}

// -------------------------------------------------------------------

// Timestamp

// required int64 seconds = 1;
inline bool Timestamp::has_seconds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Timestamp::clear_seconds() {
  seconds_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::int64 Timestamp::seconds() const {
  // @@protoc_insertion_point(field_get:vision.Timestamp.seconds)
  return seconds_;
}
inline void Timestamp::set_seconds(::google::protobuf::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  seconds_ = value;
  // @@protoc_insertion_point(field_set:vision.Timestamp.seconds)
}

// required int32 nanos = 2;
inline bool Timestamp::has_nanos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Timestamp::clear_nanos() {
  nanos_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::int32 Timestamp::nanos() const {
  // @@protoc_insertion_point(field_get:vision.Timestamp.nanos)
  return nanos_;
}
inline void Timestamp::set_nanos(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  nanos_ = value;
  // @@protoc_insertion_point(field_set:vision.Timestamp.nanos)
}

// -------------------------------------------------------------------

// Detectobject

// required int32 object_id = 1;
inline bool Detectobject::has_object_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Detectobject::clear_object_id() {
  object_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::int32 Detectobject::object_id() const {
  // @@protoc_insertion_point(field_get:vision.Detectobject.object_id)
  return object_id_;
}
inline void Detectobject::set_object_id(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  object_id_ = value;
  // @@protoc_insertion_point(field_set:vision.Detectobject.object_id)
}

// required .vision.TYPE object_type = 2;
inline bool Detectobject::has_object_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Detectobject::clear_object_type() {
  object_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::vision::TYPE Detectobject::object_type() const {
  // @@protoc_insertion_point(field_get:vision.Detectobject.object_type)
  return static_cast< ::vision::TYPE >(object_type_);
}
inline void Detectobject::set_object_type(::vision::TYPE value) {
  assert(::vision::TYPE_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  object_type_ = value;
  // @@protoc_insertion_point(field_set:vision.Detectobject.object_type)
}

// required int32 longitudinalX = 3;
inline bool Detectobject::has_longitudinalx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Detectobject::clear_longitudinalx() {
  longitudinalx_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int32 Detectobject::longitudinalx() const {
  // @@protoc_insertion_point(field_get:vision.Detectobject.longitudinalX)
  return longitudinalx_;
}
inline void Detectobject::set_longitudinalx(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  longitudinalx_ = value;
  // @@protoc_insertion_point(field_set:vision.Detectobject.longitudinalX)
}

// required int32 lateralY = 4;
inline bool Detectobject::has_lateraly() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Detectobject::clear_lateraly() {
  lateraly_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::int32 Detectobject::lateraly() const {
  // @@protoc_insertion_point(field_get:vision.Detectobject.lateralY)
  return lateraly_;
}
inline void Detectobject::set_lateraly(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  lateraly_ = value;
  // @@protoc_insertion_point(field_set:vision.Detectobject.lateralY)
}

// required int32 velocity = 5;
inline bool Detectobject::has_velocity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Detectobject::clear_velocity() {
  velocity_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::int32 Detectobject::velocity() const {
  // @@protoc_insertion_point(field_get:vision.Detectobject.velocity)
  return velocity_;
}
inline void Detectobject::set_velocity(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  velocity_ = value;
  // @@protoc_insertion_point(field_set:vision.Detectobject.velocity)
}

// required int32 camera = 6;
inline bool Detectobject::has_camera() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Detectobject::clear_camera() {
  camera_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::int32 Detectobject::camera() const {
  // @@protoc_insertion_point(field_get:vision.Detectobject.camera)
  return camera_;
}
inline void Detectobject::set_camera(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  camera_ = value;
  // @@protoc_insertion_point(field_set:vision.Detectobject.camera)
}

// optional int32 if_at_lane = 7;
inline bool Detectobject::has_if_at_lane() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Detectobject::clear_if_at_lane() {
  if_at_lane_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::int32 Detectobject::if_at_lane() const {
  // @@protoc_insertion_point(field_get:vision.Detectobject.if_at_lane)
  return if_at_lane_;
}
inline void Detectobject::set_if_at_lane(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  if_at_lane_ = value;
  // @@protoc_insertion_point(field_set:vision.Detectobject.if_at_lane)
}

// optional int32 lane_id = 8;
inline bool Detectobject::has_lane_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Detectobject::clear_lane_id() {
  lane_id_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::int32 Detectobject::lane_id() const {
  // @@protoc_insertion_point(field_get:vision.Detectobject.lane_id)
  return lane_id_;
}
inline void Detectobject::set_lane_id(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  lane_id_ = value;
  // @@protoc_insertion_point(field_set:vision.Detectobject.lane_id)
}

// optional int32 heading = 9;
inline bool Detectobject::has_heading() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Detectobject::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::int32 Detectobject::heading() const {
  // @@protoc_insertion_point(field_get:vision.Detectobject.heading)
  return heading_;
}
inline void Detectobject::set_heading(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  heading_ = value;
  // @@protoc_insertion_point(field_set:vision.Detectobject.heading)
}

// optional int32 lane_info = 10;
inline bool Detectobject::has_lane_info() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Detectobject::clear_lane_info() {
  lane_info_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::int32 Detectobject::lane_info() const {
  // @@protoc_insertion_point(field_get:vision.Detectobject.lane_info)
  return lane_info_;
}
inline void Detectobject::set_lane_info(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  lane_info_ = value;
  // @@protoc_insertion_point(field_set:vision.Detectobject.lane_info)
}

// -------------------------------------------------------------------

// Detectobjects

// required .vision.ID id = 1;
inline bool Detectobjects::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Detectobjects::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::vision::ID Detectobjects::id() const {
  // @@protoc_insertion_point(field_get:vision.Detectobjects.id)
  return static_cast< ::vision::ID >(id_);
}
inline void Detectobjects::set_id(::vision::ID value) {
  assert(::vision::ID_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
  // @@protoc_insertion_point(field_set:vision.Detectobjects.id)
}

// repeated .vision.Detectobject object = 2;
inline int Detectobjects::object_size() const {
  return object_.size();
}
inline void Detectobjects::clear_object() {
  object_.Clear();
}
inline ::vision::Detectobject* Detectobjects::mutable_object(int index) {
  // @@protoc_insertion_point(field_mutable:vision.Detectobjects.object)
  return object_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::vision::Detectobject >*
Detectobjects::mutable_object() {
  // @@protoc_insertion_point(field_mutable_list:vision.Detectobjects.object)
  return &object_;
}
inline const ::vision::Detectobject& Detectobjects::object(int index) const {
  // @@protoc_insertion_point(field_get:vision.Detectobjects.object)
  return object_.Get(index);
}
inline ::vision::Detectobject* Detectobjects::add_object() {
  // @@protoc_insertion_point(field_add:vision.Detectobjects.object)
  return object_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vision::Detectobject >&
Detectobjects::object() const {
  // @@protoc_insertion_point(field_list:vision.Detectobjects.object)
  return object_;
}

// optional .vision.Timestamp time = 3;
inline bool Detectobjects::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Detectobjects::clear_time() {
  if (time_ != nullptr) time_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::vision::Timestamp& Detectobjects::time() const {
  const ::vision::Timestamp* p = time_;
  // @@protoc_insertion_point(field_get:vision.Detectobjects.time)
  return p != nullptr ? *p : *reinterpret_cast<const ::vision::Timestamp*>(
      &::vision::_Timestamp_default_instance_);
}
inline ::vision::Timestamp* Detectobjects::release_time() {
  // @@protoc_insertion_point(field_release:vision.Detectobjects.time)
  _has_bits_[0] &= ~0x00000001u;
  ::vision::Timestamp* temp = time_;
  time_ = nullptr;
  return temp;
}
inline ::vision::Timestamp* Detectobjects::mutable_time() {
  _has_bits_[0] |= 0x00000001u;
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<::vision::Timestamp>(GetArenaNoVirtual());
    time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:vision.Detectobjects.time)
  return time_;
}
inline void Detectobjects::set_allocated_time(::vision::Timestamp* time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete time_;
  }
  if (time) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:vision.Detectobjects.time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace vision

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::vision::SpecialCar_SPECIALTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vision::SpecialCar_SPECIALTYPE>() {
  return ::vision::SpecialCar_SPECIALTYPE_descriptor();
}
template <> struct is_proto_enum< ::vision::FlowInfo_TrafficSig> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vision::FlowInfo_TrafficSig>() {
  return ::vision::FlowInfo_TrafficSig_descriptor();
}
template <> struct is_proto_enum< ::vision::LaneWare_WARETYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vision::LaneWare_WARETYPE>() {
  return ::vision::LaneWare_WARETYPE_descriptor();
}
template <> struct is_proto_enum< ::vision::ID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vision::ID>() {
  return ::vision::ID_descriptor();
}
template <> struct is_proto_enum< ::vision::TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vision::TYPE>() {
  return ::vision::TYPE_descriptor();
}
template <> struct is_proto_enum< ::vision::ABNORMALTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vision::ABNORMALTYPE>() {
  return ::vision::ABNORMALTYPE_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_vision_2eproto
