/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: vision.proto */

#ifndef PROTOBUF_C_vision_2eproto__INCLUDED
#define PROTOBUF_C_vision_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Vision__DataTime Vision__DataTime;
typedef struct _Vision__Pedestrian Vision__Pedestrian;
typedef struct _Vision__Obstacle Vision__Obstacle;
typedef struct _Vision__AbnormalCar Vision__AbnormalCar;
typedef struct _Vision__SpecialCar Vision__SpecialCar;
typedef struct _Vision__AvailableArea Vision__AvailableArea;
typedef struct _Vision__JamInfo Vision__JamInfo;
typedef struct _Vision__FlowInfo Vision__FlowInfo;
typedef struct _Vision__Base Vision__Base;
typedef struct _Vision__Crowd Vision__Crowd;
typedef struct _Vision__Obstacles Vision__Obstacles;
typedef struct _Vision__AvailableAreas Vision__AvailableAreas;
typedef struct _Vision__IllegalCarWarn Vision__IllegalCarWarn;
typedef struct _Vision__Visibility Vision__Visibility;
typedef struct _Vision__SmokeWarn Vision__SmokeWarn;
typedef struct _Vision__Timestamp Vision__Timestamp;
typedef struct _Vision__Detectobject Vision__Detectobject;
typedef struct _Vision__Detectobjects Vision__Detectobjects;
typedef struct _Vision__TrafficJam Vision__TrafficJam;
typedef struct _Vision__TrafficFlow Vision__TrafficFlow;
typedef struct _Vision__IceWarn Vision__IceWarn;
typedef struct _Vision__LaneWare Vision__LaneWare;
typedef struct _Vision__SpecialCarMsg Vision__SpecialCarMsg;


/* --- enums --- */

typedef enum _Vision__SpecialCar__SPECIALTYPE {
  /*
   * 普通
   */
  VISION__SPECIAL_CAR__SPECIALTYPE__NORMAL = 0,
  /*
   * 救护车
   */
  VISION__SPECIAL_CAR__SPECIALTYPE__AMBULANCE = 1,
  /*
   * 危险品车辆
   */
  VISION__SPECIAL_CAR__SPECIALTYPE__DANGERCAR = 2,
  /*
   * 消防车
   */
  VISION__SPECIAL_CAR__SPECIALTYPE__FIREENGINE = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(VISION__SPECIAL_CAR__SPECIALTYPE)
} Vision__SpecialCar__SPECIALTYPE;
typedef enum _Vision__FlowInfo__TrafficSig {
  VISION__FLOW_INFO__TRAFFIC_SIG__UNKNOWN = 0,
  /*
   * 黄灯切换到绿灯信号
   */
  VISION__FLOW_INFO__TRAFFIC_SIG__Y2G = 1,
  /*
   * 消散时间结束信号
   */
  VISION__FLOW_INFO__TRAFFIC_SIG__OVER = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(VISION__FLOW_INFO__TRAFFIC_SIG)
} Vision__FlowInfo__TrafficSig;
typedef enum _Vision__LaneWare__WARETYPE {
  /*
   * 无用	
   */
  VISION__LANE_WARE__WARETYPE__DEFAULT = 0,
  /*
   * 实线（白）
   */
  VISION__LANE_WARE__WARETYPE__FULLLINE = 1,
  /*
   * 虚线
   */
  VISION__LANE_WARE__WARETYPE__DOTTEDLINE = 2,
  /*
   * 双黄线
   */
  VISION__LANE_WARE__WARETYPE__DOUBLEYELLOWLINE = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(VISION__LANE_WARE__WARETYPE)
} Vision__LaneWare__WARETYPE;
/*
 * 场景ID
 */
typedef enum _Vision__ID {
  /*
   * 无用
   */
  VISION__ID__DEFAULT = 0,
  /*
   * 行人与动物闯入检测
   */
  VISION__ID__PEDESTRIAN_D = 1,
  /*
   * 违章车辆1(违停)
   */
  VISION__ID__ILLEGAL_V1 = 2,
  /*
   * 白天能见度检测
   */
  VISION__ID__VISIBILITY = 3,
  /*
   * 可行驶区域检测	
   */
  VISION__ID__AVAILABLE_AREA = 4,
  /*
   * 异常车辆检测(静止)
   */
  VISION__ID__ABNORMAL_CAR = 5,
  /*
   * 违章车辆2(应急车道)
   */
  VISION__ID__ILLEGAL_V2 = 6,
  /*
   * 交通态势感知
   */
  VISION__ID__TRAFFIC_STATUS = 7,
  /*
   * 逆向行驶告警
   */
  VISION__ID__BACKWARD_DRIVING = 8,
  /*
   * 道路危险状况提醒(抛洒物)
   */
  VISION__ID__ROAD_DANGER = 9,
  /*
   * 隧道内火焰与烟雾预警
   */
  VISION__ID__FIRE_SMOKE = 10,
  /*
   * 检测目标数据
   */
  VISION__ID__DETECTOBJECTS = 11,
  /*
   * 前方拥堵提醒
   */
  VISION__ID__TRAFFIC_JAM = 12,
  /*
   * 动态配时场景
   */
  VISION__ID__TRAFFIC_FLOW = 13,
  /*
   * 特殊车辆
   */
  VISION__ID__SPECIALCAR = 14,
  /*
   * 交通事故
   */
  VISION__ID__ACCIDENT = 15,
  /*
   * 结冰
   */
  VISION__ID__ICEWARN = 16,
  /*
   * 车道线磨损
   */
  VISION__ID__LANE_WARE = 17
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(VISION__ID)
} Vision__ID;
/*
 * 视觉捕捉到的物体类型
 */
typedef enum _Vision__TYPE {
  /*
   * 其他
   */
  VISION__TYPE__OTHERS = 0,
  /*
   * 人
   */
  VISION__TYPE__HUMAN = 1,
  /*
   * 车
   */
  VISION__TYPE__VEHICLE = 2,
  /*
   * 摩托车
   */
  VISION__TYPE__MOTORCYCLE = 3,
  /*
   * 动物
   */
  VISION__TYPE__ANIMAL = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(VISION__TYPE)
} Vision__TYPE;
typedef enum _Vision__ABNORMALTYPE {
  /*
   * 无用
   */
  VISION__ABNORMALTYPE__DEFAULT_A = 0,
  /*
   * 静止车辆（主道）
   */
  VISION__ABNORMALTYPE__STOP_CAR1 = 1,
  /*
   * 静止车辆（导流线区域）
   */
  VISION__ABNORMALTYPE__STOP_CAR2 = 2,
  /*
   * 连续变道（匝道出口区域）
   */
  VISION__ABNORMALTYPE__CONTINUOUS_DIVERSION = 3,
  /*
   * 骑线行驶	
   */
  VISION__ABNORMALTYPE__LINE_PRESSING = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(VISION__ABNORMALTYPE)
} Vision__ABNORMALTYPE;

/* --- messages --- */

/*
 * 时间戳
 */
struct  _Vision__DataTime
{
  ProtobufCMessage base;
  /*
   * 秒
   */
  uint64_t sec;
  /*
   * 微秒
   */
  uint32_t usec;
};
#define VISION__DATA_TIME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vision__data_time__descriptor) \
    , 0, 0 }


/*
 * 单个行人
 */
struct  _Vision__Pedestrian
{
  ProtobufCMessage base;
  int32_t object_id;
  Vision__TYPE object_type;
  /*
   * 经度
   */
  int32_t lng;
  /*
   * 纬度
   */
  int32_t lat;
  /*
   * 哪个相机（1,2,3,4）
   */
  int32_t camera;
  /*
   * 是否在车道
   */
  protobuf_c_boolean has_if_at_lane;
  int32_t if_at_lane;
  /*
   * 车道id
   */
  protobuf_c_boolean has_lane_id;
  int32_t lane_id;
  /*
   * 摄像头参考航向*100
   */
  protobuf_c_boolean has_heading;
  int32_t heading;
  /*
   * 0标识行人在于摄像头参考航向一致的区域，1标识行人在于摄像头参考航向相反的区域，3标识两个方向都需要考虑（中间带）
   */
  protobuf_c_boolean has_approach_judge;
  int32_t approach_judge;
  /*
   * 行人速度*100
   */
  protobuf_c_boolean has_speed;
  int32_t speed;
  /*
   * 行人方向*100
   */
  protobuf_c_boolean has_people_heading;
  int32_t people_heading;
  /*
   * 1=主道，2=上匝道，3=下匝道
   */
  protobuf_c_boolean has_lane_type;
  int32_t lane_type;
};
#define VISION__PEDESTRIAN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vision__pedestrian__descriptor) \
    , 0, VISION__TYPE__OTHERS, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


/*
 * 单个障碍物
 */
struct  _Vision__Obstacle
{
  ProtobufCMessage base;
  int32_t object_id;
  /*
   * 经度
   */
  int32_t lng;
  /*
   * 纬度
   */
  int32_t lat;
  /*
   * 哪个相机（1,2,3,4）
   */
  int32_t camera;
  /*
   * 是否在车道
   */
  protobuf_c_boolean has_if_at_lane;
  int32_t if_at_lane;
  /*
   * 车道id
   */
  protobuf_c_boolean has_lane_id;
  int32_t lane_id;
  protobuf_c_boolean has_heading;
  int32_t heading;
  /*
   * 长
   */
  protobuf_c_boolean has_length;
  int32_t length;
  /*
   * 宽
   */
  protobuf_c_boolean has_width;
  int32_t width;
  /*
   * 高
   */
  protobuf_c_boolean has_height;
  int32_t height;
};
#define VISION__OBSTACLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vision__obstacle__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


/*
 * 单个车辆(异常车辆)
 */
struct  _Vision__AbnormalCar
{
  ProtobufCMessage base;
  int32_t object_id;
  /*
   * 经度
   */
  int32_t lng;
  /*
   * 纬度
   */
  int32_t lat;
  /*
   * 车道id
   */
  protobuf_c_boolean has_lane_id;
  int32_t lane_id;
  /*
   * 哪个相机（1,2,3,4）
   */
  protobuf_c_boolean has_camera;
  int32_t camera;
  protobuf_c_boolean has_abnormal_type;
  Vision__ABNORMALTYPE abnormal_type;
};
#define VISION__ABNORMAL_CAR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vision__abnormal_car__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, VISION__ABNORMALTYPE__DEFAULT_A }


/*
 * 单个特殊车辆
 */
struct  _Vision__SpecialCar
{
  ProtobufCMessage base;
  int32_t object_id;
  Vision__SpecialCar__SPECIALTYPE special_type;
  /*
   * 经度
   */
  int32_t lng;
  /*
   * 纬度
   */
  int32_t lat;
  /*
   * 哪个相机（1,2,3,4）
   */
  int32_t camera;
  /*
   * 车道id
   */
  protobuf_c_boolean has_lane_id;
  int32_t lane_id;
  protobuf_c_boolean has_heading;
  int32_t heading;
  /*
   * 1=主道，2=上匝道，3=下匝道
   */
  protobuf_c_boolean has_lane_type;
  int32_t lane_type;
};
#define VISION__SPECIAL_CAR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vision__special_car__descriptor) \
    , 0, VISION__SPECIAL_CAR__SPECIALTYPE__NORMAL, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


/*
 * 单个可行驶区域
 */
struct  _Vision__AvailableArea
{
  ProtobufCMessage base;
  int32_t object_id;
  /*
   * 第一个点经度
   */
  int32_t lng1;
  /*
   * 第一个点纬度
   */
  int32_t lat1;
  /*
   * 第二个点经度
   */
  int32_t lng2;
  /*
   * 第二个点纬度
   */
  int32_t lat2;
  /*
   * 第三个点经度
   */
  int32_t lng3;
  /*
   * 第三个点纬度
   */
  int32_t lat3;
  /*
   * 第四个点经度
   */
  int32_t lng4;
  /*
   * 第四个点纬度
   */
  int32_t lat4;
  /*
   * 哪个相机（1,2,3,4）
   */
  int32_t camera;
  /*
   * 车道id
   */
  protobuf_c_boolean has_lane_id;
  int32_t lane_id;
  protobuf_c_boolean has_heading;
  int32_t heading;
};
#define VISION__AVAILABLE_AREA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vision__available_area__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


/*
 * 单个相机拍摄到的拥堵情况
 */
struct  _Vision__JamInfo
{
  ProtobufCMessage base;
  /*
   * 车辆数
   */
  uint32_t vehicle_num;
  /*
   * 车辆平均速度 km/h
   */
  double vehicle_avg_speed;
  /*
   * 道路航向角  (度)
   */
  double road_yaw;
  /*
   * 每个车道车辆单位时间通过数
   */
  size_t n_vehicle_flow;
  int32_t *vehicle_flow;
  /*
   * 车道id
   */
  protobuf_c_boolean has_lane_id;
  int32_t lane_id;
};
#define VISION__JAM_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vision__jam_info__descriptor) \
    , 0, 0, 0, 0,NULL, 0, 0 }


/*
 * 交叉路口单个相机拍到的流量情况
 */
struct  _Vision__FlowInfo
{
  ProtobufCMessage base;
  /*
   * 哪个相机
   */
  protobuf_c_boolean has_camera;
  int32_t camera;
  /*
   * 每个车道车辆数
   */
  size_t n_vehicle_num;
  uint32_t *vehicle_num;
  /*
   * 每个车道消散时间内通过车辆数
   */
  size_t n_pass_num;
  uint32_t *pass_num;
  /*
   * 黄灯切换到绿灯信号
   */
  protobuf_c_boolean has_signal;
  Vision__FlowInfo__TrafficSig signal;
};
#define VISION__FLOW_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vision__flow_info__descriptor) \
    , 0, 0, 0,NULL, 0,NULL, 0, VISION__FLOW_INFO__TRAFFIC_SIG__UNKNOWN }


struct  _Vision__Base
{
  ProtobufCMessage base;
  Vision__ID id;
};
#define VISION__BASE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vision__base__descriptor) \
    , VISION__ID__DEFAULT }


/*
 * 行人
 */
struct  _Vision__Crowd
{
  ProtobufCMessage base;
  Vision__ID id;
  size_t n_pedestrian;
  Vision__Pedestrian **pedestrian;
  Vision__DataTime *time;
};
#define VISION__CROWD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vision__crowd__descriptor) \
    , VISION__ID__DEFAULT, 0,NULL, NULL }


/*
 * 障碍物
 */
struct  _Vision__Obstacles
{
  ProtobufCMessage base;
  Vision__ID id;
  size_t n_array;
  Vision__Obstacle **array;
  Vision__DataTime *time;
};
#define VISION__OBSTACLES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vision__obstacles__descriptor) \
    , VISION__ID__DEFAULT, 0,NULL, NULL }


/*
 * 可行驶区域
 */
struct  _Vision__AvailableAreas
{
  ProtobufCMessage base;
  Vision__ID id;
  size_t n_area;
  Vision__AvailableArea **area;
  Vision__DataTime *time;
};
#define VISION__AVAILABLE_AREAS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vision__available_areas__descriptor) \
    , VISION__ID__DEFAULT, 0,NULL, NULL }


/*
 * 违章车辆
 */
struct  _Vision__IllegalCarWarn
{
  ProtobufCMessage base;
  Vision__ID id;
  /*
   * 车辆数组
   */
  size_t n_array;
  Vision__AbnormalCar **array;
  Vision__DataTime *time;
};
#define VISION__ILLEGAL_CAR_WARN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vision__illegal_car_warn__descriptor) \
    , VISION__ID__DEFAULT, 0,NULL, NULL }


/*
 * 能见度检测
 *能见度距离 能见度等级
 *> 500       0(较好)
 *200~500      1(好)
 *100~200      2(一般)
 *50~100       3(差)
 *0-50         4(较差)	
 */
struct  _Vision__Visibility
{
  ProtobufCMessage base;
  Vision__ID id;
  /*
   * 能见度距离 m
   */
  double distance;
  /*
   * 能见度等级
   */
  int32_t level;
};
#define VISION__VISIBILITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vision__visibility__descriptor) \
    , VISION__ID__DEFAULT, 0, 0 }


/*
 * 火焰烟雾报警
 */
struct  _Vision__SmokeWarn
{
  ProtobufCMessage base;
  Vision__ID id;
  /*
   * 是否有报警
   */
  protobuf_c_boolean warn;
};
#define VISION__SMOKE_WARN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vision__smoke_warn__descriptor) \
    , VISION__ID__DEFAULT, 0 }


/*
 *********** add for radar and vision fusion ***************
 *date: 2019-05-06
 *Author: she
 *version: V1.1
 *Description: add timestamp
 *history：2019-06-17 add velocity
 *************************************************************
 */
struct  _Vision__Timestamp
{
  ProtobufCMessage base;
  /*
   * 秒
   */
  int64_t seconds;
  /*
   * 纳秒
   */
  int32_t nanos;
};
#define VISION__TIMESTAMP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vision__timestamp__descriptor) \
    , 0, 0 }


struct  _Vision__Detectobject
{
  ProtobufCMessage base;
  int32_t object_id;
  Vision__TYPE object_type;
  /*
   * 融合：纵向距离 普通：经度
   */
  int32_t longitudinalx;
  /*
   * 融合：横向距离 普通：纬度
   */
  int32_t lateraly;
  /*
   * 融合：速度 km/h 小数点右移两位，0.01的精度 如：10.01km/h  传入1001	
   */
  int32_t velocity;
  /*
   * 哪个相机（1,2,3,4）
   */
  int32_t camera;
  /*
   * 是否在车道
   */
  protobuf_c_boolean has_if_at_lane;
  int32_t if_at_lane;
  /*
   * 车道id(从右至左1,2，…)
   */
  protobuf_c_boolean has_lane_id;
  int32_t lane_id;
  protobuf_c_boolean has_heading;
  int32_t heading;
  /*
   * 1=主道，2=上匝道，3=下匝道
   */
  protobuf_c_boolean has_lane_type;
  int32_t lane_type;
};
#define VISION__DETECTOBJECT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vision__detectobject__descriptor) \
    , 0, VISION__TYPE__OTHERS, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _Vision__Detectobjects
{
  ProtobufCMessage base;
  Vision__ID id;
  size_t n_object;
  Vision__Detectobject **object;
  Vision__Timestamp *time;
};
#define VISION__DETECTOBJECTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vision__detectobjects__descriptor) \
    , VISION__ID__DEFAULT, 0,NULL, NULL }


/*
 * 前方拥堵提醒
 */
struct  _Vision__TrafficJam
{
  ProtobufCMessage base;
  Vision__ID id;
  size_t n_jam;
  Vision__JamInfo **jam;
  Vision__DataTime *time;
};
#define VISION__TRAFFIC_JAM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vision__traffic_jam__descriptor) \
    , VISION__ID__DEFAULT, 0,NULL, NULL }


/*
 * 动态配时场景需要数据
 */
struct  _Vision__TrafficFlow
{
  ProtobufCMessage base;
  Vision__ID id;
  size_t n_flow;
  Vision__FlowInfo **flow;
  Vision__DataTime *time;
};
#define VISION__TRAFFIC_FLOW__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vision__traffic_flow__descriptor) \
    , VISION__ID__DEFAULT, 0,NULL, NULL }


/*
 * 结冰报警
 */
struct  _Vision__IceWarn
{
  ProtobufCMessage base;
  Vision__ID id;
  /*
   * 是否有报警
   */
  protobuf_c_boolean warn;
};
#define VISION__ICE_WARN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vision__ice_warn__descriptor) \
    , VISION__ID__DEFAULT, 0 }


/*
 * 车道线磨损
 */
struct  _Vision__LaneWare
{
  ProtobufCMessage base;
  Vision__ID id;
  Vision__LaneWare__WARETYPE ware_type;
  /*
   * 第一个点经度
   */
  int32_t lng1;
  /*
   * 第一个点纬度
   */
  int32_t lat1;
  /*
   * 第二个点经度
   */
  int32_t lng2;
  /*
   * 第二个点纬度
   */
  int32_t lat2;
  protobuf_c_boolean has_heading;
  int32_t heading;
};
#define VISION__LANE_WARE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vision__lane_ware__descriptor) \
    , VISION__ID__DEFAULT, VISION__LANE_WARE__WARETYPE__DEFAULT, 0, 0, 0, 0, 0, 0 }


/*
 * 特殊车辆
 */
struct  _Vision__SpecialCarMsg
{
  ProtobufCMessage base;
  Vision__ID id;
  size_t n_array;
  Vision__SpecialCar **array;
  Vision__DataTime *time;
};
#define VISION__SPECIAL_CAR_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vision__special_car_msg__descriptor) \
    , VISION__ID__DEFAULT, 0,NULL, NULL }


/* Vision__DataTime methods */
void   vision__data_time__init
                     (Vision__DataTime         *message);
size_t vision__data_time__get_packed_size
                     (const Vision__DataTime   *message);
size_t vision__data_time__pack
                     (const Vision__DataTime   *message,
                      uint8_t             *out);
size_t vision__data_time__pack_to_buffer
                     (const Vision__DataTime   *message,
                      ProtobufCBuffer     *buffer);
Vision__DataTime *
       vision__data_time__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vision__data_time__free_unpacked
                     (Vision__DataTime *message,
                      ProtobufCAllocator *allocator);
/* Vision__Pedestrian methods */
void   vision__pedestrian__init
                     (Vision__Pedestrian         *message);
size_t vision__pedestrian__get_packed_size
                     (const Vision__Pedestrian   *message);
size_t vision__pedestrian__pack
                     (const Vision__Pedestrian   *message,
                      uint8_t             *out);
size_t vision__pedestrian__pack_to_buffer
                     (const Vision__Pedestrian   *message,
                      ProtobufCBuffer     *buffer);
Vision__Pedestrian *
       vision__pedestrian__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vision__pedestrian__free_unpacked
                     (Vision__Pedestrian *message,
                      ProtobufCAllocator *allocator);
/* Vision__Obstacle methods */
void   vision__obstacle__init
                     (Vision__Obstacle         *message);
size_t vision__obstacle__get_packed_size
                     (const Vision__Obstacle   *message);
size_t vision__obstacle__pack
                     (const Vision__Obstacle   *message,
                      uint8_t             *out);
size_t vision__obstacle__pack_to_buffer
                     (const Vision__Obstacle   *message,
                      ProtobufCBuffer     *buffer);
Vision__Obstacle *
       vision__obstacle__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vision__obstacle__free_unpacked
                     (Vision__Obstacle *message,
                      ProtobufCAllocator *allocator);
/* Vision__AbnormalCar methods */
void   vision__abnormal_car__init
                     (Vision__AbnormalCar         *message);
size_t vision__abnormal_car__get_packed_size
                     (const Vision__AbnormalCar   *message);
size_t vision__abnormal_car__pack
                     (const Vision__AbnormalCar   *message,
                      uint8_t             *out);
size_t vision__abnormal_car__pack_to_buffer
                     (const Vision__AbnormalCar   *message,
                      ProtobufCBuffer     *buffer);
Vision__AbnormalCar *
       vision__abnormal_car__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vision__abnormal_car__free_unpacked
                     (Vision__AbnormalCar *message,
                      ProtobufCAllocator *allocator);
/* Vision__SpecialCar methods */
void   vision__special_car__init
                     (Vision__SpecialCar         *message);
size_t vision__special_car__get_packed_size
                     (const Vision__SpecialCar   *message);
size_t vision__special_car__pack
                     (const Vision__SpecialCar   *message,
                      uint8_t             *out);
size_t vision__special_car__pack_to_buffer
                     (const Vision__SpecialCar   *message,
                      ProtobufCBuffer     *buffer);
Vision__SpecialCar *
       vision__special_car__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vision__special_car__free_unpacked
                     (Vision__SpecialCar *message,
                      ProtobufCAllocator *allocator);
/* Vision__AvailableArea methods */
void   vision__available_area__init
                     (Vision__AvailableArea         *message);
size_t vision__available_area__get_packed_size
                     (const Vision__AvailableArea   *message);
size_t vision__available_area__pack
                     (const Vision__AvailableArea   *message,
                      uint8_t             *out);
size_t vision__available_area__pack_to_buffer
                     (const Vision__AvailableArea   *message,
                      ProtobufCBuffer     *buffer);
Vision__AvailableArea *
       vision__available_area__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vision__available_area__free_unpacked
                     (Vision__AvailableArea *message,
                      ProtobufCAllocator *allocator);
/* Vision__JamInfo methods */
void   vision__jam_info__init
                     (Vision__JamInfo         *message);
size_t vision__jam_info__get_packed_size
                     (const Vision__JamInfo   *message);
size_t vision__jam_info__pack
                     (const Vision__JamInfo   *message,
                      uint8_t             *out);
size_t vision__jam_info__pack_to_buffer
                     (const Vision__JamInfo   *message,
                      ProtobufCBuffer     *buffer);
Vision__JamInfo *
       vision__jam_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vision__jam_info__free_unpacked
                     (Vision__JamInfo *message,
                      ProtobufCAllocator *allocator);
/* Vision__FlowInfo methods */
void   vision__flow_info__init
                     (Vision__FlowInfo         *message);
size_t vision__flow_info__get_packed_size
                     (const Vision__FlowInfo   *message);
size_t vision__flow_info__pack
                     (const Vision__FlowInfo   *message,
                      uint8_t             *out);
size_t vision__flow_info__pack_to_buffer
                     (const Vision__FlowInfo   *message,
                      ProtobufCBuffer     *buffer);
Vision__FlowInfo *
       vision__flow_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vision__flow_info__free_unpacked
                     (Vision__FlowInfo *message,
                      ProtobufCAllocator *allocator);
/* Vision__Base methods */
void   vision__base__init
                     (Vision__Base         *message);
size_t vision__base__get_packed_size
                     (const Vision__Base   *message);
size_t vision__base__pack
                     (const Vision__Base   *message,
                      uint8_t             *out);
size_t vision__base__pack_to_buffer
                     (const Vision__Base   *message,
                      ProtobufCBuffer     *buffer);
Vision__Base *
       vision__base__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vision__base__free_unpacked
                     (Vision__Base *message,
                      ProtobufCAllocator *allocator);
/* Vision__Crowd methods */
void   vision__crowd__init
                     (Vision__Crowd         *message);
size_t vision__crowd__get_packed_size
                     (const Vision__Crowd   *message);
size_t vision__crowd__pack
                     (const Vision__Crowd   *message,
                      uint8_t             *out);
size_t vision__crowd__pack_to_buffer
                     (const Vision__Crowd   *message,
                      ProtobufCBuffer     *buffer);
Vision__Crowd *
       vision__crowd__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vision__crowd__free_unpacked
                     (Vision__Crowd *message,
                      ProtobufCAllocator *allocator);
/* Vision__Obstacles methods */
void   vision__obstacles__init
                     (Vision__Obstacles         *message);
size_t vision__obstacles__get_packed_size
                     (const Vision__Obstacles   *message);
size_t vision__obstacles__pack
                     (const Vision__Obstacles   *message,
                      uint8_t             *out);
size_t vision__obstacles__pack_to_buffer
                     (const Vision__Obstacles   *message,
                      ProtobufCBuffer     *buffer);
Vision__Obstacles *
       vision__obstacles__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vision__obstacles__free_unpacked
                     (Vision__Obstacles *message,
                      ProtobufCAllocator *allocator);
/* Vision__AvailableAreas methods */
void   vision__available_areas__init
                     (Vision__AvailableAreas         *message);
size_t vision__available_areas__get_packed_size
                     (const Vision__AvailableAreas   *message);
size_t vision__available_areas__pack
                     (const Vision__AvailableAreas   *message,
                      uint8_t             *out);
size_t vision__available_areas__pack_to_buffer
                     (const Vision__AvailableAreas   *message,
                      ProtobufCBuffer     *buffer);
Vision__AvailableAreas *
       vision__available_areas__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vision__available_areas__free_unpacked
                     (Vision__AvailableAreas *message,
                      ProtobufCAllocator *allocator);
/* Vision__IllegalCarWarn methods */
void   vision__illegal_car_warn__init
                     (Vision__IllegalCarWarn         *message);
size_t vision__illegal_car_warn__get_packed_size
                     (const Vision__IllegalCarWarn   *message);
size_t vision__illegal_car_warn__pack
                     (const Vision__IllegalCarWarn   *message,
                      uint8_t             *out);
size_t vision__illegal_car_warn__pack_to_buffer
                     (const Vision__IllegalCarWarn   *message,
                      ProtobufCBuffer     *buffer);
Vision__IllegalCarWarn *
       vision__illegal_car_warn__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vision__illegal_car_warn__free_unpacked
                     (Vision__IllegalCarWarn *message,
                      ProtobufCAllocator *allocator);
/* Vision__Visibility methods */
void   vision__visibility__init
                     (Vision__Visibility         *message);
size_t vision__visibility__get_packed_size
                     (const Vision__Visibility   *message);
size_t vision__visibility__pack
                     (const Vision__Visibility   *message,
                      uint8_t             *out);
size_t vision__visibility__pack_to_buffer
                     (const Vision__Visibility   *message,
                      ProtobufCBuffer     *buffer);
Vision__Visibility *
       vision__visibility__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vision__visibility__free_unpacked
                     (Vision__Visibility *message,
                      ProtobufCAllocator *allocator);
/* Vision__SmokeWarn methods */
void   vision__smoke_warn__init
                     (Vision__SmokeWarn         *message);
size_t vision__smoke_warn__get_packed_size
                     (const Vision__SmokeWarn   *message);
size_t vision__smoke_warn__pack
                     (const Vision__SmokeWarn   *message,
                      uint8_t             *out);
size_t vision__smoke_warn__pack_to_buffer
                     (const Vision__SmokeWarn   *message,
                      ProtobufCBuffer     *buffer);
Vision__SmokeWarn *
       vision__smoke_warn__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vision__smoke_warn__free_unpacked
                     (Vision__SmokeWarn *message,
                      ProtobufCAllocator *allocator);
/* Vision__Timestamp methods */
void   vision__timestamp__init
                     (Vision__Timestamp         *message);
size_t vision__timestamp__get_packed_size
                     (const Vision__Timestamp   *message);
size_t vision__timestamp__pack
                     (const Vision__Timestamp   *message,
                      uint8_t             *out);
size_t vision__timestamp__pack_to_buffer
                     (const Vision__Timestamp   *message,
                      ProtobufCBuffer     *buffer);
Vision__Timestamp *
       vision__timestamp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vision__timestamp__free_unpacked
                     (Vision__Timestamp *message,
                      ProtobufCAllocator *allocator);
/* Vision__Detectobject methods */
void   vision__detectobject__init
                     (Vision__Detectobject         *message);
size_t vision__detectobject__get_packed_size
                     (const Vision__Detectobject   *message);
size_t vision__detectobject__pack
                     (const Vision__Detectobject   *message,
                      uint8_t             *out);
size_t vision__detectobject__pack_to_buffer
                     (const Vision__Detectobject   *message,
                      ProtobufCBuffer     *buffer);
Vision__Detectobject *
       vision__detectobject__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vision__detectobject__free_unpacked
                     (Vision__Detectobject *message,
                      ProtobufCAllocator *allocator);
/* Vision__Detectobjects methods */
void   vision__detectobjects__init
                     (Vision__Detectobjects         *message);
size_t vision__detectobjects__get_packed_size
                     (const Vision__Detectobjects   *message);
size_t vision__detectobjects__pack
                     (const Vision__Detectobjects   *message,
                      uint8_t             *out);
size_t vision__detectobjects__pack_to_buffer
                     (const Vision__Detectobjects   *message,
                      ProtobufCBuffer     *buffer);
Vision__Detectobjects *
       vision__detectobjects__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vision__detectobjects__free_unpacked
                     (Vision__Detectobjects *message,
                      ProtobufCAllocator *allocator);
/* Vision__TrafficJam methods */
void   vision__traffic_jam__init
                     (Vision__TrafficJam         *message);
size_t vision__traffic_jam__get_packed_size
                     (const Vision__TrafficJam   *message);
size_t vision__traffic_jam__pack
                     (const Vision__TrafficJam   *message,
                      uint8_t             *out);
size_t vision__traffic_jam__pack_to_buffer
                     (const Vision__TrafficJam   *message,
                      ProtobufCBuffer     *buffer);
Vision__TrafficJam *
       vision__traffic_jam__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vision__traffic_jam__free_unpacked
                     (Vision__TrafficJam *message,
                      ProtobufCAllocator *allocator);
/* Vision__TrafficFlow methods */
void   vision__traffic_flow__init
                     (Vision__TrafficFlow         *message);
size_t vision__traffic_flow__get_packed_size
                     (const Vision__TrafficFlow   *message);
size_t vision__traffic_flow__pack
                     (const Vision__TrafficFlow   *message,
                      uint8_t             *out);
size_t vision__traffic_flow__pack_to_buffer
                     (const Vision__TrafficFlow   *message,
                      ProtobufCBuffer     *buffer);
Vision__TrafficFlow *
       vision__traffic_flow__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vision__traffic_flow__free_unpacked
                     (Vision__TrafficFlow *message,
                      ProtobufCAllocator *allocator);
/* Vision__IceWarn methods */
void   vision__ice_warn__init
                     (Vision__IceWarn         *message);
size_t vision__ice_warn__get_packed_size
                     (const Vision__IceWarn   *message);
size_t vision__ice_warn__pack
                     (const Vision__IceWarn   *message,
                      uint8_t             *out);
size_t vision__ice_warn__pack_to_buffer
                     (const Vision__IceWarn   *message,
                      ProtobufCBuffer     *buffer);
Vision__IceWarn *
       vision__ice_warn__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vision__ice_warn__free_unpacked
                     (Vision__IceWarn *message,
                      ProtobufCAllocator *allocator);
/* Vision__LaneWare methods */
void   vision__lane_ware__init
                     (Vision__LaneWare         *message);
size_t vision__lane_ware__get_packed_size
                     (const Vision__LaneWare   *message);
size_t vision__lane_ware__pack
                     (const Vision__LaneWare   *message,
                      uint8_t             *out);
size_t vision__lane_ware__pack_to_buffer
                     (const Vision__LaneWare   *message,
                      ProtobufCBuffer     *buffer);
Vision__LaneWare *
       vision__lane_ware__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vision__lane_ware__free_unpacked
                     (Vision__LaneWare *message,
                      ProtobufCAllocator *allocator);
/* Vision__SpecialCarMsg methods */
void   vision__special_car_msg__init
                     (Vision__SpecialCarMsg         *message);
size_t vision__special_car_msg__get_packed_size
                     (const Vision__SpecialCarMsg   *message);
size_t vision__special_car_msg__pack
                     (const Vision__SpecialCarMsg   *message,
                      uint8_t             *out);
size_t vision__special_car_msg__pack_to_buffer
                     (const Vision__SpecialCarMsg   *message,
                      ProtobufCBuffer     *buffer);
Vision__SpecialCarMsg *
       vision__special_car_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vision__special_car_msg__free_unpacked
                     (Vision__SpecialCarMsg *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Vision__DataTime_Closure)
                 (const Vision__DataTime *message,
                  void *closure_data);
typedef void (*Vision__Pedestrian_Closure)
                 (const Vision__Pedestrian *message,
                  void *closure_data);
typedef void (*Vision__Obstacle_Closure)
                 (const Vision__Obstacle *message,
                  void *closure_data);
typedef void (*Vision__AbnormalCar_Closure)
                 (const Vision__AbnormalCar *message,
                  void *closure_data);
typedef void (*Vision__SpecialCar_Closure)
                 (const Vision__SpecialCar *message,
                  void *closure_data);
typedef void (*Vision__AvailableArea_Closure)
                 (const Vision__AvailableArea *message,
                  void *closure_data);
typedef void (*Vision__JamInfo_Closure)
                 (const Vision__JamInfo *message,
                  void *closure_data);
typedef void (*Vision__FlowInfo_Closure)
                 (const Vision__FlowInfo *message,
                  void *closure_data);
typedef void (*Vision__Base_Closure)
                 (const Vision__Base *message,
                  void *closure_data);
typedef void (*Vision__Crowd_Closure)
                 (const Vision__Crowd *message,
                  void *closure_data);
typedef void (*Vision__Obstacles_Closure)
                 (const Vision__Obstacles *message,
                  void *closure_data);
typedef void (*Vision__AvailableAreas_Closure)
                 (const Vision__AvailableAreas *message,
                  void *closure_data);
typedef void (*Vision__IllegalCarWarn_Closure)
                 (const Vision__IllegalCarWarn *message,
                  void *closure_data);
typedef void (*Vision__Visibility_Closure)
                 (const Vision__Visibility *message,
                  void *closure_data);
typedef void (*Vision__SmokeWarn_Closure)
                 (const Vision__SmokeWarn *message,
                  void *closure_data);
typedef void (*Vision__Timestamp_Closure)
                 (const Vision__Timestamp *message,
                  void *closure_data);
typedef void (*Vision__Detectobject_Closure)
                 (const Vision__Detectobject *message,
                  void *closure_data);
typedef void (*Vision__Detectobjects_Closure)
                 (const Vision__Detectobjects *message,
                  void *closure_data);
typedef void (*Vision__TrafficJam_Closure)
                 (const Vision__TrafficJam *message,
                  void *closure_data);
typedef void (*Vision__TrafficFlow_Closure)
                 (const Vision__TrafficFlow *message,
                  void *closure_data);
typedef void (*Vision__IceWarn_Closure)
                 (const Vision__IceWarn *message,
                  void *closure_data);
typedef void (*Vision__LaneWare_Closure)
                 (const Vision__LaneWare *message,
                  void *closure_data);
typedef void (*Vision__SpecialCarMsg_Closure)
                 (const Vision__SpecialCarMsg *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    vision__id__descriptor;
extern const ProtobufCEnumDescriptor    vision__type__descriptor;
extern const ProtobufCEnumDescriptor    vision__abnormaltype__descriptor;
extern const ProtobufCMessageDescriptor vision__data_time__descriptor;
extern const ProtobufCMessageDescriptor vision__pedestrian__descriptor;
extern const ProtobufCMessageDescriptor vision__obstacle__descriptor;
extern const ProtobufCMessageDescriptor vision__abnormal_car__descriptor;
extern const ProtobufCMessageDescriptor vision__special_car__descriptor;
extern const ProtobufCEnumDescriptor    vision__special_car__specialtype__descriptor;
extern const ProtobufCMessageDescriptor vision__available_area__descriptor;
extern const ProtobufCMessageDescriptor vision__jam_info__descriptor;
extern const ProtobufCMessageDescriptor vision__flow_info__descriptor;
extern const ProtobufCEnumDescriptor    vision__flow_info__traffic_sig__descriptor;
extern const ProtobufCMessageDescriptor vision__base__descriptor;
extern const ProtobufCMessageDescriptor vision__crowd__descriptor;
extern const ProtobufCMessageDescriptor vision__obstacles__descriptor;
extern const ProtobufCMessageDescriptor vision__available_areas__descriptor;
extern const ProtobufCMessageDescriptor vision__illegal_car_warn__descriptor;
extern const ProtobufCMessageDescriptor vision__visibility__descriptor;
extern const ProtobufCMessageDescriptor vision__smoke_warn__descriptor;
extern const ProtobufCMessageDescriptor vision__timestamp__descriptor;
extern const ProtobufCMessageDescriptor vision__detectobject__descriptor;
extern const ProtobufCMessageDescriptor vision__detectobjects__descriptor;
extern const ProtobufCMessageDescriptor vision__traffic_jam__descriptor;
extern const ProtobufCMessageDescriptor vision__traffic_flow__descriptor;
extern const ProtobufCMessageDescriptor vision__ice_warn__descriptor;
extern const ProtobufCMessageDescriptor vision__lane_ware__descriptor;
extern const ProtobufCEnumDescriptor    vision__lane_ware__waretype__descriptor;
extern const ProtobufCMessageDescriptor vision__special_car_msg__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_vision_2eproto__INCLUDED */
