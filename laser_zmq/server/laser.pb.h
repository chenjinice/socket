// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: laser.proto

#ifndef PROTOBUF_INCLUDED_laser_2eproto
#define PROTOBUF_INCLUDED_laser_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_laser_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_laser_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_laser_2eproto();
namespace laser {
class LaserMsg;
class LaserMsgDefaultTypeInternal;
extern LaserMsgDefaultTypeInternal _LaserMsg_default_instance_;
class LaserObj;
class LaserObjDefaultTypeInternal;
extern LaserObjDefaultTypeInternal _LaserObj_default_instance_;
class Timestamp;
class TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
}  // namespace laser
namespace google {
namespace protobuf {
template<> ::laser::LaserMsg* Arena::CreateMaybeMessage<::laser::LaserMsg>(Arena*);
template<> ::laser::LaserObj* Arena::CreateMaybeMessage<::laser::LaserObj>(Arena*);
template<> ::laser::Timestamp* Arena::CreateMaybeMessage<::laser::Timestamp>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace laser {

// ===================================================================

class Timestamp final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:laser.Timestamp) */ {
 public:
  Timestamp();
  virtual ~Timestamp();

  Timestamp(const Timestamp& from);

  inline Timestamp& operator=(const Timestamp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Timestamp(Timestamp&& from) noexcept
    : Timestamp() {
    *this = ::std::move(from);
  }

  inline Timestamp& operator=(Timestamp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Timestamp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Timestamp* internal_default_instance() {
    return reinterpret_cast<const Timestamp*>(
               &_Timestamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Timestamp* other);
  friend void swap(Timestamp& a, Timestamp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Timestamp* New() const final {
    return CreateMaybeMessage<Timestamp>(nullptr);
  }

  Timestamp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Timestamp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Timestamp& from);
  void MergeFrom(const Timestamp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Timestamp* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "laser.Timestamp";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 sec = 1;
  bool has_sec() const;
  void clear_sec();
  static const int kSecFieldNumber = 1;
  ::google::protobuf::uint64 sec() const;
  void set_sec(::google::protobuf::uint64 value);

  // required uint32 usec = 2;
  bool has_usec() const;
  void clear_usec();
  static const int kUsecFieldNumber = 2;
  ::google::protobuf::uint32 usec() const;
  void set_usec(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:laser.Timestamp)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 sec_;
  ::google::protobuf::uint32 usec_;
  friend struct ::TableStruct_laser_2eproto;
};
// -------------------------------------------------------------------

class LaserObj final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:laser.LaserObj) */ {
 public:
  LaserObj();
  virtual ~LaserObj();

  LaserObj(const LaserObj& from);

  inline LaserObj& operator=(const LaserObj& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaserObj(LaserObj&& from) noexcept
    : LaserObj() {
    *this = ::std::move(from);
  }

  inline LaserObj& operator=(LaserObj&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LaserObj& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaserObj* internal_default_instance() {
    return reinterpret_cast<const LaserObj*>(
               &_LaserObj_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LaserObj* other);
  friend void swap(LaserObj& a, LaserObj& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaserObj* New() const final {
    return CreateMaybeMessage<LaserObj>(nullptr);
  }

  LaserObj* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaserObj>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaserObj& from);
  void MergeFrom(const LaserObj& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaserObj* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "laser.LaserObj";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 object_id = 1;
  bool has_object_id() const;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  ::google::protobuf::int32 object_id() const;
  void set_object_id(::google::protobuf::int32 value);

  // required int32 lng = 2;
  bool has_lng() const;
  void clear_lng();
  static const int kLngFieldNumber = 2;
  ::google::protobuf::int32 lng() const;
  void set_lng(::google::protobuf::int32 value);

  // required int32 lat = 3;
  bool has_lat() const;
  void clear_lat();
  static const int kLatFieldNumber = 3;
  ::google::protobuf::int32 lat() const;
  void set_lat(::google::protobuf::int32 value);

  // optional int32 speed = 4;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 4;
  ::google::protobuf::int32 speed() const;
  void set_speed(::google::protobuf::int32 value);

  // optional int32 heading = 5;
  bool has_heading() const;
  void clear_heading();
  static const int kHeadingFieldNumber = 5;
  ::google::protobuf::int32 heading() const;
  void set_heading(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:laser.LaserObj)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 object_id_;
  ::google::protobuf::int32 lng_;
  ::google::protobuf::int32 lat_;
  ::google::protobuf::int32 speed_;
  ::google::protobuf::int32 heading_;
  friend struct ::TableStruct_laser_2eproto;
};
// -------------------------------------------------------------------

class LaserMsg final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:laser.LaserMsg) */ {
 public:
  LaserMsg();
  virtual ~LaserMsg();

  LaserMsg(const LaserMsg& from);

  inline LaserMsg& operator=(const LaserMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaserMsg(LaserMsg&& from) noexcept
    : LaserMsg() {
    *this = ::std::move(from);
  }

  inline LaserMsg& operator=(LaserMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LaserMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaserMsg* internal_default_instance() {
    return reinterpret_cast<const LaserMsg*>(
               &_LaserMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LaserMsg* other);
  friend void swap(LaserMsg& a, LaserMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaserMsg* New() const final {
    return CreateMaybeMessage<LaserMsg>(nullptr);
  }

  LaserMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaserMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaserMsg& from);
  void MergeFrom(const LaserMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaserMsg* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "laser.LaserMsg";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .laser.LaserObj objs = 1;
  int objs_size() const;
  void clear_objs();
  static const int kObjsFieldNumber = 1;
  ::laser::LaserObj* mutable_objs(int index);
  ::google::protobuf::RepeatedPtrField< ::laser::LaserObj >*
      mutable_objs();
  const ::laser::LaserObj& objs(int index) const;
  ::laser::LaserObj* add_objs();
  const ::google::protobuf::RepeatedPtrField< ::laser::LaserObj >&
      objs() const;

  // optional .laser.Timestamp time = 2;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  const ::laser::Timestamp& time() const;
  ::laser::Timestamp* release_time();
  ::laser::Timestamp* mutable_time();
  void set_allocated_time(::laser::Timestamp* time);

  // @@protoc_insertion_point(class_scope:laser.LaserMsg)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::laser::LaserObj > objs_;
  ::laser::Timestamp* time_;
  friend struct ::TableStruct_laser_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Timestamp

// required uint64 sec = 1;
inline bool Timestamp::has_sec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Timestamp::clear_sec() {
  sec_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 Timestamp::sec() const {
  // @@protoc_insertion_point(field_get:laser.Timestamp.sec)
  return sec_;
}
inline void Timestamp::set_sec(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  sec_ = value;
  // @@protoc_insertion_point(field_set:laser.Timestamp.sec)
}

// required uint32 usec = 2;
inline bool Timestamp::has_usec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Timestamp::clear_usec() {
  usec_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 Timestamp::usec() const {
  // @@protoc_insertion_point(field_get:laser.Timestamp.usec)
  return usec_;
}
inline void Timestamp::set_usec(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  usec_ = value;
  // @@protoc_insertion_point(field_set:laser.Timestamp.usec)
}

// -------------------------------------------------------------------

// LaserObj

// required int32 object_id = 1;
inline bool LaserObj::has_object_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaserObj::clear_object_id() {
  object_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::int32 LaserObj::object_id() const {
  // @@protoc_insertion_point(field_get:laser.LaserObj.object_id)
  return object_id_;
}
inline void LaserObj::set_object_id(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  object_id_ = value;
  // @@protoc_insertion_point(field_set:laser.LaserObj.object_id)
}

// required int32 lng = 2;
inline bool LaserObj::has_lng() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LaserObj::clear_lng() {
  lng_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::int32 LaserObj::lng() const {
  // @@protoc_insertion_point(field_get:laser.LaserObj.lng)
  return lng_;
}
inline void LaserObj::set_lng(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  lng_ = value;
  // @@protoc_insertion_point(field_set:laser.LaserObj.lng)
}

// required int32 lat = 3;
inline bool LaserObj::has_lat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LaserObj::clear_lat() {
  lat_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int32 LaserObj::lat() const {
  // @@protoc_insertion_point(field_get:laser.LaserObj.lat)
  return lat_;
}
inline void LaserObj::set_lat(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  lat_ = value;
  // @@protoc_insertion_point(field_set:laser.LaserObj.lat)
}

// optional int32 speed = 4;
inline bool LaserObj::has_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LaserObj::clear_speed() {
  speed_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::int32 LaserObj::speed() const {
  // @@protoc_insertion_point(field_get:laser.LaserObj.speed)
  return speed_;
}
inline void LaserObj::set_speed(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  speed_ = value;
  // @@protoc_insertion_point(field_set:laser.LaserObj.speed)
}

// optional int32 heading = 5;
inline bool LaserObj::has_heading() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LaserObj::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::int32 LaserObj::heading() const {
  // @@protoc_insertion_point(field_get:laser.LaserObj.heading)
  return heading_;
}
inline void LaserObj::set_heading(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  heading_ = value;
  // @@protoc_insertion_point(field_set:laser.LaserObj.heading)
}

// -------------------------------------------------------------------

// LaserMsg

// repeated .laser.LaserObj objs = 1;
inline int LaserMsg::objs_size() const {
  return objs_.size();
}
inline void LaserMsg::clear_objs() {
  objs_.Clear();
}
inline ::laser::LaserObj* LaserMsg::mutable_objs(int index) {
  // @@protoc_insertion_point(field_mutable:laser.LaserMsg.objs)
  return objs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::laser::LaserObj >*
LaserMsg::mutable_objs() {
  // @@protoc_insertion_point(field_mutable_list:laser.LaserMsg.objs)
  return &objs_;
}
inline const ::laser::LaserObj& LaserMsg::objs(int index) const {
  // @@protoc_insertion_point(field_get:laser.LaserMsg.objs)
  return objs_.Get(index);
}
inline ::laser::LaserObj* LaserMsg::add_objs() {
  // @@protoc_insertion_point(field_add:laser.LaserMsg.objs)
  return objs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::laser::LaserObj >&
LaserMsg::objs() const {
  // @@protoc_insertion_point(field_list:laser.LaserMsg.objs)
  return objs_;
}

// optional .laser.Timestamp time = 2;
inline bool LaserMsg::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaserMsg::clear_time() {
  if (time_ != nullptr) time_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::laser::Timestamp& LaserMsg::time() const {
  const ::laser::Timestamp* p = time_;
  // @@protoc_insertion_point(field_get:laser.LaserMsg.time)
  return p != nullptr ? *p : *reinterpret_cast<const ::laser::Timestamp*>(
      &::laser::_Timestamp_default_instance_);
}
inline ::laser::Timestamp* LaserMsg::release_time() {
  // @@protoc_insertion_point(field_release:laser.LaserMsg.time)
  _has_bits_[0] &= ~0x00000001u;
  ::laser::Timestamp* temp = time_;
  time_ = nullptr;
  return temp;
}
inline ::laser::Timestamp* LaserMsg::mutable_time() {
  _has_bits_[0] |= 0x00000001u;
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<::laser::Timestamp>(GetArenaNoVirtual());
    time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:laser.LaserMsg.time)
  return time_;
}
inline void LaserMsg::set_allocated_time(::laser::Timestamp* time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete time_;
  }
  if (time) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:laser.LaserMsg.time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace laser

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_laser_2eproto
