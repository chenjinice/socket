// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: laser.proto

#include "laser.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_laser_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LaserObj_laser_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_laser_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp_laser_2eproto;
namespace laser {
class TimestampDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Timestamp> _instance;
} _Timestamp_default_instance_;
class LaserObjDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaserObj> _instance;
} _LaserObj_default_instance_;
class LaserMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaserMsg> _instance;
} _LaserMsg_default_instance_;
}  // namespace laser
static void InitDefaultsTimestamp_laser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::laser::_Timestamp_default_instance_;
    new (ptr) ::laser::Timestamp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::laser::Timestamp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp_laser_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTimestamp_laser_2eproto}, {}};

static void InitDefaultsLaserObj_laser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::laser::_LaserObj_default_instance_;
    new (ptr) ::laser::LaserObj();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::laser::LaserObj::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LaserObj_laser_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLaserObj_laser_2eproto}, {}};

static void InitDefaultsLaserMsg_laser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::laser::_LaserMsg_default_instance_;
    new (ptr) ::laser::LaserMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::laser::LaserMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LaserMsg_laser_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLaserMsg_laser_2eproto}, {
      &scc_info_LaserObj_laser_2eproto.base,
      &scc_info_Timestamp_laser_2eproto.base,}};

void InitDefaults_laser_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Timestamp_laser_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaserObj_laser_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaserMsg_laser_2eproto.base);
}

static ::google::protobuf::Metadata file_level_metadata_laser_2eproto[3];
static constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_laser_2eproto = nullptr;
static constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_laser_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_laser_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::laser::Timestamp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::laser::Timestamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::laser::Timestamp, sec_),
  PROTOBUF_FIELD_OFFSET(::laser::Timestamp, usec_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::laser::LaserObj, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::laser::LaserObj, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::laser::LaserObj, object_id_),
  PROTOBUF_FIELD_OFFSET(::laser::LaserObj, lng_),
  PROTOBUF_FIELD_OFFSET(::laser::LaserObj, lat_),
  PROTOBUF_FIELD_OFFSET(::laser::LaserObj, speed_),
  PROTOBUF_FIELD_OFFSET(::laser::LaserObj, heading_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::laser::LaserMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::laser::LaserMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::laser::LaserMsg, objs_),
  PROTOBUF_FIELD_OFFSET(::laser::LaserMsg, time_),
  ~0u,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::laser::Timestamp)},
  { 9, 19, sizeof(::laser::LaserObj)},
  { 24, 31, sizeof(::laser::LaserMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::laser::_Timestamp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::laser::_LaserObj_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::laser::_LaserMsg_default_instance_),
};

static ::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_laser_2eproto = {
  {}, AddDescriptors_laser_2eproto, "laser.proto", schemas,
  file_default_instances, TableStruct_laser_2eproto::offsets,
  file_level_metadata_laser_2eproto, 3, file_level_enum_descriptors_laser_2eproto, file_level_service_descriptors_laser_2eproto,
};

const char descriptor_table_protodef_laser_2eproto[] =
  "\n\013laser.proto\022\005laser\"&\n\tTimestamp\022\013\n\003sec"
  "\030\001 \002(\004\022\014\n\004usec\030\002 \002(\r\"W\n\010LaserObj\022\021\n\tobje"
  "ct_id\030\001 \002(\005\022\013\n\003lng\030\002 \002(\005\022\013\n\003lat\030\003 \002(\005\022\r\n"
  "\005speed\030\004 \001(\005\022\017\n\007heading\030\005 \001(\005\"I\n\010LaserMs"
  "g\022\035\n\004objs\030\001 \003(\0132\017.laser.LaserObj\022\036\n\004time"
  "\030\002 \001(\0132\020.laser.Timestamp"
  ;
static ::google::protobuf::internal::DescriptorTable descriptor_table_laser_2eproto = {
  false, InitDefaults_laser_2eproto, 
  descriptor_table_protodef_laser_2eproto,
  "laser.proto", &assign_descriptors_table_laser_2eproto, 224,
};

void AddDescriptors_laser_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_laser_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_laser_2eproto = []() { AddDescriptors_laser_2eproto(); return true; }();
namespace laser {

// ===================================================================

void Timestamp::InitAsDefaultInstance() {
}
class Timestamp::HasBitSetters {
 public:
  static void set_has_sec(Timestamp* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_usec(Timestamp* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Timestamp::kSecFieldNumber;
const int Timestamp::kUsecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Timestamp::Timestamp()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:laser.Timestamp)
}
Timestamp::Timestamp(const Timestamp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sec_, &from.sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&usec_) -
    reinterpret_cast<char*>(&sec_)) + sizeof(usec_));
  // @@protoc_insertion_point(copy_constructor:laser.Timestamp)
}

void Timestamp::SharedCtor() {
  ::memset(&sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usec_) -
      reinterpret_cast<char*>(&sec_)) + sizeof(usec_));
}

Timestamp::~Timestamp() {
  // @@protoc_insertion_point(destructor:laser.Timestamp)
  SharedDtor();
}

void Timestamp::SharedDtor() {
}

void Timestamp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Timestamp& Timestamp::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Timestamp_laser_2eproto.base);
  return *internal_default_instance();
}


void Timestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:laser.Timestamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&usec_) -
        reinterpret_cast<char*>(&sec_)) + sizeof(usec_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Timestamp::_InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::google::protobuf::uint32 tag;
    ptr = ::google::protobuf::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint64 sec = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        set_sec(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 usec = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        set_usec(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag,
          _internal_metadata_.mutable_unknown_fields(), ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Timestamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:laser.Timestamp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 sec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_sec(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 usec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_usec(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:laser.Timestamp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:laser.Timestamp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Timestamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:laser.Timestamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 sec = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sec(), output);
  }

  // required uint32 usec = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->usec(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:laser.Timestamp)
}

::google::protobuf::uint8* Timestamp::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:laser.Timestamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 sec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sec(), target);
  }

  // required uint32 usec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->usec(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:laser.Timestamp)
  return target;
}

size_t Timestamp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:laser.Timestamp)
  size_t total_size = 0;

  if (has_sec()) {
    // required uint64 sec = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sec());
  }

  if (has_usec()) {
    // required uint32 usec = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->usec());
  }

  return total_size;
}
size_t Timestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:laser.Timestamp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 sec = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sec());

    // required uint32 usec = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->usec());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Timestamp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:laser.Timestamp)
  GOOGLE_DCHECK_NE(&from, this);
  const Timestamp* source =
      ::google::protobuf::DynamicCastToGenerated<Timestamp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:laser.Timestamp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:laser.Timestamp)
    MergeFrom(*source);
  }
}

void Timestamp::MergeFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:laser.Timestamp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sec_ = from.sec_;
    }
    if (cached_has_bits & 0x00000002u) {
      usec_ = from.usec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Timestamp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:laser.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Timestamp::CopyFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:laser.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timestamp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Timestamp::Swap(Timestamp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Timestamp::InternalSwap(Timestamp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sec_, other->sec_);
  swap(usec_, other->usec_);
}

::google::protobuf::Metadata Timestamp::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_laser_2eproto);
  return ::file_level_metadata_laser_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LaserObj::InitAsDefaultInstance() {
}
class LaserObj::HasBitSetters {
 public:
  static void set_has_object_id(LaserObj* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_lng(LaserObj* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_lat(LaserObj* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_speed(LaserObj* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_heading(LaserObj* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaserObj::kObjectIdFieldNumber;
const int LaserObj::kLngFieldNumber;
const int LaserObj::kLatFieldNumber;
const int LaserObj::kSpeedFieldNumber;
const int LaserObj::kHeadingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaserObj::LaserObj()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:laser.LaserObj)
}
LaserObj::LaserObj(const LaserObj& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&heading_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(heading_));
  // @@protoc_insertion_point(copy_constructor:laser.LaserObj)
}

void LaserObj::SharedCtor() {
  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(heading_));
}

LaserObj::~LaserObj() {
  // @@protoc_insertion_point(destructor:laser.LaserObj)
  SharedDtor();
}

void LaserObj::SharedDtor() {
}

void LaserObj::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaserObj& LaserObj::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LaserObj_laser_2eproto.base);
  return *internal_default_instance();
}


void LaserObj::Clear() {
// @@protoc_insertion_point(message_clear_start:laser.LaserObj)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&object_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&heading_) -
        reinterpret_cast<char*>(&object_id_)) + sizeof(heading_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaserObj::_InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::google::protobuf::uint32 tag;
    ptr = ::google::protobuf::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int32 object_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        set_object_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 lng = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        set_lng(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 lat = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        set_lat(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 speed = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        set_speed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 heading = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        set_heading(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag,
          _internal_metadata_.mutable_unknown_fields(), ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaserObj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:laser.LaserObj)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 object_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_object_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &object_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 lng = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_lng(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lng_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 lat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_lat(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 speed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_speed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 heading = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_heading(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:laser.LaserObj)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:laser.LaserObj)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaserObj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:laser.LaserObj)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 object_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->object_id(), output);
  }

  // required int32 lng = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lng(), output);
  }

  // required int32 lat = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lat(), output);
  }

  // optional int32 speed = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->speed(), output);
  }

  // optional int32 heading = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->heading(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:laser.LaserObj)
}

::google::protobuf::uint8* LaserObj::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:laser.LaserObj)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 object_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->object_id(), target);
  }

  // required int32 lng = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lng(), target);
  }

  // required int32 lat = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lat(), target);
  }

  // optional int32 speed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->speed(), target);
  }

  // optional int32 heading = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->heading(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:laser.LaserObj)
  return target;
}

size_t LaserObj::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:laser.LaserObj)
  size_t total_size = 0;

  if (has_object_id()) {
    // required int32 object_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->object_id());
  }

  if (has_lng()) {
    // required int32 lng = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lng());
  }

  if (has_lat()) {
    // required int32 lat = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lat());
  }

  return total_size;
}
size_t LaserObj::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:laser.LaserObj)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 object_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->object_id());

    // required int32 lng = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lng());

    // required int32 lat = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lat());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000018u) {
    // optional int32 speed = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }

    // optional int32 heading = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heading());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaserObj::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:laser.LaserObj)
  GOOGLE_DCHECK_NE(&from, this);
  const LaserObj* source =
      ::google::protobuf::DynamicCastToGenerated<LaserObj>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:laser.LaserObj)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:laser.LaserObj)
    MergeFrom(*source);
  }
}

void LaserObj::MergeFrom(const LaserObj& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:laser.LaserObj)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      object_id_ = from.object_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      lng_ = from.lng_;
    }
    if (cached_has_bits & 0x00000004u) {
      lat_ = from.lat_;
    }
    if (cached_has_bits & 0x00000008u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000010u) {
      heading_ = from.heading_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaserObj::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:laser.LaserObj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaserObj::CopyFrom(const LaserObj& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:laser.LaserObj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaserObj::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void LaserObj::Swap(LaserObj* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaserObj::InternalSwap(LaserObj* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(object_id_, other->object_id_);
  swap(lng_, other->lng_);
  swap(lat_, other->lat_);
  swap(speed_, other->speed_);
  swap(heading_, other->heading_);
}

::google::protobuf::Metadata LaserObj::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_laser_2eproto);
  return ::file_level_metadata_laser_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LaserMsg::InitAsDefaultInstance() {
  ::laser::_LaserMsg_default_instance_._instance.get_mutable()->time_ = const_cast< ::laser::Timestamp*>(
      ::laser::Timestamp::internal_default_instance());
}
class LaserMsg::HasBitSetters {
 public:
  static const ::laser::Timestamp& time(const LaserMsg* msg);
  static void set_has_time(LaserMsg* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::laser::Timestamp&
LaserMsg::HasBitSetters::time(const LaserMsg* msg) {
  return *msg->time_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaserMsg::kObjsFieldNumber;
const int LaserMsg::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaserMsg::LaserMsg()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:laser.LaserMsg)
}
LaserMsg::LaserMsg(const LaserMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      objs_(from.objs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_time()) {
    time_ = new ::laser::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:laser.LaserMsg)
}

void LaserMsg::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LaserMsg_laser_2eproto.base);
  time_ = nullptr;
}

LaserMsg::~LaserMsg() {
  // @@protoc_insertion_point(destructor:laser.LaserMsg)
  SharedDtor();
}

void LaserMsg::SharedDtor() {
  if (this != internal_default_instance()) delete time_;
}

void LaserMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaserMsg& LaserMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LaserMsg_laser_2eproto.base);
  return *internal_default_instance();
}


void LaserMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:laser.LaserMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(time_ != nullptr);
    time_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaserMsg::_InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::google::protobuf::uint32 tag;
    ptr = ::google::protobuf::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .laser.LaserObj objs = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ctx->ParseMessage(add_objs(), ptr);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ctx->Done(&ptr)) return ptr;
        } while ((::google::protobuf::internal::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // optional .laser.Timestamp time = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_time(), ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag,
          _internal_metadata_.mutable_unknown_fields(), ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaserMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:laser.LaserMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .laser.LaserObj objs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_objs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .laser.Timestamp time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:laser.LaserMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:laser.LaserMsg)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaserMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:laser.LaserMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .laser.LaserObj objs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->objs(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .laser.Timestamp time = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::time(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:laser.LaserMsg)
}

::google::protobuf::uint8* LaserMsg::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:laser.LaserMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .laser.LaserObj objs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->objs(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .laser.Timestamp time = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::time(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:laser.LaserMsg)
  return target;
}

size_t LaserMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:laser.LaserMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .laser.LaserObj objs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->objs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->objs(static_cast<int>(i)));
    }
  }

  // optional .laser.Timestamp time = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *time_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaserMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:laser.LaserMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const LaserMsg* source =
      ::google::protobuf::DynamicCastToGenerated<LaserMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:laser.LaserMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:laser.LaserMsg)
    MergeFrom(*source);
  }
}

void LaserMsg::MergeFrom(const LaserMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:laser.LaserMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objs_.MergeFrom(from.objs_);
  if (from.has_time()) {
    mutable_time()->::laser::Timestamp::MergeFrom(from.time());
  }
}

void LaserMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:laser.LaserMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaserMsg::CopyFrom(const LaserMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:laser.LaserMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaserMsg::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->objs())) return false;
  if (has_time()) {
    if (!this->time_->IsInitialized()) return false;
  }
  return true;
}

void LaserMsg::Swap(LaserMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaserMsg::InternalSwap(LaserMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&objs_)->InternalSwap(CastToBase(&other->objs_));
  swap(time_, other->time_);
}

::google::protobuf::Metadata LaserMsg::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_laser_2eproto);
  return ::file_level_metadata_laser_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace laser
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::laser::Timestamp* Arena::CreateMaybeMessage< ::laser::Timestamp >(Arena* arena) {
  return Arena::CreateInternal< ::laser::Timestamp >(arena);
}
template<> PROTOBUF_NOINLINE ::laser::LaserObj* Arena::CreateMaybeMessage< ::laser::LaserObj >(Arena* arena) {
  return Arena::CreateInternal< ::laser::LaserObj >(arena);
}
template<> PROTOBUF_NOINLINE ::laser::LaserMsg* Arena::CreateMaybeMessage< ::laser::LaserMsg >(Arena* arena) {
  return Arena::CreateInternal< ::laser::LaserMsg >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
