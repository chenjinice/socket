/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: laser.proto */

#ifndef PROTOBUF_C_laser_2eproto__INCLUDED
#define PROTOBUF_C_laser_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Laser__Timestamp Laser__Timestamp;
typedef struct _Laser__LaserObj Laser__LaserObj;
typedef struct _Laser__LaserMsg Laser__LaserMsg;


/* --- enums --- */


/* --- messages --- */

/*
 * 时间戳
 */
struct  _Laser__Timestamp
{
  ProtobufCMessage base;
  /*
   * 秒
   */
  uint64_t sec;
  /*
   * 微秒
   */
  uint32_t usec;
};
#define LASER__TIMESTAMP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&laser__timestamp__descriptor) \
    , 0, 0 }


/*
 * 单个检测物体
 */
struct  _Laser__LaserObj
{
  ProtobufCMessage base;
  int32_t object_id;
  /*
   * 经度
   */
  int32_t lng;
  /*
   * 纬度
   */
  int32_t lat;
  /*
   * 物体速度*100
   */
  protobuf_c_boolean has_speed;
  int32_t speed;
  /*
   * 物体方向*100
   */
  protobuf_c_boolean has_heading;
  int32_t heading;
};
#define LASER__LASER_OBJ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&laser__laser_obj__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0 }


/*
 * 下面是要发送的消息结构
 */
struct  _Laser__LaserMsg
{
  ProtobufCMessage base;
  size_t n_objs;
  Laser__LaserObj **objs;
  Laser__Timestamp *time;
};
#define LASER__LASER_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&laser__laser_msg__descriptor) \
    , 0,NULL, NULL }


/* Laser__Timestamp methods */
void   laser__timestamp__init
                     (Laser__Timestamp         *message);
size_t laser__timestamp__get_packed_size
                     (const Laser__Timestamp   *message);
size_t laser__timestamp__pack
                     (const Laser__Timestamp   *message,
                      uint8_t             *out);
size_t laser__timestamp__pack_to_buffer
                     (const Laser__Timestamp   *message,
                      ProtobufCBuffer     *buffer);
Laser__Timestamp *
       laser__timestamp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   laser__timestamp__free_unpacked
                     (Laser__Timestamp *message,
                      ProtobufCAllocator *allocator);
/* Laser__LaserObj methods */
void   laser__laser_obj__init
                     (Laser__LaserObj         *message);
size_t laser__laser_obj__get_packed_size
                     (const Laser__LaserObj   *message);
size_t laser__laser_obj__pack
                     (const Laser__LaserObj   *message,
                      uint8_t             *out);
size_t laser__laser_obj__pack_to_buffer
                     (const Laser__LaserObj   *message,
                      ProtobufCBuffer     *buffer);
Laser__LaserObj *
       laser__laser_obj__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   laser__laser_obj__free_unpacked
                     (Laser__LaserObj *message,
                      ProtobufCAllocator *allocator);
/* Laser__LaserMsg methods */
void   laser__laser_msg__init
                     (Laser__LaserMsg         *message);
size_t laser__laser_msg__get_packed_size
                     (const Laser__LaserMsg   *message);
size_t laser__laser_msg__pack
                     (const Laser__LaserMsg   *message,
                      uint8_t             *out);
size_t laser__laser_msg__pack_to_buffer
                     (const Laser__LaserMsg   *message,
                      ProtobufCBuffer     *buffer);
Laser__LaserMsg *
       laser__laser_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   laser__laser_msg__free_unpacked
                     (Laser__LaserMsg *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Laser__Timestamp_Closure)
                 (const Laser__Timestamp *message,
                  void *closure_data);
typedef void (*Laser__LaserObj_Closure)
                 (const Laser__LaserObj *message,
                  void *closure_data);
typedef void (*Laser__LaserMsg_Closure)
                 (const Laser__LaserMsg *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor laser__timestamp__descriptor;
extern const ProtobufCMessageDescriptor laser__laser_obj__descriptor;
extern const ProtobufCMessageDescriptor laser__laser_msg__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_laser_2eproto__INCLUDED */
