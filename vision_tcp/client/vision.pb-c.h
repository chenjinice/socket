/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: vision.proto */

#ifndef PROTOBUF_C_vision_2eproto__INCLUDED
#define PROTOBUF_C_vision_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Pedestrian Pedestrian;
typedef struct _Obstacle Obstacle;
typedef struct _AvailableArea AvailableArea;
typedef struct _Base Base;
typedef struct _Crowd Crowd;
typedef struct _Obstacles Obstacles;
typedef struct _AvailableAreas AvailableAreas;


/* --- enums --- */

typedef enum _ID {
  /*
   * 行人检测
   */
  ID__PEDESTRIAN_D = 1,
  /*
   * 违章车辆1
   */
  ID__ILLEGAL_V1 = 2,
  /*
   * 超视距视频感知(相机标定信息)
   */
  ID__CAMERA_CAL = 3,
  /*
   * 落石/抛撒物检测
   */
  ID__ROCKFALL_D = 4,
  /*
   * 能见度检测
   */
  ID__SEEING_D = 5,
  /*
   * 可行驶区域检测	
   */
  ID__AVAILABLE_AREA = 6,
  /*
   * 障碍物检测
   */
  ID__OBSTACLE_D = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ID)
} ID;
/*
 * 视觉捕捉到的物体类型
 */
typedef enum _TYPE {
  /*
   * 人
   */
  TYPE__HUMAN = 1,
  /*
   * 车
   */
  TYPE__VEHICLE = 2,
  /*
   * 摩托车
   */
  TYPE__MOTORCYCLE = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TYPE)
} TYPE;

/* --- messages --- */

/*
 * 单个行人
 */
struct  _Pedestrian
{
  ProtobufCMessage base;
  int32_t object_id;
  TYPE object_type;
  /*
   * 经度
   */
  int32_t x;
  /*
   * 纬度
   */
  int32_t y;
  /*
   * 哪个相机（1,2,3,4）
   */
  int32_t camera;
  /*
   * 是否在车道
   */
  protobuf_c_boolean has_if_at_lane;
  int32_t if_at_lane;
  /*
   * 车道id
   */
  protobuf_c_boolean has_lane_id;
  int32_t lane_id;
  protobuf_c_boolean has_heading;
  int32_t heading;
};
#define PEDESTRIAN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pedestrian__descriptor) \
    , 0, TYPE__HUMAN, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


/*
 * 单个障碍物
 */
struct  _Obstacle
{
  ProtobufCMessage base;
  int32_t object_id;
  /*
   * 经度
   */
  int32_t x;
  /*
   * 纬度
   */
  int32_t y;
  /*
   * 哪个相机（1,2,3,4）
   */
  int32_t camera;
  /*
   * 是否在车道
   */
  protobuf_c_boolean has_if_at_lane;
  int32_t if_at_lane;
  /*
   * 车道id
   */
  protobuf_c_boolean has_lane_id;
  int32_t lane_id;
  protobuf_c_boolean has_heading;
  int32_t heading;
};
#define OBSTACLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&obstacle__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


/*
 * 单个可行驶区域
 */
struct  _AvailableArea
{
  ProtobufCMessage base;
  int32_t object_id;
  /*
   * 第一个点经度
   */
  int32_t x1;
  /*
   * 第一个点纬度
   */
  int32_t y1;
  /*
   * 第二个点经度
   */
  int32_t x2;
  /*
   * 第二个点纬度
   */
  int32_t y2;
  /*
   * 哪个相机（1,2,3,4）
   */
  int32_t camera;
  /*
   * 车道id
   */
  protobuf_c_boolean has_lane_id;
  int32_t lane_id;
  protobuf_c_boolean has_heading;
  int32_t heading;
};
#define AVAILABLE_AREA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&available_area__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _Base
{
  ProtobufCMessage base;
  ID id;
};
#define BASE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&base__descriptor) \
    , ID__PEDESTRIAN_D }


/*
 * 行人集合
 */
struct  _Crowd
{
  ProtobufCMessage base;
  ID id;
  size_t n_pedestrian;
  Pedestrian **pedestrian;
};
#define CROWD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&crowd__descriptor) \
    , ID__PEDESTRIAN_D, 0,NULL }


/*
 *多个障碍物集合
 */
struct  _Obstacles
{
  ProtobufCMessage base;
  ID id;
  size_t n_obstacle;
  Obstacle **obstacle;
};
#define OBSTACLES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&obstacles__descriptor) \
    , ID__PEDESTRIAN_D, 0,NULL }


/*
 *可行驶区域集合
 */
struct  _AvailableAreas
{
  ProtobufCMessage base;
  ID id;
  size_t n_area;
  AvailableArea **area;
};
#define AVAILABLE_AREAS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&available_areas__descriptor) \
    , ID__PEDESTRIAN_D, 0,NULL }


/* Pedestrian methods */
void   pedestrian__init
                     (Pedestrian         *message);
size_t pedestrian__get_packed_size
                     (const Pedestrian   *message);
size_t pedestrian__pack
                     (const Pedestrian   *message,
                      uint8_t             *out);
size_t pedestrian__pack_to_buffer
                     (const Pedestrian   *message,
                      ProtobufCBuffer     *buffer);
Pedestrian *
       pedestrian__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pedestrian__free_unpacked
                     (Pedestrian *message,
                      ProtobufCAllocator *allocator);
/* Obstacle methods */
void   obstacle__init
                     (Obstacle         *message);
size_t obstacle__get_packed_size
                     (const Obstacle   *message);
size_t obstacle__pack
                     (const Obstacle   *message,
                      uint8_t             *out);
size_t obstacle__pack_to_buffer
                     (const Obstacle   *message,
                      ProtobufCBuffer     *buffer);
Obstacle *
       obstacle__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   obstacle__free_unpacked
                     (Obstacle *message,
                      ProtobufCAllocator *allocator);
/* AvailableArea methods */
void   available_area__init
                     (AvailableArea         *message);
size_t available_area__get_packed_size
                     (const AvailableArea   *message);
size_t available_area__pack
                     (const AvailableArea   *message,
                      uint8_t             *out);
size_t available_area__pack_to_buffer
                     (const AvailableArea   *message,
                      ProtobufCBuffer     *buffer);
AvailableArea *
       available_area__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   available_area__free_unpacked
                     (AvailableArea *message,
                      ProtobufCAllocator *allocator);
/* Base methods */
void   base__init
                     (Base         *message);
size_t base__get_packed_size
                     (const Base   *message);
size_t base__pack
                     (const Base   *message,
                      uint8_t             *out);
size_t base__pack_to_buffer
                     (const Base   *message,
                      ProtobufCBuffer     *buffer);
Base *
       base__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   base__free_unpacked
                     (Base *message,
                      ProtobufCAllocator *allocator);
/* Crowd methods */
void   crowd__init
                     (Crowd         *message);
size_t crowd__get_packed_size
                     (const Crowd   *message);
size_t crowd__pack
                     (const Crowd   *message,
                      uint8_t             *out);
size_t crowd__pack_to_buffer
                     (const Crowd   *message,
                      ProtobufCBuffer     *buffer);
Crowd *
       crowd__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   crowd__free_unpacked
                     (Crowd *message,
                      ProtobufCAllocator *allocator);
/* Obstacles methods */
void   obstacles__init
                     (Obstacles         *message);
size_t obstacles__get_packed_size
                     (const Obstacles   *message);
size_t obstacles__pack
                     (const Obstacles   *message,
                      uint8_t             *out);
size_t obstacles__pack_to_buffer
                     (const Obstacles   *message,
                      ProtobufCBuffer     *buffer);
Obstacles *
       obstacles__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   obstacles__free_unpacked
                     (Obstacles *message,
                      ProtobufCAllocator *allocator);
/* AvailableAreas methods */
void   available_areas__init
                     (AvailableAreas         *message);
size_t available_areas__get_packed_size
                     (const AvailableAreas   *message);
size_t available_areas__pack
                     (const AvailableAreas   *message,
                      uint8_t             *out);
size_t available_areas__pack_to_buffer
                     (const AvailableAreas   *message,
                      ProtobufCBuffer     *buffer);
AvailableAreas *
       available_areas__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   available_areas__free_unpacked
                     (AvailableAreas *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Pedestrian_Closure)
                 (const Pedestrian *message,
                  void *closure_data);
typedef void (*Obstacle_Closure)
                 (const Obstacle *message,
                  void *closure_data);
typedef void (*AvailableArea_Closure)
                 (const AvailableArea *message,
                  void *closure_data);
typedef void (*Base_Closure)
                 (const Base *message,
                  void *closure_data);
typedef void (*Crowd_Closure)
                 (const Crowd *message,
                  void *closure_data);
typedef void (*Obstacles_Closure)
                 (const Obstacles *message,
                  void *closure_data);
typedef void (*AvailableAreas_Closure)
                 (const AvailableAreas *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    id__descriptor;
extern const ProtobufCEnumDescriptor    type__descriptor;
extern const ProtobufCMessageDescriptor pedestrian__descriptor;
extern const ProtobufCMessageDescriptor obstacle__descriptor;
extern const ProtobufCMessageDescriptor available_area__descriptor;
extern const ProtobufCMessageDescriptor base__descriptor;
extern const ProtobufCMessageDescriptor crowd__descriptor;
extern const ProtobufCMessageDescriptor obstacles__descriptor;
extern const ProtobufCMessageDescriptor available_areas__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_vision_2eproto__INCLUDED */
