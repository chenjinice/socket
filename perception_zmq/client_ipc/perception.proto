/*
    通信协议 : 2020-06-02
    修改log : 
        2020-06-02 : 新建
*/

syntax = "proto2";


package perception;


// 版本号
enum Version{
    VERSION                                     = 20200602; // 版本号
}                                                           
                                                            
// 场景ID                                                   
enum EventId{                                               
    EVENT_NONE                                  = 0;        // 无    
    PEDESTRIAN                                  = 1;        // 行人与动物闯入检测
    ILLEGAL_V1                                  = 2;        // 违章车辆1(违停)
    VISIBILITY                                  = 3;        // 白天能见度检测
    AVAILABLE_AREA                              = 4;        // 可行驶区域检测    
    ABNORMAL_CAR                                = 5;        // 异常车辆检测(静止)
    ILLEGAL_V2                                  = 6;        // 违章车辆2(应急车道)
    TRAFFIC_STATUS                              = 7;        // 交通态势感知
    BACKWARD_DRIVING                            = 8;        // 逆向行驶告警
    ROAD_DANGER                                 = 9;        // 道路危险状况提醒(抛洒物)
    FIRE_SMOKE                                  = 10;       // 隧道内火焰与烟雾预警
    TARGET_TO_FUSION                            = 11;       // 发给融合程序的检测目标
    TRAFFIC_JAM                                 = 12;       // 前方拥堵提醒
    TRAFFIC_FLOW                                = 13;       // 动态配时场景
    SPECIALCAR                                  = 14;       // 特殊车辆
    ACCIDENT                                    = 15;       // 交通事故
    ICEWARN                                     = 16;       // 结冰报警
    LANE_WARE                                   = 17;       // 车道线磨损
    SPEEDING                                    = 18;       // 超速
    SNAP                                        = 19;       // 抓拍物
}                                                           
                                                            
// 检测数据来源                                             
enum Source{                                                
    None                                        = 0;        
    RADAR                                       = 1;        // 毫米波雷达
    VISION                                      = 2;        // 视觉
    LIDAR                                       = 3;        // 激光雷达
    V2X                                         = 4;        // BSM包
}                                                           
                                                            
// 检测目标类型                                             
enum TargetType{                                            
    OTHERS                                      = 0;        // 其他
    HUMAN                                       = 1;        // 人
    VEHICLE                                     = 2;        // 车
    MOTORCYCLE                                  = 3;        // 摩托车    
    ANIMAL                                      = 4;        // 动物
    OBSTACLE                                    = 5;        // 障碍物
}                                                           
                                                            
// 车的类型                                                 
enum CarType{                                               
    NORMAL                                      = 0;        // 普通
    AMBULANCE                                   = 1;        // 救护车
    DANGERCAR                                   = 2;        // 危险品车辆
    FIREENGINE                                  = 3;        // 消防车
    POLICECAR                                   = 4;        // 警车
}              

// 车的状态
enum CarStatus{
    STATUS_NORMAL                               = 0;        // 正常
    RETROGRADE                                  = 1;        // 逆行
    OVER_SPEEDING                               = 2;        // 超速
    LOW_SPEEDING                                = 3;        // 慢速
    ILLEGAL_PARKING                             = 4;        // 违停
    LANE_PARKING                                = 5;        // 主道违停
    AREA_PARKING                                = 6;        // 导流线区域违停
    CONTINUOUS_DIVERSION                        = 7;        // 连续变道（匝道出口区域）
    LINE_PRESSING		                        = 8;  		// 骑线行驶	
}
                                                                                                                                                     
// 车道线磨损类型                                           
enum WareType{                                              
    WARE_NONE                                   = 0;        // 无用    
    FULLLINE                                    = 1;        // 实线（白）
    DOTTEDLINE                                  = 2;        // 虚线
    DOUBLEYELLOWLINE                            = 3;        // 双黄线
}                                                           
                                                            
                                                            
                                                            
                                                            
                                                            
                                                            
                                                            
// 位置                                                     
message Position{                                           
    required int32 lon                          = 1;        // 经度*1e7
    required int32 lat                          = 2;        // 纬度*1e7
    optional float elevation                    = 3;        // 海拔高度,米
}                                                           
                                                            
// 时间戳                                                   
message Timestamp {                                         
    required int64          seconds             = 1;        // 秒
    required int32          nanos               = 2;        // 纳秒
}                                                           
                                                            
// 尺寸                                                     
message Size{                                               
    required float          length              = 1;        // 长，米
    required float          width               = 2;        // 宽，米
    required float          height              = 3;        // 高，米
}                                                           
                                                            
// 车道信息                                                 
message LaneInfoEx {                                        
    required int32          lane_info           = 1;        // 区域类型
    required int32          lane_id             = 2;        // 车道号
    required int32          lane_count          = 3;        // 车道总数
    required float          lane_heading        = 4;        // 道路航向角，度数
}                                                           
                                                            
// 单个道路区域                                             
message LaneArea{                                           
    repeated Position       pos                 = 1;        // 经纬度点
    optional int32          camera              = 2;        // 哪个相机（0,1,2,3）
    optional int32          lane_id             = 3;        // 车道id
    optional float          lane_heading        = 4;        // 道路航向角，度数
    optional WareType       ware                = 5;        // 车道线磨损
}                                                           
                                                            
// 单个道路拥堵情况                                         
message Jam{                                                
    required uint32         vehicle_num         = 1;        // 车辆数
    required float          vehicle_velocity    = 2;        // 车辆平均速度，km/h
    required float          lane_heading        = 3;        // 道路航向角，度数
    repeated int32          vehicle_flow        = 4;        // 每个车道车辆单位时间通过数
    optional int32          lane_id             = 5;        // 车道id
}                                                           
                                                            
// 单个道路流量情况                                         
message Flow{                                               
    enum TrafficSig{                                        
        UNKNOWN                                 = 0;        
        Y2G                                     = 1;        // 黄灯切换到绿灯信号
        OVER                                    = 2;        // 消散时间结束信号
    }                                                       
    optional int32          camera              = 1;        // 哪个相机
    repeated int32          vehicle_num         = 2;        // 每个车道车辆数
    repeated int32          pass_num            = 3;        // 每个车道消散时间内通过车辆数
    optional TrafficSig     signal              = 4;        // 黄灯切换到绿灯信号
}                                                           
                                                            
// 单个检测到的目标                                         
message Target {                                            
    required int32          id                  = 1;        
    required TargetType     type                = 2;        // 目标类型
    required Position       pos                 = 3;        // 经纬度
    optional int32          camera              = 4;        // 哪个相机(0,1,2,3)
    optional float          velocity            = 5;        // 速度，km/h
    optional float          heading             = 6;        // 目标航向角，度数
    optional float          distance            = 7;        // 相对距离，米
    optional Size           size                = 8;        // 尺寸，长宽高
    optional int32          approach_judge      = 9;        // 0 : 标识行人在于摄像头参考航向一致的区域，1 : 标识行人在于摄像头参考航向相反的区域，
                                                            // 3 : 标识两个方向都需要考虑（中间带）
    optional Source         source              = 10;       // 数据来源
    optional int32          capture_id          = 11;       // 抓拍目标ID
    optional bool           in_lane             = 12;       // 是否在车道 
    optional int32          lane_id             = 13;       // 车道id
    optional float          lane_heading        = 14;       // 道路航向角，度数
    optional int32          lane_type           = 15;       // 1=主道，2=上匝道，3=下匝道
    optional LaneInfoEx     lane_ex             = 16;       // 车道其他信息
    optional string         license_plate       = 17;       // 车牌
    optional CarType        car_type            = 18;       // 车辆类型
    optional CarStatus      car_status          = 19;       // 车辆状态
    optional float          confidence          = 20;       // 置信度 
    optional float          rcs                 = 21;       // 雷达散射截面 
}                                                           
                                                            
                                                            
                                                            
                                                            
                                                            
                                                            
                                                            
// 能见度检测相关场景数据                                   
message VisibilityMsg{                                      
    required float          distance            = 2;        // 能见度距离，米
    required int32          level               = 3;        // 能见度等级，0：大于500，1：200~500，2：100~200，3：50~100，4：0-50
}                                                           
                                                            
// 道路可行使区域等相关场景数据                             
message LaneAreaMsg{                                        
    repeated LaneArea       area                = 1;        
}                                                           
                                                            
// 交通拥堵等相关场景数据                                   
message JamMsg{                                             
    repeated Jam            jam                 = 1;        
}                                                           
                                                            
// 动态配时场景数据                                         
message FlowMsg{                                            
    repeated Flow           flow                = 1;        
    optional Timestamp      time_begin          = 2;        
    optional Timestamp      time_end            = 3;        
}                                                           
                                                            
// 目标检测相关场景数据                                     
message TargetMsg{                                          
    repeated Target         target              = 2;        
}                                                           
              
// 报警相关场景需要数据
message WarnMsg{
    required bool           warn                = 1;
}              
                                                            
                                                            
                                                            
                                                            
                                                            
//  ---------------- 要发送的数据包 -----------------------------------------------------
message PerceptionMsg{                                      
    required EventId        event               = 1;        // 场景ID
    oneof MsgType{                                          
        WarnMsg             warn_msg            = 2;   
        VisibilityMsg       visibility_msg      = 3;        
        LaneAreaMsg         lane_area_msg       = 4;        
        JamMsg              jam_msg             = 5;        
        FlowMsg             flow_msg            = 6;        
        TargetMsg           target_msg          = 7;        
    }                                                       
    optional Timestamp      time                = 8;        // 时间戳
}                                                           

