/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: perception.proto */

#ifndef PROTOBUF_C_perception_2eproto__INCLUDED
#define PROTOBUF_C_perception_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Perception__Position Perception__Position;
typedef struct _Perception__Timestamp Perception__Timestamp;
typedef struct _Perception__Size Perception__Size;
typedef struct _Perception__LaneInfoEx Perception__LaneInfoEx;
typedef struct _Perception__LaneArea Perception__LaneArea;
typedef struct _Perception__Jam Perception__Jam;
typedef struct _Perception__Flow Perception__Flow;
typedef struct _Perception__TrafficFlow Perception__TrafficFlow;
typedef struct _Perception__QueueLength Perception__QueueLength;
typedef struct _Perception__Target Perception__Target;
typedef struct _Perception__VisibilityMsg Perception__VisibilityMsg;
typedef struct _Perception__LaneAreaMsg Perception__LaneAreaMsg;
typedef struct _Perception__JamMsg Perception__JamMsg;
typedef struct _Perception__DynamicTimingMsg Perception__DynamicTimingMsg;
typedef struct _Perception__TargetMsg Perception__TargetMsg;
typedef struct _Perception__WarnMsg Perception__WarnMsg;
typedef struct _Perception__TrafficFlowMsg Perception__TrafficFlowMsg;
typedef struct _Perception__QueueMsg Perception__QueueMsg;
typedef struct _Perception__PerceptionMsg Perception__PerceptionMsg;


/* --- enums --- */

typedef enum _Perception__Flow__TrafficSig {
  PERCEPTION__FLOW__TRAFFIC_SIG__UNKNOWN = 0,
  /*
   * 黄灯切换到绿灯信号
   */
  PERCEPTION__FLOW__TRAFFIC_SIG__Y2G = 1,
  /*
   * 消散时间结束信号
   */
  PERCEPTION__FLOW__TRAFFIC_SIG__OVER = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PERCEPTION__FLOW__TRAFFIC_SIG)
} Perception__Flow__TrafficSig;
/*
 * 版本号
 */
typedef enum _Perception__Version {
  /*
   * 版本号
   */
  PERCEPTION__VERSION__VERSION = 20201109
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PERCEPTION__VERSION)
} Perception__Version;
/*
 * 场景ID                                                   
 */
typedef enum _Perception__EventId {
  /*
   * 无    
   */
  PERCEPTION__EVENT_ID__EVENT_NONE = 0,
  /*
   * 行人与动物闯入检测
   */
  PERCEPTION__EVENT_ID__PEDESTRIAN = 1,
  /*
   * 违章车辆1(违停)
   */
  PERCEPTION__EVENT_ID__ILLEGAL_V1 = 2,
  /*
   * 白天能见度检测
   */
  PERCEPTION__EVENT_ID__VISIBILITY = 3,
  /*
   * 可行驶区域检测    
   */
  PERCEPTION__EVENT_ID__AVAILABLE_AREA = 4,
  /*
   * 异常车辆检测(静止)
   */
  PERCEPTION__EVENT_ID__ABNORMAL_CAR = 5,
  /*
   * 违章车辆2(应急车道)
   */
  PERCEPTION__EVENT_ID__ILLEGAL_V2 = 6,
  /*
   * 交通态势感知
   */
  PERCEPTION__EVENT_ID__TRAFFIC_STATUS = 7,
  /*
   * 逆向行驶告警
   */
  PERCEPTION__EVENT_ID__BACKWARD_DRIVING = 8,
  /*
   * 道路危险状况提醒(抛洒物)
   */
  PERCEPTION__EVENT_ID__ROAD_DANGER = 9,
  /*
   * 隧道内火焰与烟雾预警
   */
  PERCEPTION__EVENT_ID__FIRE_SMOKE = 10,
  /*
   * 发给融合程序的检测目标
   */
  PERCEPTION__EVENT_ID__TARGET_TO_FUSION = 11,
  /*
   * 前方拥堵提醒
   */
  PERCEPTION__EVENT_ID__TRAFFIC_JAM = 12,
  /*
   * 车流量检测
   */
  PERCEPTION__EVENT_ID__TRAFFIC_FLOW = 13,
  /*
   * 特殊车辆
   */
  PERCEPTION__EVENT_ID__SPECIALCAR = 14,
  /*
   * 交通事故
   */
  PERCEPTION__EVENT_ID__ACCIDENT = 15,
  /*
   * 结冰报警
   */
  PERCEPTION__EVENT_ID__ICEWARN = 16,
  /*
   * 车道线磨损
   */
  PERCEPTION__EVENT_ID__LANE_WARE = 17,
  /*
   * 超速
   */
  PERCEPTION__EVENT_ID__SPEEDING = 18,
  /*
   * 抓拍物
   */
  PERCEPTION__EVENT_ID__SNAP = 19,
  /*
   * 融合发给rsu的
   */
  PERCEPTION__EVENT_ID__FUSION_TO_RSU = 20,
  /*
   * 动态配时场景
   */
  PERCEPTION__EVENT_ID__DYNAMIC_TIMING = 21,
  /*
   * 排队长度场景
   */
  PERCEPTION__EVENT_ID__QUEUE_LENGTH = 22
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PERCEPTION__EVENT_ID)
} Perception__EventId;
/*
 * 检测数据来源                                             
 */
typedef enum _Perception__Source {
  /*
   * 其他
   */
  PERCEPTION__SOURCE__OTHER_SOURCE = 0,
  /*
   * 毫米波雷达
   */
  PERCEPTION__SOURCE__RADAR = 1,
  /*
   * 视觉
   */
  PERCEPTION__SOURCE__VISION = 2,
  /*
   * 激光雷达
   */
  PERCEPTION__SOURCE__LIDAR = 3,
  /*
   * BSM包
   */
  PERCEPTION__SOURCE__V2X = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PERCEPTION__SOURCE)
} Perception__Source;
/*
 * 检测目标类型                                             
 */
typedef enum _Perception__TargetType {
  /*
   * 其他
   */
  PERCEPTION__TARGET_TYPE__OTHERS = 0,
  /*
   * 人
   */
  PERCEPTION__TARGET_TYPE__HUMAN = 1,
  /*
   * 车
   */
  PERCEPTION__TARGET_TYPE__VEHICLE = 2,
  /*
   * 摩托车    
   */
  PERCEPTION__TARGET_TYPE__MOTORCYCLE = 3,
  /*
   * 动物
   */
  PERCEPTION__TARGET_TYPE__ANIMAL = 4,
  /*
   * 障碍物
   */
  PERCEPTION__TARGET_TYPE__OBSTACLE = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PERCEPTION__TARGET_TYPE)
} Perception__TargetType;
/*
 * 车的类型                                                 
 */
typedef enum _Perception__CarType {
  /*
   * 普通
   */
  PERCEPTION__CAR_TYPE__NORMAL = 0,
  /*
   * 救护车
   */
  PERCEPTION__CAR_TYPE__AMBULANCE = 1,
  /*
   * 危险品车辆
   */
  PERCEPTION__CAR_TYPE__DANGERCAR = 2,
  /*
   * 消防车
   */
  PERCEPTION__CAR_TYPE__FIREENGINE = 3,
  /*
   * 警车
   */
  PERCEPTION__CAR_TYPE__POLICECAR = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PERCEPTION__CAR_TYPE)
} Perception__CarType;
/*
 * 车的状态
 */
typedef enum _Perception__CarStatus {
  /*
   * 正常
   */
  PERCEPTION__CAR_STATUS__STATUS_NORMAL = 0,
  /*
   * 逆行
   */
  PERCEPTION__CAR_STATUS__RETROGRADE = 1,
  /*
   * 超速
   */
  PERCEPTION__CAR_STATUS__OVER_SPEEDING = 2,
  /*
   * 慢速
   */
  PERCEPTION__CAR_STATUS__LOW_SPEEDING = 3,
  /*
   * 违停
   */
  PERCEPTION__CAR_STATUS__ILLEGAL_PARKING = 4,
  /*
   * 主道违停
   */
  PERCEPTION__CAR_STATUS__LANE_PARKING = 5,
  /*
   * 导流线区域违停
   */
  PERCEPTION__CAR_STATUS__AREA_PARKING = 6,
  /*
   * 连续变道（匝道出口区域）
   */
  PERCEPTION__CAR_STATUS__CONTINUOUS_DIVERSION = 7,
  /*
   * 骑线行驶	
   */
  PERCEPTION__CAR_STATUS__LINE_PRESSING = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PERCEPTION__CAR_STATUS)
} Perception__CarStatus;
/*
 * 车道线磨损类型                                           
 */
typedef enum _Perception__WareType {
  /*
   * 无用    
   */
  PERCEPTION__WARE_TYPE__WARE_NONE = 0,
  /*
   * 实线（白）
   */
  PERCEPTION__WARE_TYPE__FULLLINE = 1,
  /*
   * 虚线
   */
  PERCEPTION__WARE_TYPE__DOTTEDLINE = 2,
  /*
   * 双黄线
   */
  PERCEPTION__WARE_TYPE__DOUBLEYELLOWLINE = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PERCEPTION__WARE_TYPE)
} Perception__WareType;

/* --- messages --- */

/*
 * 位置                                                     
 */
struct  _Perception__Position
{
  ProtobufCMessage base;
  /*
   * 经度*1e7
   */
  int32_t lon;
  /*
   * 纬度*1e7
   */
  int32_t lat;
  /*
   * 海拔高度,米
   */
  protobuf_c_boolean has_elevation;
  float elevation;
};
#define PERCEPTION__POSITION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&perception__position__descriptor) \
    , 0, 0, 0, 0 }


/*
 * 时间戳                                                   
 */
struct  _Perception__Timestamp
{
  ProtobufCMessage base;
  /*
   * 秒
   */
  int64_t seconds;
  /*
   * 纳秒
   */
  int32_t nanos;
};
#define PERCEPTION__TIMESTAMP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&perception__timestamp__descriptor) \
    , 0, 0 }


/*
 * 尺寸                                                     
 */
struct  _Perception__Size
{
  ProtobufCMessage base;
  /*
   * 长，米
   */
  float length;
  /*
   * 宽，米
   */
  float width;
  /*
   * 高，米
   */
  float height;
};
#define PERCEPTION__SIZE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&perception__size__descriptor) \
    , 0, 0, 0 }


/*
 * 车道信息                                                 
 */
struct  _Perception__LaneInfoEx
{
  ProtobufCMessage base;
  /*
   * 区域类型
   */
  int32_t lane_info;
  /*
   * 车道号
   */
  int32_t lane_id;
  /*
   * 车道总数
   */
  int32_t lane_count;
  /*
   * 道路航向角，度数
   */
  float lane_heading;
};
#define PERCEPTION__LANE_INFO_EX__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&perception__lane_info_ex__descriptor) \
    , 0, 0, 0, 0 }


/*
 * 单个道路区域                                             
 */
struct  _Perception__LaneArea
{
  ProtobufCMessage base;
  /*
   * 经纬度点
   */
  size_t n_pos;
  Perception__Position **pos;
  /*
   * 哪个相机（0,1,2,3）
   */
  protobuf_c_boolean has_camera;
  int32_t camera;
  /*
   * 车道id
   */
  protobuf_c_boolean has_lane_id;
  int32_t lane_id;
  /*
   * 道路航向角，度数
   */
  protobuf_c_boolean has_lane_heading;
  float lane_heading;
  /*
   * 车道线磨损
   */
  protobuf_c_boolean has_ware;
  Perception__WareType ware;
};
#define PERCEPTION__LANE_AREA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&perception__lane_area__descriptor) \
    , 0,NULL, 0, 0, 0, 0, 0, 0, 0, PERCEPTION__WARE_TYPE__WARE_NONE }


/*
 * 单个道路拥堵情况                                         
 */
struct  _Perception__Jam
{
  ProtobufCMessage base;
  /*
   * 车辆数
   */
  uint32_t vehicle_num;
  /*
   * 车辆平均速度，km/h 
   */
  float vehicle_velocity;
  /*
   * 道路航向角，度数
   */
  float lane_heading;
  /*
   * 每个车道车辆单位时间通过数
   */
  size_t n_vehicle_flow;
  int32_t *vehicle_flow;
  /*
   * 车道id
   */
  protobuf_c_boolean has_lane_id;
  int32_t lane_id;
};
#define PERCEPTION__JAM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&perception__jam__descriptor) \
    , 0, 0, 0, 0,NULL, 0, 0 }


/*
 * 动态配时场景需要数据，单个道路流量情况                                         
 */
struct  _Perception__Flow
{
  ProtobufCMessage base;
  /*
   * 哪个相机
   */
  protobuf_c_boolean has_camera;
  int32_t camera;
  /*
   * 每个车道车辆数
   */
  size_t n_vehicle_num;
  int32_t *vehicle_num;
  /*
   * 每个车道消散时间内通过车辆数
   */
  size_t n_pass_num;
  int32_t *pass_num;
  /*
   * 黄灯切换到绿灯信号
   */
  protobuf_c_boolean has_signal;
  Perception__Flow__TrafficSig signal;
};
#define PERCEPTION__FLOW__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&perception__flow__descriptor) \
    , 0, 0, 0,NULL, 0,NULL, 0, PERCEPTION__FLOW__TRAFFIC_SIG__UNKNOWN }


/*
 *  单个相机车流量检测                                     
 */
struct  _Perception__TrafficFlow
{
  ProtobufCMessage base;
  /*
   * 地图node的ID号
   */
  int32_t node_id;
  /*
   * 地图link_id的ID号
   */
  int32_t link_id;
  /*
   * 每个车道车辆数
   */
  size_t n_vehicle_num;
  int32_t *vehicle_num;
  /*
   * 车道属性，直行、左转等   
   */
  size_t n_maneuvers;
  int32_t *maneuvers;
  /*
   * 每个车道在固定时间内通过车辆数
   */
  size_t n_pass_num;
  int32_t *pass_num;
};
#define PERCEPTION__TRAFFIC_FLOW__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&perception__traffic_flow__descriptor) \
    , 0, 0, 0,NULL, 0,NULL, 0,NULL }


/*
 *  单个link排队长度                                                           
 */
struct  _Perception__QueueLength
{
  ProtobufCMessage base;
  /*
   * 地图 node 的 ID 号
   */
  int32_t node_id;
  /*
   * 地图 link_id 的 ID 号
   */
  int32_t link_id;
  /*
   * 每个车道车辆数
   */
  size_t n_vehicle_num;
  int32_t *vehicle_num;
  /*
   * 车道属性，直行、左转等
   */
  size_t n_maneuvers;
  int32_t *maneuvers;
};
#define PERCEPTION__QUEUE_LENGTH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&perception__queue_length__descriptor) \
    , 0, 0, 0,NULL, 0,NULL }


/*
 * 单个检测到的目标                                         
 */
struct  _Perception__Target
{
  ProtobufCMessage base;
  int32_t id;
  /*
   * 目标类型
   */
  Perception__TargetType type;
  /*
   * 经纬度
   */
  Perception__Position *pos;
  /*
   * 哪个相机(0,1,2,3)
   */
  protobuf_c_boolean has_camera;
  int32_t camera;
  /*
   * 速度，km/h
   */
  protobuf_c_boolean has_velocity;
  float velocity;
  /*
   * 目标航向角，度数
   */
  protobuf_c_boolean has_heading;
  float heading;
  /*
   * 相对距离，米
   */
  protobuf_c_boolean has_distance;
  float distance;
  /*
   * 尺寸，长宽高
   */
  Perception__Size *size;
  /*
   * 0 : 标识行人在于摄像头参考航向一致的区域，1 : 标识行人在于摄像头参考航向相反的区域，
   */
  protobuf_c_boolean has_approach_judge;
  int32_t approach_judge;
  /*
   * 3 : 标识两个方向都需要考虑（中间带）
   */
  /*
   * 数据来源
   */
  protobuf_c_boolean has_source;
  Perception__Source source;
  /*
   * 抓拍目标ID
   */
  protobuf_c_boolean has_capture_id;
  int32_t capture_id;
  /*
   * 是否在车道 
   */
  protobuf_c_boolean has_in_lane;
  protobuf_c_boolean in_lane;
  /*
   * 车道id
   */
  protobuf_c_boolean has_lane_id;
  int32_t lane_id;
  /*
   * 道路航向角，度数
   */
  protobuf_c_boolean has_lane_heading;
  float lane_heading;
  /*
   * 1=主道，2=上匝道，3=下匝道
   */
  protobuf_c_boolean has_lane_type;
  int32_t lane_type;
  /*
   * 车道其他信息
   */
  Perception__LaneInfoEx *lane_ex;
  /*
   * 车牌
   */
  char *license_plate;
  /*
   * 车辆类型
   */
  protobuf_c_boolean has_car_type;
  Perception__CarType car_type;
  /*
   * 车辆状态
   */
  protobuf_c_boolean has_car_status;
  Perception__CarStatus car_status;
  /*
   * 置信度 
   */
  protobuf_c_boolean has_confidence;
  float confidence;
  /*
   * 雷达散射截面 
   */
  protobuf_c_boolean has_rcs;
  float rcs;
};
#define PERCEPTION__TARGET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&perception__target__descriptor) \
    , 0, PERCEPTION__TARGET_TYPE__OTHERS, NULL, 0, 0, 0, 0, 0, 0, 0, 0, NULL, 0, 0, 0, PERCEPTION__SOURCE__OTHER_SOURCE, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL, NULL, 0, PERCEPTION__CAR_TYPE__NORMAL, 0, PERCEPTION__CAR_STATUS__STATUS_NORMAL, 0, 0, 0, 0 }


/*
 * 能见度检测相关场景数据                                   
 */
struct  _Perception__VisibilityMsg
{
  ProtobufCMessage base;
  /*
   * 能见度等级，0：大于500，1：200~500，2：100~200，3：50~100，4：0-50
   */
  int32_t level;
  /*
   * 相机所在GPS位置
   */
  Perception__Position *camera_pos;
};
#define PERCEPTION__VISIBILITY_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&perception__visibility_msg__descriptor) \
    , 0, NULL }


/*
 * 道路可行使区域等相关场景数据                             
 */
struct  _Perception__LaneAreaMsg
{
  ProtobufCMessage base;
  size_t n_area;
  Perception__LaneArea **area;
};
#define PERCEPTION__LANE_AREA_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&perception__lane_area_msg__descriptor) \
    , 0,NULL }


/*
 * 交通拥堵等相关场景数据                                   
 */
struct  _Perception__JamMsg
{
  ProtobufCMessage base;
  size_t n_jam;
  Perception__Jam **jam;
};
#define PERCEPTION__JAM_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&perception__jam_msg__descriptor) \
    , 0,NULL }


/*
 * 动态配时场景数据                                         
 */
struct  _Perception__DynamicTimingMsg
{
  ProtobufCMessage base;
  size_t n_flow;
  Perception__Flow **flow;
  Perception__Timestamp *time_begin;
  Perception__Timestamp *time_end;
};
#define PERCEPTION__DYNAMIC_TIMING_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&perception__dynamic_timing_msg__descriptor) \
    , 0,NULL, NULL, NULL }


/*
 * 目标检测相关场景数据                                     
 */
struct  _Perception__TargetMsg
{
  ProtobufCMessage base;
  size_t n_target;
  Perception__Target **target;
};
#define PERCEPTION__TARGET_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&perception__target_msg__descriptor) \
    , 0,NULL }


/*
 * 报警相关场景需要数据
 */
struct  _Perception__WarnMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean warn;
};
#define PERCEPTION__WARN_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&perception__warn_msg__descriptor) \
    , 0 }


/*
 * 车流量检测需要数据                                     
 */
struct  _Perception__TrafficFlowMsg
{
  ProtobufCMessage base;
  size_t n_flow;
  Perception__TrafficFlow **flow;
  /*
   * 统计开始时间
   */
  Perception__Timestamp *time_begin;
  /*
   * 统计结束时间
   */
  Perception__Timestamp *time_end;
};
#define PERCEPTION__TRAFFIC_FLOW_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&perception__traffic_flow_msg__descriptor) \
    , 0,NULL, NULL, NULL }


/*
 * 排队长度场景需要数据     
 */
struct  _Perception__QueueMsg
{
  ProtobufCMessage base;
  size_t n_queue;
  Perception__QueueLength **queue;
};
#define PERCEPTION__QUEUE_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&perception__queue_msg__descriptor) \
    , 0,NULL }


typedef enum {
  PERCEPTION__PERCEPTION_MSG__MSG_TYPE__NOT_SET = 0,
  PERCEPTION__PERCEPTION_MSG__MSG_TYPE_WARN_MSG = 2,
  PERCEPTION__PERCEPTION_MSG__MSG_TYPE_VISIBILITY_MSG = 3,
  PERCEPTION__PERCEPTION_MSG__MSG_TYPE_LANE_AREA_MSG = 4,
  PERCEPTION__PERCEPTION_MSG__MSG_TYPE_JAM_MSG = 5,
  PERCEPTION__PERCEPTION_MSG__MSG_TYPE_DYNAMIC_MSG = 6,
  PERCEPTION__PERCEPTION_MSG__MSG_TYPE_TARGET_MSG = 7,
  PERCEPTION__PERCEPTION_MSG__MSG_TYPE_TRAFFIC_FLOW_MSG = 8,
  PERCEPTION__PERCEPTION_MSG__MSG_TYPE_QUEUE_MSG = 9
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PERCEPTION__PERCEPTION_MSG__MSG_TYPE)
} Perception__PerceptionMsg__MsgTypeCase;

/*
 *  ---------------- 要发送的数据包 -----------------------------------------------------
 */
struct  _Perception__PerceptionMsg
{
  ProtobufCMessage base;
  /*
   * 场景ID
   */
  Perception__EventId event;
  /*
   * 时间戳
   */
  Perception__Timestamp *time;
  Perception__PerceptionMsg__MsgTypeCase msg_type_case;
  union {
    Perception__WarnMsg *warn_msg;
    Perception__VisibilityMsg *visibility_msg;
    Perception__LaneAreaMsg *lane_area_msg;
    Perception__JamMsg *jam_msg;
    Perception__DynamicTimingMsg *dynamic_msg;
    Perception__TargetMsg *target_msg;
    Perception__TrafficFlowMsg *traffic_flow_msg;
    Perception__QueueMsg *queue_msg;
  };
};
#define PERCEPTION__PERCEPTION_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&perception__perception_msg__descriptor) \
    , PERCEPTION__EVENT_ID__EVENT_NONE, NULL, PERCEPTION__PERCEPTION_MSG__MSG_TYPE__NOT_SET, {0} }


/* Perception__Position methods */
void   perception__position__init
                     (Perception__Position         *message);
size_t perception__position__get_packed_size
                     (const Perception__Position   *message);
size_t perception__position__pack
                     (const Perception__Position   *message,
                      uint8_t             *out);
size_t perception__position__pack_to_buffer
                     (const Perception__Position   *message,
                      ProtobufCBuffer     *buffer);
Perception__Position *
       perception__position__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   perception__position__free_unpacked
                     (Perception__Position *message,
                      ProtobufCAllocator *allocator);
/* Perception__Timestamp methods */
void   perception__timestamp__init
                     (Perception__Timestamp         *message);
size_t perception__timestamp__get_packed_size
                     (const Perception__Timestamp   *message);
size_t perception__timestamp__pack
                     (const Perception__Timestamp   *message,
                      uint8_t             *out);
size_t perception__timestamp__pack_to_buffer
                     (const Perception__Timestamp   *message,
                      ProtobufCBuffer     *buffer);
Perception__Timestamp *
       perception__timestamp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   perception__timestamp__free_unpacked
                     (Perception__Timestamp *message,
                      ProtobufCAllocator *allocator);
/* Perception__Size methods */
void   perception__size__init
                     (Perception__Size         *message);
size_t perception__size__get_packed_size
                     (const Perception__Size   *message);
size_t perception__size__pack
                     (const Perception__Size   *message,
                      uint8_t             *out);
size_t perception__size__pack_to_buffer
                     (const Perception__Size   *message,
                      ProtobufCBuffer     *buffer);
Perception__Size *
       perception__size__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   perception__size__free_unpacked
                     (Perception__Size *message,
                      ProtobufCAllocator *allocator);
/* Perception__LaneInfoEx methods */
void   perception__lane_info_ex__init
                     (Perception__LaneInfoEx         *message);
size_t perception__lane_info_ex__get_packed_size
                     (const Perception__LaneInfoEx   *message);
size_t perception__lane_info_ex__pack
                     (const Perception__LaneInfoEx   *message,
                      uint8_t             *out);
size_t perception__lane_info_ex__pack_to_buffer
                     (const Perception__LaneInfoEx   *message,
                      ProtobufCBuffer     *buffer);
Perception__LaneInfoEx *
       perception__lane_info_ex__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   perception__lane_info_ex__free_unpacked
                     (Perception__LaneInfoEx *message,
                      ProtobufCAllocator *allocator);
/* Perception__LaneArea methods */
void   perception__lane_area__init
                     (Perception__LaneArea         *message);
size_t perception__lane_area__get_packed_size
                     (const Perception__LaneArea   *message);
size_t perception__lane_area__pack
                     (const Perception__LaneArea   *message,
                      uint8_t             *out);
size_t perception__lane_area__pack_to_buffer
                     (const Perception__LaneArea   *message,
                      ProtobufCBuffer     *buffer);
Perception__LaneArea *
       perception__lane_area__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   perception__lane_area__free_unpacked
                     (Perception__LaneArea *message,
                      ProtobufCAllocator *allocator);
/* Perception__Jam methods */
void   perception__jam__init
                     (Perception__Jam         *message);
size_t perception__jam__get_packed_size
                     (const Perception__Jam   *message);
size_t perception__jam__pack
                     (const Perception__Jam   *message,
                      uint8_t             *out);
size_t perception__jam__pack_to_buffer
                     (const Perception__Jam   *message,
                      ProtobufCBuffer     *buffer);
Perception__Jam *
       perception__jam__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   perception__jam__free_unpacked
                     (Perception__Jam *message,
                      ProtobufCAllocator *allocator);
/* Perception__Flow methods */
void   perception__flow__init
                     (Perception__Flow         *message);
size_t perception__flow__get_packed_size
                     (const Perception__Flow   *message);
size_t perception__flow__pack
                     (const Perception__Flow   *message,
                      uint8_t             *out);
size_t perception__flow__pack_to_buffer
                     (const Perception__Flow   *message,
                      ProtobufCBuffer     *buffer);
Perception__Flow *
       perception__flow__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   perception__flow__free_unpacked
                     (Perception__Flow *message,
                      ProtobufCAllocator *allocator);
/* Perception__TrafficFlow methods */
void   perception__traffic_flow__init
                     (Perception__TrafficFlow         *message);
size_t perception__traffic_flow__get_packed_size
                     (const Perception__TrafficFlow   *message);
size_t perception__traffic_flow__pack
                     (const Perception__TrafficFlow   *message,
                      uint8_t             *out);
size_t perception__traffic_flow__pack_to_buffer
                     (const Perception__TrafficFlow   *message,
                      ProtobufCBuffer     *buffer);
Perception__TrafficFlow *
       perception__traffic_flow__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   perception__traffic_flow__free_unpacked
                     (Perception__TrafficFlow *message,
                      ProtobufCAllocator *allocator);
/* Perception__QueueLength methods */
void   perception__queue_length__init
                     (Perception__QueueLength         *message);
size_t perception__queue_length__get_packed_size
                     (const Perception__QueueLength   *message);
size_t perception__queue_length__pack
                     (const Perception__QueueLength   *message,
                      uint8_t             *out);
size_t perception__queue_length__pack_to_buffer
                     (const Perception__QueueLength   *message,
                      ProtobufCBuffer     *buffer);
Perception__QueueLength *
       perception__queue_length__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   perception__queue_length__free_unpacked
                     (Perception__QueueLength *message,
                      ProtobufCAllocator *allocator);
/* Perception__Target methods */
void   perception__target__init
                     (Perception__Target         *message);
size_t perception__target__get_packed_size
                     (const Perception__Target   *message);
size_t perception__target__pack
                     (const Perception__Target   *message,
                      uint8_t             *out);
size_t perception__target__pack_to_buffer
                     (const Perception__Target   *message,
                      ProtobufCBuffer     *buffer);
Perception__Target *
       perception__target__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   perception__target__free_unpacked
                     (Perception__Target *message,
                      ProtobufCAllocator *allocator);
/* Perception__VisibilityMsg methods */
void   perception__visibility_msg__init
                     (Perception__VisibilityMsg         *message);
size_t perception__visibility_msg__get_packed_size
                     (const Perception__VisibilityMsg   *message);
size_t perception__visibility_msg__pack
                     (const Perception__VisibilityMsg   *message,
                      uint8_t             *out);
size_t perception__visibility_msg__pack_to_buffer
                     (const Perception__VisibilityMsg   *message,
                      ProtobufCBuffer     *buffer);
Perception__VisibilityMsg *
       perception__visibility_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   perception__visibility_msg__free_unpacked
                     (Perception__VisibilityMsg *message,
                      ProtobufCAllocator *allocator);
/* Perception__LaneAreaMsg methods */
void   perception__lane_area_msg__init
                     (Perception__LaneAreaMsg         *message);
size_t perception__lane_area_msg__get_packed_size
                     (const Perception__LaneAreaMsg   *message);
size_t perception__lane_area_msg__pack
                     (const Perception__LaneAreaMsg   *message,
                      uint8_t             *out);
size_t perception__lane_area_msg__pack_to_buffer
                     (const Perception__LaneAreaMsg   *message,
                      ProtobufCBuffer     *buffer);
Perception__LaneAreaMsg *
       perception__lane_area_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   perception__lane_area_msg__free_unpacked
                     (Perception__LaneAreaMsg *message,
                      ProtobufCAllocator *allocator);
/* Perception__JamMsg methods */
void   perception__jam_msg__init
                     (Perception__JamMsg         *message);
size_t perception__jam_msg__get_packed_size
                     (const Perception__JamMsg   *message);
size_t perception__jam_msg__pack
                     (const Perception__JamMsg   *message,
                      uint8_t             *out);
size_t perception__jam_msg__pack_to_buffer
                     (const Perception__JamMsg   *message,
                      ProtobufCBuffer     *buffer);
Perception__JamMsg *
       perception__jam_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   perception__jam_msg__free_unpacked
                     (Perception__JamMsg *message,
                      ProtobufCAllocator *allocator);
/* Perception__DynamicTimingMsg methods */
void   perception__dynamic_timing_msg__init
                     (Perception__DynamicTimingMsg         *message);
size_t perception__dynamic_timing_msg__get_packed_size
                     (const Perception__DynamicTimingMsg   *message);
size_t perception__dynamic_timing_msg__pack
                     (const Perception__DynamicTimingMsg   *message,
                      uint8_t             *out);
size_t perception__dynamic_timing_msg__pack_to_buffer
                     (const Perception__DynamicTimingMsg   *message,
                      ProtobufCBuffer     *buffer);
Perception__DynamicTimingMsg *
       perception__dynamic_timing_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   perception__dynamic_timing_msg__free_unpacked
                     (Perception__DynamicTimingMsg *message,
                      ProtobufCAllocator *allocator);
/* Perception__TargetMsg methods */
void   perception__target_msg__init
                     (Perception__TargetMsg         *message);
size_t perception__target_msg__get_packed_size
                     (const Perception__TargetMsg   *message);
size_t perception__target_msg__pack
                     (const Perception__TargetMsg   *message,
                      uint8_t             *out);
size_t perception__target_msg__pack_to_buffer
                     (const Perception__TargetMsg   *message,
                      ProtobufCBuffer     *buffer);
Perception__TargetMsg *
       perception__target_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   perception__target_msg__free_unpacked
                     (Perception__TargetMsg *message,
                      ProtobufCAllocator *allocator);
/* Perception__WarnMsg methods */
void   perception__warn_msg__init
                     (Perception__WarnMsg         *message);
size_t perception__warn_msg__get_packed_size
                     (const Perception__WarnMsg   *message);
size_t perception__warn_msg__pack
                     (const Perception__WarnMsg   *message,
                      uint8_t             *out);
size_t perception__warn_msg__pack_to_buffer
                     (const Perception__WarnMsg   *message,
                      ProtobufCBuffer     *buffer);
Perception__WarnMsg *
       perception__warn_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   perception__warn_msg__free_unpacked
                     (Perception__WarnMsg *message,
                      ProtobufCAllocator *allocator);
/* Perception__TrafficFlowMsg methods */
void   perception__traffic_flow_msg__init
                     (Perception__TrafficFlowMsg         *message);
size_t perception__traffic_flow_msg__get_packed_size
                     (const Perception__TrafficFlowMsg   *message);
size_t perception__traffic_flow_msg__pack
                     (const Perception__TrafficFlowMsg   *message,
                      uint8_t             *out);
size_t perception__traffic_flow_msg__pack_to_buffer
                     (const Perception__TrafficFlowMsg   *message,
                      ProtobufCBuffer     *buffer);
Perception__TrafficFlowMsg *
       perception__traffic_flow_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   perception__traffic_flow_msg__free_unpacked
                     (Perception__TrafficFlowMsg *message,
                      ProtobufCAllocator *allocator);
/* Perception__QueueMsg methods */
void   perception__queue_msg__init
                     (Perception__QueueMsg         *message);
size_t perception__queue_msg__get_packed_size
                     (const Perception__QueueMsg   *message);
size_t perception__queue_msg__pack
                     (const Perception__QueueMsg   *message,
                      uint8_t             *out);
size_t perception__queue_msg__pack_to_buffer
                     (const Perception__QueueMsg   *message,
                      ProtobufCBuffer     *buffer);
Perception__QueueMsg *
       perception__queue_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   perception__queue_msg__free_unpacked
                     (Perception__QueueMsg *message,
                      ProtobufCAllocator *allocator);
/* Perception__PerceptionMsg methods */
void   perception__perception_msg__init
                     (Perception__PerceptionMsg         *message);
size_t perception__perception_msg__get_packed_size
                     (const Perception__PerceptionMsg   *message);
size_t perception__perception_msg__pack
                     (const Perception__PerceptionMsg   *message,
                      uint8_t             *out);
size_t perception__perception_msg__pack_to_buffer
                     (const Perception__PerceptionMsg   *message,
                      ProtobufCBuffer     *buffer);
Perception__PerceptionMsg *
       perception__perception_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   perception__perception_msg__free_unpacked
                     (Perception__PerceptionMsg *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Perception__Position_Closure)
                 (const Perception__Position *message,
                  void *closure_data);
typedef void (*Perception__Timestamp_Closure)
                 (const Perception__Timestamp *message,
                  void *closure_data);
typedef void (*Perception__Size_Closure)
                 (const Perception__Size *message,
                  void *closure_data);
typedef void (*Perception__LaneInfoEx_Closure)
                 (const Perception__LaneInfoEx *message,
                  void *closure_data);
typedef void (*Perception__LaneArea_Closure)
                 (const Perception__LaneArea *message,
                  void *closure_data);
typedef void (*Perception__Jam_Closure)
                 (const Perception__Jam *message,
                  void *closure_data);
typedef void (*Perception__Flow_Closure)
                 (const Perception__Flow *message,
                  void *closure_data);
typedef void (*Perception__TrafficFlow_Closure)
                 (const Perception__TrafficFlow *message,
                  void *closure_data);
typedef void (*Perception__QueueLength_Closure)
                 (const Perception__QueueLength *message,
                  void *closure_data);
typedef void (*Perception__Target_Closure)
                 (const Perception__Target *message,
                  void *closure_data);
typedef void (*Perception__VisibilityMsg_Closure)
                 (const Perception__VisibilityMsg *message,
                  void *closure_data);
typedef void (*Perception__LaneAreaMsg_Closure)
                 (const Perception__LaneAreaMsg *message,
                  void *closure_data);
typedef void (*Perception__JamMsg_Closure)
                 (const Perception__JamMsg *message,
                  void *closure_data);
typedef void (*Perception__DynamicTimingMsg_Closure)
                 (const Perception__DynamicTimingMsg *message,
                  void *closure_data);
typedef void (*Perception__TargetMsg_Closure)
                 (const Perception__TargetMsg *message,
                  void *closure_data);
typedef void (*Perception__WarnMsg_Closure)
                 (const Perception__WarnMsg *message,
                  void *closure_data);
typedef void (*Perception__TrafficFlowMsg_Closure)
                 (const Perception__TrafficFlowMsg *message,
                  void *closure_data);
typedef void (*Perception__QueueMsg_Closure)
                 (const Perception__QueueMsg *message,
                  void *closure_data);
typedef void (*Perception__PerceptionMsg_Closure)
                 (const Perception__PerceptionMsg *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    perception__version__descriptor;
extern const ProtobufCEnumDescriptor    perception__event_id__descriptor;
extern const ProtobufCEnumDescriptor    perception__source__descriptor;
extern const ProtobufCEnumDescriptor    perception__target_type__descriptor;
extern const ProtobufCEnumDescriptor    perception__car_type__descriptor;
extern const ProtobufCEnumDescriptor    perception__car_status__descriptor;
extern const ProtobufCEnumDescriptor    perception__ware_type__descriptor;
extern const ProtobufCMessageDescriptor perception__position__descriptor;
extern const ProtobufCMessageDescriptor perception__timestamp__descriptor;
extern const ProtobufCMessageDescriptor perception__size__descriptor;
extern const ProtobufCMessageDescriptor perception__lane_info_ex__descriptor;
extern const ProtobufCMessageDescriptor perception__lane_area__descriptor;
extern const ProtobufCMessageDescriptor perception__jam__descriptor;
extern const ProtobufCMessageDescriptor perception__flow__descriptor;
extern const ProtobufCEnumDescriptor    perception__flow__traffic_sig__descriptor;
extern const ProtobufCMessageDescriptor perception__traffic_flow__descriptor;
extern const ProtobufCMessageDescriptor perception__queue_length__descriptor;
extern const ProtobufCMessageDescriptor perception__target__descriptor;
extern const ProtobufCMessageDescriptor perception__visibility_msg__descriptor;
extern const ProtobufCMessageDescriptor perception__lane_area_msg__descriptor;
extern const ProtobufCMessageDescriptor perception__jam_msg__descriptor;
extern const ProtobufCMessageDescriptor perception__dynamic_timing_msg__descriptor;
extern const ProtobufCMessageDescriptor perception__target_msg__descriptor;
extern const ProtobufCMessageDescriptor perception__warn_msg__descriptor;
extern const ProtobufCMessageDescriptor perception__traffic_flow_msg__descriptor;
extern const ProtobufCMessageDescriptor perception__queue_msg__descriptor;
extern const ProtobufCMessageDescriptor perception__perception_msg__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_perception_2eproto__INCLUDED */
