/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: trigger.proto */

#ifndef PROTOBUF_C_trigger_2eproto__INCLUDED
#define PROTOBUF_C_trigger_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Trigger__SnapObj Trigger__SnapObj;
typedef struct _Trigger__Timestamp Trigger__Timestamp;
typedef struct _Trigger__Base Trigger__Base;
typedef struct _Trigger__SnapMsg Trigger__SnapMsg;


/* --- enums --- */

/*
 * 场景ID
 */
typedef enum _Trigger__ID {
  /*
   * 无用
   */
  TRIGGER__ID__DEFAULT = 0,
  /*
   * 抓拍物
   */
  TRIGGER__ID__SNAP = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TRIGGER__ID)
} Trigger__ID;

/* --- messages --- */

/*
 * 单个抓拍物
 */
struct  _Trigger__SnapObj
{
  ProtobufCMessage base;
  /*
   *GPS_lon*1e7
   */
  int32_t lng;
  /*
   *GPS_lat*1e7
   */
  int32_t lat;
  /*
   *speed * 100 km/h	
   */
  int32_t speed;
  /*
   * 哪个相机（1,2,3,4） 
   */
  int32_t camera;
  /*
   * 抓拍类型
   */
  int32_t type;
};
#define TRIGGER__SNAP_OBJ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&trigger__snap_obj__descriptor) \
    , 0, 0, 0, 0, 0 }


/*
 * 时间戳
 */
struct  _Trigger__Timestamp
{
  ProtobufCMessage base;
  /*
   * 秒
   */
  int64_t seconds;
  /*
   * 纳秒
   */
  int32_t nanos;
};
#define TRIGGER__TIMESTAMP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&trigger__timestamp__descriptor) \
    , 0, 0 }


struct  _Trigger__Base
{
  ProtobufCMessage base;
  Trigger__ID id;
};
#define TRIGGER__BASE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&trigger__base__descriptor) \
    , TRIGGER__ID__DEFAULT }


struct  _Trigger__SnapMsg
{
  ProtobufCMessage base;
  Trigger__ID id;
  size_t n_array;
  Trigger__SnapObj **array;
  Trigger__Timestamp *time;
};
#define TRIGGER__SNAP_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&trigger__snap_msg__descriptor) \
    , TRIGGER__ID__DEFAULT, 0,NULL, NULL }


/* Trigger__SnapObj methods */
void   trigger__snap_obj__init
                     (Trigger__SnapObj         *message);
size_t trigger__snap_obj__get_packed_size
                     (const Trigger__SnapObj   *message);
size_t trigger__snap_obj__pack
                     (const Trigger__SnapObj   *message,
                      uint8_t             *out);
size_t trigger__snap_obj__pack_to_buffer
                     (const Trigger__SnapObj   *message,
                      ProtobufCBuffer     *buffer);
Trigger__SnapObj *
       trigger__snap_obj__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   trigger__snap_obj__free_unpacked
                     (Trigger__SnapObj *message,
                      ProtobufCAllocator *allocator);
/* Trigger__Timestamp methods */
void   trigger__timestamp__init
                     (Trigger__Timestamp         *message);
size_t trigger__timestamp__get_packed_size
                     (const Trigger__Timestamp   *message);
size_t trigger__timestamp__pack
                     (const Trigger__Timestamp   *message,
                      uint8_t             *out);
size_t trigger__timestamp__pack_to_buffer
                     (const Trigger__Timestamp   *message,
                      ProtobufCBuffer     *buffer);
Trigger__Timestamp *
       trigger__timestamp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   trigger__timestamp__free_unpacked
                     (Trigger__Timestamp *message,
                      ProtobufCAllocator *allocator);
/* Trigger__Base methods */
void   trigger__base__init
                     (Trigger__Base         *message);
size_t trigger__base__get_packed_size
                     (const Trigger__Base   *message);
size_t trigger__base__pack
                     (const Trigger__Base   *message,
                      uint8_t             *out);
size_t trigger__base__pack_to_buffer
                     (const Trigger__Base   *message,
                      ProtobufCBuffer     *buffer);
Trigger__Base *
       trigger__base__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   trigger__base__free_unpacked
                     (Trigger__Base *message,
                      ProtobufCAllocator *allocator);
/* Trigger__SnapMsg methods */
void   trigger__snap_msg__init
                     (Trigger__SnapMsg         *message);
size_t trigger__snap_msg__get_packed_size
                     (const Trigger__SnapMsg   *message);
size_t trigger__snap_msg__pack
                     (const Trigger__SnapMsg   *message,
                      uint8_t             *out);
size_t trigger__snap_msg__pack_to_buffer
                     (const Trigger__SnapMsg   *message,
                      ProtobufCBuffer     *buffer);
Trigger__SnapMsg *
       trigger__snap_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   trigger__snap_msg__free_unpacked
                     (Trigger__SnapMsg *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Trigger__SnapObj_Closure)
                 (const Trigger__SnapObj *message,
                  void *closure_data);
typedef void (*Trigger__Timestamp_Closure)
                 (const Trigger__Timestamp *message,
                  void *closure_data);
typedef void (*Trigger__Base_Closure)
                 (const Trigger__Base *message,
                  void *closure_data);
typedef void (*Trigger__SnapMsg_Closure)
                 (const Trigger__SnapMsg *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    trigger__id__descriptor;
extern const ProtobufCMessageDescriptor trigger__snap_obj__descriptor;
extern const ProtobufCMessageDescriptor trigger__timestamp__descriptor;
extern const ProtobufCMessageDescriptor trigger__base__descriptor;
extern const ProtobufCMessageDescriptor trigger__snap_msg__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_trigger_2eproto__INCLUDED */
